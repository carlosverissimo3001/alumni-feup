/* tslint:disable */
/* eslint-disable */
/**
 * API
 * API description
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateReviewDto,
  ReviewGeoJSONFeatureCollection,
} from '../models/index';
import {
    CreateReviewDtoFromJSON,
    CreateReviewDtoToJSON,
    ReviewGeoJSONFeatureCollectionFromJSON,
    ReviewGeoJSONFeatureCollectionToJSON,
} from '../models/index';

export interface ReviewControllerCreateRequest {
    createReviewDto: CreateReviewDto;
}

export interface ReviewControllerFindAllGeoJSONRequest {
    groupBy: ReviewControllerFindAllGeoJSONGroupByEnum;
    reviewType?: string;
}

/**
 * ReviewsApi - interface
 * 
 * @export
 * @interface ReviewsApiInterface
 */
export interface ReviewsApiInterface {
    /**
     * 
     * @summary Create a new review
     * @param {CreateReviewDto} createReviewDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReviewsApiInterface
     */
    reviewControllerCreateRaw(requestParameters: ReviewControllerCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Create a new review
     */
    reviewControllerCreate(requestParameters: ReviewControllerCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary Get all the review to be displayed on the map
     * @param {'countries' | 'cities'} groupBy How to group the data
     * @param {string} [reviewType] The review type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReviewsApiInterface
     */
    reviewControllerFindAllGeoJSONRaw(requestParameters: ReviewControllerFindAllGeoJSONRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReviewGeoJSONFeatureCollection>>;

    /**
     * Get all the review to be displayed on the map
     */
    reviewControllerFindAllGeoJSON(requestParameters: ReviewControllerFindAllGeoJSONRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReviewGeoJSONFeatureCollection>;

}

/**
 * 
 */
export class ReviewsApi extends runtime.BaseAPI implements ReviewsApiInterface {

    /**
     * Create a new review
     */
    async reviewControllerCreateRaw(requestParameters: ReviewControllerCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['createReviewDto'] == null) {
            throw new runtime.RequiredError(
                'createReviewDto',
                'Required parameter "createReviewDto" was null or undefined when calling reviewControllerCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/reviews`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateReviewDtoToJSON(requestParameters['createReviewDto']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Create a new review
     */
    async reviewControllerCreate(requestParameters: ReviewControllerCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.reviewControllerCreateRaw(requestParameters, initOverrides);
    }

    /**
     * Get all the review to be displayed on the map
     */
    async reviewControllerFindAllGeoJSONRaw(requestParameters: ReviewControllerFindAllGeoJSONRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReviewGeoJSONFeatureCollection>> {
        if (requestParameters['groupBy'] == null) {
            throw new runtime.RequiredError(
                'groupBy',
                'Required parameter "groupBy" was null or undefined when calling reviewControllerFindAllGeoJSON().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['groupBy'] != null) {
            queryParameters['groupBy'] = requestParameters['groupBy'];
        }

        if (requestParameters['reviewType'] != null) {
            queryParameters['reviewType'] = requestParameters['reviewType'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/reviews/geoJSON`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReviewGeoJSONFeatureCollectionFromJSON(jsonValue));
    }

    /**
     * Get all the review to be displayed on the map
     */
    async reviewControllerFindAllGeoJSON(requestParameters: ReviewControllerFindAllGeoJSONRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReviewGeoJSONFeatureCollection> {
        const response = await this.reviewControllerFindAllGeoJSONRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const ReviewControllerFindAllGeoJSONGroupByEnum = {
    Countries: 'countries',
    Cities: 'cities'
} as const;
export type ReviewControllerFindAllGeoJSONGroupByEnum = typeof ReviewControllerFindAllGeoJSONGroupByEnum[keyof typeof ReviewControllerFindAllGeoJSONGroupByEnum];
