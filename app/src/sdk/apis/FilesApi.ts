/* tslint:disable */
/* eslint-disable */
/**
 * API
 * API description
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  UploadExtractionDto,
} from '../models/index';
import {
    UploadExtractionDtoFromJSON,
    UploadExtractionDtoToJSON,
} from '../models/index';

export interface FileUploadControllerCreateRequest {
    uploadExtractionDto: UploadExtractionDto;
}

/**
 * FilesApi - interface
 * 
 * @export
 * @interface FilesApiInterface
 */
export interface FilesApiInterface {
    /**
     * 
     * @summary Upload a file
     * @param {UploadExtractionDto} uploadExtractionDto Data to upload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilesApiInterface
     */
    fileUploadControllerCreateRaw(requestParameters: FileUploadControllerCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>>;

    /**
     * Upload a file
     */
    fileUploadControllerCreate(requestParameters: FileUploadControllerCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string>;

}

/**
 * 
 */
export class FilesApi extends runtime.BaseAPI implements FilesApiInterface {

    /**
     * Upload a file
     */
    async fileUploadControllerCreateRaw(requestParameters: FileUploadControllerCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters['uploadExtractionDto'] == null) {
            throw new runtime.RequiredError(
                'uploadExtractionDto',
                'Required parameter "uploadExtractionDto" was null or undefined when calling fileUploadControllerCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/files`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UploadExtractionDtoToJSON(requestParameters['uploadExtractionDto']),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Upload a file
     */
    async fileUploadControllerCreate(requestParameters: FileUploadControllerCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.fileUploadControllerCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
