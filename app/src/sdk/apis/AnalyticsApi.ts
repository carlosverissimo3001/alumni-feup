/* tslint:disable */
/* eslint-disable */
/**
 * API
 * API description
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CityListResponseDto,
  CityOptionDto,
  CompanyInsightsDto,
  CompanyListResponseDto,
  CompanyOptionDto,
  CountryListResponseDto,
  CountryOptionDto,
  IndustryListResponseDto,
  IndustryOptionDto,
  RoleListResponseDto,
  RoleOptionDto,
} from '../models/index';
import {
    CityListResponseDtoFromJSON,
    CityListResponseDtoToJSON,
    CityOptionDtoFromJSON,
    CityOptionDtoToJSON,
    CompanyInsightsDtoFromJSON,
    CompanyInsightsDtoToJSON,
    CompanyListResponseDtoFromJSON,
    CompanyListResponseDtoToJSON,
    CompanyOptionDtoFromJSON,
    CompanyOptionDtoToJSON,
    CountryListResponseDtoFromJSON,
    CountryListResponseDtoToJSON,
    CountryOptionDtoFromJSON,
    CountryOptionDtoToJSON,
    IndustryListResponseDtoFromJSON,
    IndustryListResponseDtoToJSON,
    IndustryOptionDtoFromJSON,
    IndustryOptionDtoToJSON,
    RoleListResponseDtoFromJSON,
    RoleListResponseDtoToJSON,
    RoleOptionDtoFromJSON,
    RoleOptionDtoToJSON,
} from '../models/index';

export interface CompanyAnalyticsControllerGetCompaniesWithAlumniCountRequest {
    includeTrend: boolean;
    startDate?: string;
    endDate?: string;
    courseIds?: Array<string>;
    graduationYears?: Array<string>;
    companyIds?: Array<string>;
    industryIds?: Array<string>;
    roleCountryCodes?: Array<string>;
    roleCityIds?: Array<string>;
    companyHQsCountryCodes?: Array<string>;
    companyHQsCityIds?: Array<string>;
    currentRolesOnly?: boolean;
    onlyInternational?: boolean;
    excludeResearchAndHighEducation?: boolean;
    companySearch?: string;
    industrySearch?: string;
    companySize?: Array<CompanyAnalyticsControllerGetCompaniesWithAlumniCountCompanySizeEnum>;
    companyType?: Array<CompanyAnalyticsControllerGetCompaniesWithAlumniCountCompanyTypeEnum>;
    escoCodes?: Array<string>;
    classificationLevel?: number;
    limit?: number;
    offset?: number;
    search?: string;
    sortBy?: string;
    sortOrder?: string;
}

export interface CompanyAnalyticsControllerGetCompanyDetailsRequest {
    id: string;
}

export interface CompanyAnalyticsControllerGetHotCompaniesRequest {
    includeTrend: boolean;
    startDate?: string;
    endDate?: string;
    courseIds?: Array<string>;
    graduationYears?: Array<string>;
    companyIds?: Array<string>;
    industryIds?: Array<string>;
    roleCountryCodes?: Array<string>;
    roleCityIds?: Array<string>;
    companyHQsCountryCodes?: Array<string>;
    companyHQsCityIds?: Array<string>;
    currentRolesOnly?: boolean;
    onlyInternational?: boolean;
    excludeResearchAndHighEducation?: boolean;
    companySearch?: string;
    industrySearch?: string;
    companySize?: Array<CompanyAnalyticsControllerGetHotCompaniesCompanySizeEnum>;
    companyType?: Array<CompanyAnalyticsControllerGetHotCompaniesCompanyTypeEnum>;
    escoCodes?: Array<string>;
    classificationLevel?: number;
    limit?: number;
    offset?: number;
    search?: string;
    sortBy?: string;
    sortOrder?: string;
}

export interface GeoAnalyticsControllerGetCitiesOptionsRequest {
    countryCodes?: Array<string>;
}

export interface GeoAnalyticsControllerGetCitiesWithAlumniCountRequest {
    includeTrend: boolean;
    startDate?: string;
    endDate?: string;
    courseIds?: Array<string>;
    graduationYears?: Array<string>;
    companyIds?: Array<string>;
    industryIds?: Array<string>;
    roleCountryCodes?: Array<string>;
    roleCityIds?: Array<string>;
    companyHQsCountryCodes?: Array<string>;
    companyHQsCityIds?: Array<string>;
    currentRolesOnly?: boolean;
    onlyInternational?: boolean;
    excludeResearchAndHighEducation?: boolean;
    companySearch?: string;
    industrySearch?: string;
    companySize?: Array<GeoAnalyticsControllerGetCitiesWithAlumniCountCompanySizeEnum>;
    companyType?: Array<GeoAnalyticsControllerGetCitiesWithAlumniCountCompanyTypeEnum>;
    escoCodes?: Array<string>;
    classificationLevel?: number;
    limit?: number;
    offset?: number;
    search?: string;
    sortBy?: string;
    sortOrder?: string;
}

export interface GeoAnalyticsControllerGetCountriesWithAlumniCountRequest {
    includeTrend: boolean;
    startDate?: string;
    endDate?: string;
    courseIds?: Array<string>;
    graduationYears?: Array<string>;
    companyIds?: Array<string>;
    industryIds?: Array<string>;
    roleCountryCodes?: Array<string>;
    roleCityIds?: Array<string>;
    companyHQsCountryCodes?: Array<string>;
    companyHQsCityIds?: Array<string>;
    currentRolesOnly?: boolean;
    onlyInternational?: boolean;
    excludeResearchAndHighEducation?: boolean;
    companySearch?: string;
    industrySearch?: string;
    companySize?: Array<GeoAnalyticsControllerGetCountriesWithAlumniCountCompanySizeEnum>;
    companyType?: Array<GeoAnalyticsControllerGetCountriesWithAlumniCountCompanyTypeEnum>;
    escoCodes?: Array<string>;
    classificationLevel?: number;
    limit?: number;
    offset?: number;
    search?: string;
    sortBy?: string;
    sortOrder?: string;
}

export interface IndustryAnalyticsControllerGetIndustryWithCountsRequest {
    includeTrend: boolean;
    startDate?: string;
    endDate?: string;
    courseIds?: Array<string>;
    graduationYears?: Array<string>;
    companyIds?: Array<string>;
    industryIds?: Array<string>;
    roleCountryCodes?: Array<string>;
    roleCityIds?: Array<string>;
    companyHQsCountryCodes?: Array<string>;
    companyHQsCityIds?: Array<string>;
    currentRolesOnly?: boolean;
    onlyInternational?: boolean;
    excludeResearchAndHighEducation?: boolean;
    companySearch?: string;
    industrySearch?: string;
    companySize?: Array<IndustryAnalyticsControllerGetIndustryWithCountsCompanySizeEnum>;
    companyType?: Array<IndustryAnalyticsControllerGetIndustryWithCountsCompanyTypeEnum>;
    escoCodes?: Array<string>;
    classificationLevel?: number;
    limit?: number;
    offset?: number;
    search?: string;
    sortBy?: string;
    sortOrder?: string;
}

export interface RoleAnalyticsControllerGetRolesRequest {
    includeTrend: boolean;
    startDate?: string;
    endDate?: string;
    courseIds?: Array<string>;
    graduationYears?: Array<string>;
    companyIds?: Array<string>;
    industryIds?: Array<string>;
    roleCountryCodes?: Array<string>;
    roleCityIds?: Array<string>;
    companyHQsCountryCodes?: Array<string>;
    companyHQsCityIds?: Array<string>;
    currentRolesOnly?: boolean;
    onlyInternational?: boolean;
    excludeResearchAndHighEducation?: boolean;
    companySearch?: string;
    industrySearch?: string;
    companySize?: Array<RoleAnalyticsControllerGetRolesCompanySizeEnum>;
    companyType?: Array<RoleAnalyticsControllerGetRolesCompanyTypeEnum>;
    escoCodes?: Array<string>;
    classificationLevel?: number;
    limit?: number;
    offset?: number;
    search?: string;
    sortBy?: string;
    sortOrder?: string;
}

/**
 * AnalyticsApi - interface
 * 
 * @export
 * @interface AnalyticsApiInterface
 */
export interface AnalyticsApiInterface {
    /**
     * 
     * @summary Get the companies, and the number of alumni working in them.
     * @param {boolean} includeTrend Whether to include the trend data
     * @param {string} [startDate] The start date of the role
     * @param {string} [endDate] The end date of the role
     * @param {Array<string>} [courseIds] The course IDs to filter by
     * @param {Array<string>} [graduationYears] The graduation years to filter by
     * @param {Array<string>} [companyIds] The company IDs to filter by
     * @param {Array<string>} [industryIds] The industry IDs to filter by
     * @param {Array<string>} [roleCountryCodes] The country codes where alumni exerced their roles
     * @param {Array<string>} [roleCityIds] The city IDS where alumni exerced their roles
     * @param {Array<string>} [companyHQsCountryCodes] The company HQs country codes to filter by
     * @param {Array<string>} [companyHQsCityIds] The company HQs city ids to filter by
     * @param {boolean} [currentRolesOnly] Filter for current roles only
     * @param {boolean} [onlyInternational] Whether to exclude roles in Portugal
     * @param {boolean} [excludeResearchAndHighEducation] Exclude research and high education roles
     * @param {string} [companySearch] Search query for companies
     * @param {string} [industrySearch] Search query for industries
     * @param {Array<'A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I'>} [companySize] The company sizes to filter by
     * @param {Array<'EDUCATIONAL' | 'GOVERNMENT_AGENCY' | 'NON_PROFIT' | 'PARTNERSHIP' | 'PRIVATELY_HELD' | 'PUBLIC_COMPANY' | 'SELF_EMPLOYED' | 'SELF_OWNED'>} [companyType] The company types to filter by
     * @param {Array<string>} [escoCodes] The ESCO codes to filter by
     * @param {number} [classificationLevel] The classification level to filter by
     * @param {number} [limit] The number of results to return
     * @param {number} [offset] The offset of the query
     * @param {string} [search] Broad search query
     * @param {string} [sortBy] How to sort the results
     * @param {string} [sortOrder] The order of the results
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnalyticsApiInterface
     */
    companyAnalyticsControllerGetCompaniesWithAlumniCountRaw(requestParameters: CompanyAnalyticsControllerGetCompaniesWithAlumniCountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CompanyListResponseDto>>;

    /**
     * Get the companies, and the number of alumni working in them.
     */
    companyAnalyticsControllerGetCompaniesWithAlumniCount(requestParameters: CompanyAnalyticsControllerGetCompaniesWithAlumniCountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CompanyListResponseDto>;

    /**
     * 
     * @summary Returns detailed information about a specific company.
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnalyticsApiInterface
     */
    companyAnalyticsControllerGetCompanyDetailsRaw(requestParameters: CompanyAnalyticsControllerGetCompanyDetailsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CompanyInsightsDto>>;

    /**
     * Returns detailed information about a specific company.
     */
    companyAnalyticsControllerGetCompanyDetails(requestParameters: CompanyAnalyticsControllerGetCompanyDetailsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CompanyInsightsDto>;

    /**
     * 
     * @summary Returns company employment growth over time.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnalyticsApiInterface
     */
    companyAnalyticsControllerGetCompanyGrowthRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Returns company employment growth over time.
     */
    companyAnalyticsControllerGetCompanyGrowth(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary List of possible companies to search for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnalyticsApiInterface
     */
    companyAnalyticsControllerGetCompanyOptionsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<CompanyOptionDto>>>;

    /**
     * List of possible companies to search for.
     */
    companyAnalyticsControllerGetCompanyOptions(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<CompanyOptionDto>>;

    /**
     * 
     * @summary Returns companies that have seen a spike in alumni employment.
     * @param {boolean} includeTrend Whether to include the trend data
     * @param {string} [startDate] The start date of the role
     * @param {string} [endDate] The end date of the role
     * @param {Array<string>} [courseIds] The course IDs to filter by
     * @param {Array<string>} [graduationYears] The graduation years to filter by
     * @param {Array<string>} [companyIds] The company IDs to filter by
     * @param {Array<string>} [industryIds] The industry IDs to filter by
     * @param {Array<string>} [roleCountryCodes] The country codes where alumni exerced their roles
     * @param {Array<string>} [roleCityIds] The city IDS where alumni exerced their roles
     * @param {Array<string>} [companyHQsCountryCodes] The company HQs country codes to filter by
     * @param {Array<string>} [companyHQsCityIds] The company HQs city ids to filter by
     * @param {boolean} [currentRolesOnly] Filter for current roles only
     * @param {boolean} [onlyInternational] Whether to exclude roles in Portugal
     * @param {boolean} [excludeResearchAndHighEducation] Exclude research and high education roles
     * @param {string} [companySearch] Search query for companies
     * @param {string} [industrySearch] Search query for industries
     * @param {Array<'A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I'>} [companySize] The company sizes to filter by
     * @param {Array<'EDUCATIONAL' | 'GOVERNMENT_AGENCY' | 'NON_PROFIT' | 'PARTNERSHIP' | 'PRIVATELY_HELD' | 'PUBLIC_COMPANY' | 'SELF_EMPLOYED' | 'SELF_OWNED'>} [companyType] The company types to filter by
     * @param {Array<string>} [escoCodes] The ESCO codes to filter by
     * @param {number} [classificationLevel] The classification level to filter by
     * @param {number} [limit] The number of results to return
     * @param {number} [offset] The offset of the query
     * @param {string} [search] Broad search query
     * @param {string} [sortBy] How to sort the results
     * @param {string} [sortOrder] The order of the results
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnalyticsApiInterface
     */
    companyAnalyticsControllerGetHotCompaniesRaw(requestParameters: CompanyAnalyticsControllerGetHotCompaniesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Returns companies that have seen a spike in alumni employment.
     */
    companyAnalyticsControllerGetHotCompanies(requestParameters: CompanyAnalyticsControllerGetHotCompaniesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary Get the cities options.
     * @param {Array<string>} [countryCodes] The country codes  to filter by
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnalyticsApiInterface
     */
    geoAnalyticsControllerGetCitiesOptionsRaw(requestParameters: GeoAnalyticsControllerGetCitiesOptionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<CityOptionDto>>>;

    /**
     * Get the cities options.
     */
    geoAnalyticsControllerGetCitiesOptions(requestParameters: GeoAnalyticsControllerGetCitiesOptionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<CityOptionDto>>;

    /**
     * 
     * @summary Get the cities, and the number of alumni working in them.
     * @param {boolean} includeTrend Whether to include the trend data
     * @param {string} [startDate] The start date of the role
     * @param {string} [endDate] The end date of the role
     * @param {Array<string>} [courseIds] The course IDs to filter by
     * @param {Array<string>} [graduationYears] The graduation years to filter by
     * @param {Array<string>} [companyIds] The company IDs to filter by
     * @param {Array<string>} [industryIds] The industry IDs to filter by
     * @param {Array<string>} [roleCountryCodes] The country codes where alumni exerced their roles
     * @param {Array<string>} [roleCityIds] The city IDS where alumni exerced their roles
     * @param {Array<string>} [companyHQsCountryCodes] The company HQs country codes to filter by
     * @param {Array<string>} [companyHQsCityIds] The company HQs city ids to filter by
     * @param {boolean} [currentRolesOnly] Filter for current roles only
     * @param {boolean} [onlyInternational] Whether to exclude roles in Portugal
     * @param {boolean} [excludeResearchAndHighEducation] Exclude research and high education roles
     * @param {string} [companySearch] Search query for companies
     * @param {string} [industrySearch] Search query for industries
     * @param {Array<'A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I'>} [companySize] The company sizes to filter by
     * @param {Array<'EDUCATIONAL' | 'GOVERNMENT_AGENCY' | 'NON_PROFIT' | 'PARTNERSHIP' | 'PRIVATELY_HELD' | 'PUBLIC_COMPANY' | 'SELF_EMPLOYED' | 'SELF_OWNED'>} [companyType] The company types to filter by
     * @param {Array<string>} [escoCodes] The ESCO codes to filter by
     * @param {number} [classificationLevel] The classification level to filter by
     * @param {number} [limit] The number of results to return
     * @param {number} [offset] The offset of the query
     * @param {string} [search] Broad search query
     * @param {string} [sortBy] How to sort the results
     * @param {string} [sortOrder] The order of the results
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnalyticsApiInterface
     */
    geoAnalyticsControllerGetCitiesWithAlumniCountRaw(requestParameters: GeoAnalyticsControllerGetCitiesWithAlumniCountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CityListResponseDto>>;

    /**
     * Get the cities, and the number of alumni working in them.
     */
    geoAnalyticsControllerGetCitiesWithAlumniCount(requestParameters: GeoAnalyticsControllerGetCitiesWithAlumniCountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CityListResponseDto>;

    /**
     * 
     * @summary Get the countries options.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnalyticsApiInterface
     */
    geoAnalyticsControllerGetCountriesOptionsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<CountryOptionDto>>>;

    /**
     * Get the countries options.
     */
    geoAnalyticsControllerGetCountriesOptions(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<CountryOptionDto>>;

    /**
     * 
     * @summary Get the countries, and the number of alumni working in them.
     * @param {boolean} includeTrend Whether to include the trend data
     * @param {string} [startDate] The start date of the role
     * @param {string} [endDate] The end date of the role
     * @param {Array<string>} [courseIds] The course IDs to filter by
     * @param {Array<string>} [graduationYears] The graduation years to filter by
     * @param {Array<string>} [companyIds] The company IDs to filter by
     * @param {Array<string>} [industryIds] The industry IDs to filter by
     * @param {Array<string>} [roleCountryCodes] The country codes where alumni exerced their roles
     * @param {Array<string>} [roleCityIds] The city IDS where alumni exerced their roles
     * @param {Array<string>} [companyHQsCountryCodes] The company HQs country codes to filter by
     * @param {Array<string>} [companyHQsCityIds] The company HQs city ids to filter by
     * @param {boolean} [currentRolesOnly] Filter for current roles only
     * @param {boolean} [onlyInternational] Whether to exclude roles in Portugal
     * @param {boolean} [excludeResearchAndHighEducation] Exclude research and high education roles
     * @param {string} [companySearch] Search query for companies
     * @param {string} [industrySearch] Search query for industries
     * @param {Array<'A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I'>} [companySize] The company sizes to filter by
     * @param {Array<'EDUCATIONAL' | 'GOVERNMENT_AGENCY' | 'NON_PROFIT' | 'PARTNERSHIP' | 'PRIVATELY_HELD' | 'PUBLIC_COMPANY' | 'SELF_EMPLOYED' | 'SELF_OWNED'>} [companyType] The company types to filter by
     * @param {Array<string>} [escoCodes] The ESCO codes to filter by
     * @param {number} [classificationLevel] The classification level to filter by
     * @param {number} [limit] The number of results to return
     * @param {number} [offset] The offset of the query
     * @param {string} [search] Broad search query
     * @param {string} [sortBy] How to sort the results
     * @param {string} [sortOrder] The order of the results
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnalyticsApiInterface
     */
    geoAnalyticsControllerGetCountriesWithAlumniCountRaw(requestParameters: GeoAnalyticsControllerGetCountriesWithAlumniCountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CountryListResponseDto>>;

    /**
     * Get the countries, and the number of alumni working in them.
     */
    geoAnalyticsControllerGetCountriesWithAlumniCount(requestParameters: GeoAnalyticsControllerGetCountriesWithAlumniCountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CountryListResponseDto>;

    /**
     * Returns a list of industries with their id and name.
     * @summary List of possible industries to search for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnalyticsApiInterface
     */
    industryAnalyticsControllerGetIndustryOptionsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<IndustryOptionDto>>>;

    /**
     * Returns a list of industries with their id and name.
     * List of possible industries to search for.
     */
    industryAnalyticsControllerGetIndustryOptions(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<IndustryOptionDto>>;

    /**
     * 
     * @summary Returns the number of alumni working in companies grouped by industry.
     * @param {boolean} includeTrend Whether to include the trend data
     * @param {string} [startDate] The start date of the role
     * @param {string} [endDate] The end date of the role
     * @param {Array<string>} [courseIds] The course IDs to filter by
     * @param {Array<string>} [graduationYears] The graduation years to filter by
     * @param {Array<string>} [companyIds] The company IDs to filter by
     * @param {Array<string>} [industryIds] The industry IDs to filter by
     * @param {Array<string>} [roleCountryCodes] The country codes where alumni exerced their roles
     * @param {Array<string>} [roleCityIds] The city IDS where alumni exerced their roles
     * @param {Array<string>} [companyHQsCountryCodes] The company HQs country codes to filter by
     * @param {Array<string>} [companyHQsCityIds] The company HQs city ids to filter by
     * @param {boolean} [currentRolesOnly] Filter for current roles only
     * @param {boolean} [onlyInternational] Whether to exclude roles in Portugal
     * @param {boolean} [excludeResearchAndHighEducation] Exclude research and high education roles
     * @param {string} [companySearch] Search query for companies
     * @param {string} [industrySearch] Search query for industries
     * @param {Array<'A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I'>} [companySize] The company sizes to filter by
     * @param {Array<'EDUCATIONAL' | 'GOVERNMENT_AGENCY' | 'NON_PROFIT' | 'PARTNERSHIP' | 'PRIVATELY_HELD' | 'PUBLIC_COMPANY' | 'SELF_EMPLOYED' | 'SELF_OWNED'>} [companyType] The company types to filter by
     * @param {Array<string>} [escoCodes] The ESCO codes to filter by
     * @param {number} [classificationLevel] The classification level to filter by
     * @param {number} [limit] The number of results to return
     * @param {number} [offset] The offset of the query
     * @param {string} [search] Broad search query
     * @param {string} [sortBy] How to sort the results
     * @param {string} [sortOrder] The order of the results
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnalyticsApiInterface
     */
    industryAnalyticsControllerGetIndustryWithCountsRaw(requestParameters: IndustryAnalyticsControllerGetIndustryWithCountsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IndustryListResponseDto>>;

    /**
     * Returns the number of alumni working in companies grouped by industry.
     */
    industryAnalyticsControllerGetIndustryWithCounts(requestParameters: IndustryAnalyticsControllerGetIndustryWithCountsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IndustryListResponseDto>;

    /**
     * Returns a list of roles with their ESCO code and title.
     * @summary List of possible role titles to search for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnalyticsApiInterface
     */
    roleAnalyticsControllerGetRoleOptionsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<RoleOptionDto>>>;

    /**
     * Returns a list of roles with their ESCO code and title.
     * List of possible role titles to search for.
     */
    roleAnalyticsControllerGetRoleOptions(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<RoleOptionDto>>;

    /**
     * 
     * @summary Returns the number of roles classified with each ESCO classification
     * @param {boolean} includeTrend Whether to include the trend data
     * @param {string} [startDate] The start date of the role
     * @param {string} [endDate] The end date of the role
     * @param {Array<string>} [courseIds] The course IDs to filter by
     * @param {Array<string>} [graduationYears] The graduation years to filter by
     * @param {Array<string>} [companyIds] The company IDs to filter by
     * @param {Array<string>} [industryIds] The industry IDs to filter by
     * @param {Array<string>} [roleCountryCodes] The country codes where alumni exerced their roles
     * @param {Array<string>} [roleCityIds] The city IDS where alumni exerced their roles
     * @param {Array<string>} [companyHQsCountryCodes] The company HQs country codes to filter by
     * @param {Array<string>} [companyHQsCityIds] The company HQs city ids to filter by
     * @param {boolean} [currentRolesOnly] Filter for current roles only
     * @param {boolean} [onlyInternational] Whether to exclude roles in Portugal
     * @param {boolean} [excludeResearchAndHighEducation] Exclude research and high education roles
     * @param {string} [companySearch] Search query for companies
     * @param {string} [industrySearch] Search query for industries
     * @param {Array<'A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I'>} [companySize] The company sizes to filter by
     * @param {Array<'EDUCATIONAL' | 'GOVERNMENT_AGENCY' | 'NON_PROFIT' | 'PARTNERSHIP' | 'PRIVATELY_HELD' | 'PUBLIC_COMPANY' | 'SELF_EMPLOYED' | 'SELF_OWNED'>} [companyType] The company types to filter by
     * @param {Array<string>} [escoCodes] The ESCO codes to filter by
     * @param {number} [classificationLevel] The classification level to filter by
     * @param {number} [limit] The number of results to return
     * @param {number} [offset] The offset of the query
     * @param {string} [search] Broad search query
     * @param {string} [sortBy] How to sort the results
     * @param {string} [sortOrder] The order of the results
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnalyticsApiInterface
     */
    roleAnalyticsControllerGetRolesRaw(requestParameters: RoleAnalyticsControllerGetRolesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RoleListResponseDto>>;

    /**
     * Returns the number of roles classified with each ESCO classification
     */
    roleAnalyticsControllerGetRoles(requestParameters: RoleAnalyticsControllerGetRolesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RoleListResponseDto>;

}

/**
 * 
 */
export class AnalyticsApi extends runtime.BaseAPI implements AnalyticsApiInterface {

    /**
     * Get the companies, and the number of alumni working in them.
     */
    async companyAnalyticsControllerGetCompaniesWithAlumniCountRaw(requestParameters: CompanyAnalyticsControllerGetCompaniesWithAlumniCountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CompanyListResponseDto>> {
        if (requestParameters['includeTrend'] == null) {
            throw new runtime.RequiredError(
                'includeTrend',
                'Required parameter "includeTrend" was null or undefined when calling companyAnalyticsControllerGetCompaniesWithAlumniCount().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['startDate'] != null) {
            queryParameters['startDate'] = requestParameters['startDate'];
        }

        if (requestParameters['endDate'] != null) {
            queryParameters['endDate'] = requestParameters['endDate'];
        }

        if (requestParameters['courseIds'] != null) {
            queryParameters['courseIds'] = requestParameters['courseIds'];
        }

        if (requestParameters['graduationYears'] != null) {
            queryParameters['graduationYears'] = requestParameters['graduationYears'];
        }

        if (requestParameters['companyIds'] != null) {
            queryParameters['companyIds'] = requestParameters['companyIds'];
        }

        if (requestParameters['industryIds'] != null) {
            queryParameters['industryIds'] = requestParameters['industryIds'];
        }

        if (requestParameters['roleCountryCodes'] != null) {
            queryParameters['roleCountryCodes'] = requestParameters['roleCountryCodes'];
        }

        if (requestParameters['roleCityIds'] != null) {
            queryParameters['roleCityIds'] = requestParameters['roleCityIds'];
        }

        if (requestParameters['companyHQsCountryCodes'] != null) {
            queryParameters['companyHQsCountryCodes'] = requestParameters['companyHQsCountryCodes'];
        }

        if (requestParameters['companyHQsCityIds'] != null) {
            queryParameters['companyHQsCityIds'] = requestParameters['companyHQsCityIds'];
        }

        if (requestParameters['currentRolesOnly'] != null) {
            queryParameters['currentRolesOnly'] = requestParameters['currentRolesOnly'];
        }

        if (requestParameters['onlyInternational'] != null) {
            queryParameters['onlyInternational'] = requestParameters['onlyInternational'];
        }

        if (requestParameters['excludeResearchAndHighEducation'] != null) {
            queryParameters['excludeResearchAndHighEducation'] = requestParameters['excludeResearchAndHighEducation'];
        }

        if (requestParameters['companySearch'] != null) {
            queryParameters['companySearch'] = requestParameters['companySearch'];
        }

        if (requestParameters['industrySearch'] != null) {
            queryParameters['industrySearch'] = requestParameters['industrySearch'];
        }

        if (requestParameters['companySize'] != null) {
            queryParameters['companySize'] = requestParameters['companySize'];
        }

        if (requestParameters['companyType'] != null) {
            queryParameters['companyType'] = requestParameters['companyType'];
        }

        if (requestParameters['escoCodes'] != null) {
            queryParameters['escoCodes'] = requestParameters['escoCodes'];
        }

        if (requestParameters['classificationLevel'] != null) {
            queryParameters['classificationLevel'] = requestParameters['classificationLevel'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['search'] != null) {
            queryParameters['search'] = requestParameters['search'];
        }

        if (requestParameters['sortBy'] != null) {
            queryParameters['sortBy'] = requestParameters['sortBy'];
        }

        if (requestParameters['sortOrder'] != null) {
            queryParameters['sortOrder'] = requestParameters['sortOrder'];
        }

        if (requestParameters['includeTrend'] != null) {
            queryParameters['includeTrend'] = requestParameters['includeTrend'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/analytics/companies`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CompanyListResponseDtoFromJSON(jsonValue));
    }

    /**
     * Get the companies, and the number of alumni working in them.
     */
    async companyAnalyticsControllerGetCompaniesWithAlumniCount(requestParameters: CompanyAnalyticsControllerGetCompaniesWithAlumniCountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CompanyListResponseDto> {
        const response = await this.companyAnalyticsControllerGetCompaniesWithAlumniCountRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns detailed information about a specific company.
     */
    async companyAnalyticsControllerGetCompanyDetailsRaw(requestParameters: CompanyAnalyticsControllerGetCompanyDetailsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CompanyInsightsDto>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling companyAnalyticsControllerGetCompanyDetails().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/analytics/companies/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CompanyInsightsDtoFromJSON(jsonValue));
    }

    /**
     * Returns detailed information about a specific company.
     */
    async companyAnalyticsControllerGetCompanyDetails(requestParameters: CompanyAnalyticsControllerGetCompanyDetailsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CompanyInsightsDto> {
        const response = await this.companyAnalyticsControllerGetCompanyDetailsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns company employment growth over time.
     */
    async companyAnalyticsControllerGetCompanyGrowthRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/analytics/companies/growth`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Returns company employment growth over time.
     */
    async companyAnalyticsControllerGetCompanyGrowth(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.companyAnalyticsControllerGetCompanyGrowthRaw(initOverrides);
    }

    /**
     * List of possible companies to search for.
     */
    async companyAnalyticsControllerGetCompanyOptionsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<CompanyOptionDto>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/analytics/companies/options`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CompanyOptionDtoFromJSON));
    }

    /**
     * List of possible companies to search for.
     */
    async companyAnalyticsControllerGetCompanyOptions(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<CompanyOptionDto>> {
        const response = await this.companyAnalyticsControllerGetCompanyOptionsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Returns companies that have seen a spike in alumni employment.
     */
    async companyAnalyticsControllerGetHotCompaniesRaw(requestParameters: CompanyAnalyticsControllerGetHotCompaniesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['includeTrend'] == null) {
            throw new runtime.RequiredError(
                'includeTrend',
                'Required parameter "includeTrend" was null or undefined when calling companyAnalyticsControllerGetHotCompanies().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['startDate'] != null) {
            queryParameters['startDate'] = requestParameters['startDate'];
        }

        if (requestParameters['endDate'] != null) {
            queryParameters['endDate'] = requestParameters['endDate'];
        }

        if (requestParameters['courseIds'] != null) {
            queryParameters['courseIds'] = requestParameters['courseIds'];
        }

        if (requestParameters['graduationYears'] != null) {
            queryParameters['graduationYears'] = requestParameters['graduationYears'];
        }

        if (requestParameters['companyIds'] != null) {
            queryParameters['companyIds'] = requestParameters['companyIds'];
        }

        if (requestParameters['industryIds'] != null) {
            queryParameters['industryIds'] = requestParameters['industryIds'];
        }

        if (requestParameters['roleCountryCodes'] != null) {
            queryParameters['roleCountryCodes'] = requestParameters['roleCountryCodes'];
        }

        if (requestParameters['roleCityIds'] != null) {
            queryParameters['roleCityIds'] = requestParameters['roleCityIds'];
        }

        if (requestParameters['companyHQsCountryCodes'] != null) {
            queryParameters['companyHQsCountryCodes'] = requestParameters['companyHQsCountryCodes'];
        }

        if (requestParameters['companyHQsCityIds'] != null) {
            queryParameters['companyHQsCityIds'] = requestParameters['companyHQsCityIds'];
        }

        if (requestParameters['currentRolesOnly'] != null) {
            queryParameters['currentRolesOnly'] = requestParameters['currentRolesOnly'];
        }

        if (requestParameters['onlyInternational'] != null) {
            queryParameters['onlyInternational'] = requestParameters['onlyInternational'];
        }

        if (requestParameters['excludeResearchAndHighEducation'] != null) {
            queryParameters['excludeResearchAndHighEducation'] = requestParameters['excludeResearchAndHighEducation'];
        }

        if (requestParameters['companySearch'] != null) {
            queryParameters['companySearch'] = requestParameters['companySearch'];
        }

        if (requestParameters['industrySearch'] != null) {
            queryParameters['industrySearch'] = requestParameters['industrySearch'];
        }

        if (requestParameters['companySize'] != null) {
            queryParameters['companySize'] = requestParameters['companySize'];
        }

        if (requestParameters['companyType'] != null) {
            queryParameters['companyType'] = requestParameters['companyType'];
        }

        if (requestParameters['escoCodes'] != null) {
            queryParameters['escoCodes'] = requestParameters['escoCodes'];
        }

        if (requestParameters['classificationLevel'] != null) {
            queryParameters['classificationLevel'] = requestParameters['classificationLevel'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['search'] != null) {
            queryParameters['search'] = requestParameters['search'];
        }

        if (requestParameters['sortBy'] != null) {
            queryParameters['sortBy'] = requestParameters['sortBy'];
        }

        if (requestParameters['sortOrder'] != null) {
            queryParameters['sortOrder'] = requestParameters['sortOrder'];
        }

        if (requestParameters['includeTrend'] != null) {
            queryParameters['includeTrend'] = requestParameters['includeTrend'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/analytics/companies/hot-companies`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Returns companies that have seen a spike in alumni employment.
     */
    async companyAnalyticsControllerGetHotCompanies(requestParameters: CompanyAnalyticsControllerGetHotCompaniesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.companyAnalyticsControllerGetHotCompaniesRaw(requestParameters, initOverrides);
    }

    /**
     * Get the cities options.
     */
    async geoAnalyticsControllerGetCitiesOptionsRaw(requestParameters: GeoAnalyticsControllerGetCitiesOptionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<CityOptionDto>>> {
        const queryParameters: any = {};

        if (requestParameters['countryCodes'] != null) {
            queryParameters['countryCodes'] = requestParameters['countryCodes'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/analytics/geo/city-options`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CityOptionDtoFromJSON));
    }

    /**
     * Get the cities options.
     */
    async geoAnalyticsControllerGetCitiesOptions(requestParameters: GeoAnalyticsControllerGetCitiesOptionsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<CityOptionDto>> {
        const response = await this.geoAnalyticsControllerGetCitiesOptionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get the cities, and the number of alumni working in them.
     */
    async geoAnalyticsControllerGetCitiesWithAlumniCountRaw(requestParameters: GeoAnalyticsControllerGetCitiesWithAlumniCountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CityListResponseDto>> {
        if (requestParameters['includeTrend'] == null) {
            throw new runtime.RequiredError(
                'includeTrend',
                'Required parameter "includeTrend" was null or undefined when calling geoAnalyticsControllerGetCitiesWithAlumniCount().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['startDate'] != null) {
            queryParameters['startDate'] = requestParameters['startDate'];
        }

        if (requestParameters['endDate'] != null) {
            queryParameters['endDate'] = requestParameters['endDate'];
        }

        if (requestParameters['courseIds'] != null) {
            queryParameters['courseIds'] = requestParameters['courseIds'];
        }

        if (requestParameters['graduationYears'] != null) {
            queryParameters['graduationYears'] = requestParameters['graduationYears'];
        }

        if (requestParameters['companyIds'] != null) {
            queryParameters['companyIds'] = requestParameters['companyIds'];
        }

        if (requestParameters['industryIds'] != null) {
            queryParameters['industryIds'] = requestParameters['industryIds'];
        }

        if (requestParameters['roleCountryCodes'] != null) {
            queryParameters['roleCountryCodes'] = requestParameters['roleCountryCodes'];
        }

        if (requestParameters['roleCityIds'] != null) {
            queryParameters['roleCityIds'] = requestParameters['roleCityIds'];
        }

        if (requestParameters['companyHQsCountryCodes'] != null) {
            queryParameters['companyHQsCountryCodes'] = requestParameters['companyHQsCountryCodes'];
        }

        if (requestParameters['companyHQsCityIds'] != null) {
            queryParameters['companyHQsCityIds'] = requestParameters['companyHQsCityIds'];
        }

        if (requestParameters['currentRolesOnly'] != null) {
            queryParameters['currentRolesOnly'] = requestParameters['currentRolesOnly'];
        }

        if (requestParameters['onlyInternational'] != null) {
            queryParameters['onlyInternational'] = requestParameters['onlyInternational'];
        }

        if (requestParameters['excludeResearchAndHighEducation'] != null) {
            queryParameters['excludeResearchAndHighEducation'] = requestParameters['excludeResearchAndHighEducation'];
        }

        if (requestParameters['companySearch'] != null) {
            queryParameters['companySearch'] = requestParameters['companySearch'];
        }

        if (requestParameters['industrySearch'] != null) {
            queryParameters['industrySearch'] = requestParameters['industrySearch'];
        }

        if (requestParameters['companySize'] != null) {
            queryParameters['companySize'] = requestParameters['companySize'];
        }

        if (requestParameters['companyType'] != null) {
            queryParameters['companyType'] = requestParameters['companyType'];
        }

        if (requestParameters['escoCodes'] != null) {
            queryParameters['escoCodes'] = requestParameters['escoCodes'];
        }

        if (requestParameters['classificationLevel'] != null) {
            queryParameters['classificationLevel'] = requestParameters['classificationLevel'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['search'] != null) {
            queryParameters['search'] = requestParameters['search'];
        }

        if (requestParameters['sortBy'] != null) {
            queryParameters['sortBy'] = requestParameters['sortBy'];
        }

        if (requestParameters['sortOrder'] != null) {
            queryParameters['sortOrder'] = requestParameters['sortOrder'];
        }

        if (requestParameters['includeTrend'] != null) {
            queryParameters['includeTrend'] = requestParameters['includeTrend'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/analytics/geo/cities`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CityListResponseDtoFromJSON(jsonValue));
    }

    /**
     * Get the cities, and the number of alumni working in them.
     */
    async geoAnalyticsControllerGetCitiesWithAlumniCount(requestParameters: GeoAnalyticsControllerGetCitiesWithAlumniCountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CityListResponseDto> {
        const response = await this.geoAnalyticsControllerGetCitiesWithAlumniCountRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get the countries options.
     */
    async geoAnalyticsControllerGetCountriesOptionsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<CountryOptionDto>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/analytics/geo/country-options`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CountryOptionDtoFromJSON));
    }

    /**
     * Get the countries options.
     */
    async geoAnalyticsControllerGetCountriesOptions(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<CountryOptionDto>> {
        const response = await this.geoAnalyticsControllerGetCountriesOptionsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get the countries, and the number of alumni working in them.
     */
    async geoAnalyticsControllerGetCountriesWithAlumniCountRaw(requestParameters: GeoAnalyticsControllerGetCountriesWithAlumniCountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CountryListResponseDto>> {
        if (requestParameters['includeTrend'] == null) {
            throw new runtime.RequiredError(
                'includeTrend',
                'Required parameter "includeTrend" was null or undefined when calling geoAnalyticsControllerGetCountriesWithAlumniCount().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['startDate'] != null) {
            queryParameters['startDate'] = requestParameters['startDate'];
        }

        if (requestParameters['endDate'] != null) {
            queryParameters['endDate'] = requestParameters['endDate'];
        }

        if (requestParameters['courseIds'] != null) {
            queryParameters['courseIds'] = requestParameters['courseIds'];
        }

        if (requestParameters['graduationYears'] != null) {
            queryParameters['graduationYears'] = requestParameters['graduationYears'];
        }

        if (requestParameters['companyIds'] != null) {
            queryParameters['companyIds'] = requestParameters['companyIds'];
        }

        if (requestParameters['industryIds'] != null) {
            queryParameters['industryIds'] = requestParameters['industryIds'];
        }

        if (requestParameters['roleCountryCodes'] != null) {
            queryParameters['roleCountryCodes'] = requestParameters['roleCountryCodes'];
        }

        if (requestParameters['roleCityIds'] != null) {
            queryParameters['roleCityIds'] = requestParameters['roleCityIds'];
        }

        if (requestParameters['companyHQsCountryCodes'] != null) {
            queryParameters['companyHQsCountryCodes'] = requestParameters['companyHQsCountryCodes'];
        }

        if (requestParameters['companyHQsCityIds'] != null) {
            queryParameters['companyHQsCityIds'] = requestParameters['companyHQsCityIds'];
        }

        if (requestParameters['currentRolesOnly'] != null) {
            queryParameters['currentRolesOnly'] = requestParameters['currentRolesOnly'];
        }

        if (requestParameters['onlyInternational'] != null) {
            queryParameters['onlyInternational'] = requestParameters['onlyInternational'];
        }

        if (requestParameters['excludeResearchAndHighEducation'] != null) {
            queryParameters['excludeResearchAndHighEducation'] = requestParameters['excludeResearchAndHighEducation'];
        }

        if (requestParameters['companySearch'] != null) {
            queryParameters['companySearch'] = requestParameters['companySearch'];
        }

        if (requestParameters['industrySearch'] != null) {
            queryParameters['industrySearch'] = requestParameters['industrySearch'];
        }

        if (requestParameters['companySize'] != null) {
            queryParameters['companySize'] = requestParameters['companySize'];
        }

        if (requestParameters['companyType'] != null) {
            queryParameters['companyType'] = requestParameters['companyType'];
        }

        if (requestParameters['escoCodes'] != null) {
            queryParameters['escoCodes'] = requestParameters['escoCodes'];
        }

        if (requestParameters['classificationLevel'] != null) {
            queryParameters['classificationLevel'] = requestParameters['classificationLevel'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['search'] != null) {
            queryParameters['search'] = requestParameters['search'];
        }

        if (requestParameters['sortBy'] != null) {
            queryParameters['sortBy'] = requestParameters['sortBy'];
        }

        if (requestParameters['sortOrder'] != null) {
            queryParameters['sortOrder'] = requestParameters['sortOrder'];
        }

        if (requestParameters['includeTrend'] != null) {
            queryParameters['includeTrend'] = requestParameters['includeTrend'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/analytics/geo/countries`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CountryListResponseDtoFromJSON(jsonValue));
    }

    /**
     * Get the countries, and the number of alumni working in them.
     */
    async geoAnalyticsControllerGetCountriesWithAlumniCount(requestParameters: GeoAnalyticsControllerGetCountriesWithAlumniCountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CountryListResponseDto> {
        const response = await this.geoAnalyticsControllerGetCountriesWithAlumniCountRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a list of industries with their id and name.
     * List of possible industries to search for.
     */
    async industryAnalyticsControllerGetIndustryOptionsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<IndustryOptionDto>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/analytics/industries/options`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(IndustryOptionDtoFromJSON));
    }

    /**
     * Returns a list of industries with their id and name.
     * List of possible industries to search for.
     */
    async industryAnalyticsControllerGetIndustryOptions(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<IndustryOptionDto>> {
        const response = await this.industryAnalyticsControllerGetIndustryOptionsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Returns the number of alumni working in companies grouped by industry.
     */
    async industryAnalyticsControllerGetIndustryWithCountsRaw(requestParameters: IndustryAnalyticsControllerGetIndustryWithCountsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IndustryListResponseDto>> {
        if (requestParameters['includeTrend'] == null) {
            throw new runtime.RequiredError(
                'includeTrend',
                'Required parameter "includeTrend" was null or undefined when calling industryAnalyticsControllerGetIndustryWithCounts().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['startDate'] != null) {
            queryParameters['startDate'] = requestParameters['startDate'];
        }

        if (requestParameters['endDate'] != null) {
            queryParameters['endDate'] = requestParameters['endDate'];
        }

        if (requestParameters['courseIds'] != null) {
            queryParameters['courseIds'] = requestParameters['courseIds'];
        }

        if (requestParameters['graduationYears'] != null) {
            queryParameters['graduationYears'] = requestParameters['graduationYears'];
        }

        if (requestParameters['companyIds'] != null) {
            queryParameters['companyIds'] = requestParameters['companyIds'];
        }

        if (requestParameters['industryIds'] != null) {
            queryParameters['industryIds'] = requestParameters['industryIds'];
        }

        if (requestParameters['roleCountryCodes'] != null) {
            queryParameters['roleCountryCodes'] = requestParameters['roleCountryCodes'];
        }

        if (requestParameters['roleCityIds'] != null) {
            queryParameters['roleCityIds'] = requestParameters['roleCityIds'];
        }

        if (requestParameters['companyHQsCountryCodes'] != null) {
            queryParameters['companyHQsCountryCodes'] = requestParameters['companyHQsCountryCodes'];
        }

        if (requestParameters['companyHQsCityIds'] != null) {
            queryParameters['companyHQsCityIds'] = requestParameters['companyHQsCityIds'];
        }

        if (requestParameters['currentRolesOnly'] != null) {
            queryParameters['currentRolesOnly'] = requestParameters['currentRolesOnly'];
        }

        if (requestParameters['onlyInternational'] != null) {
            queryParameters['onlyInternational'] = requestParameters['onlyInternational'];
        }

        if (requestParameters['excludeResearchAndHighEducation'] != null) {
            queryParameters['excludeResearchAndHighEducation'] = requestParameters['excludeResearchAndHighEducation'];
        }

        if (requestParameters['companySearch'] != null) {
            queryParameters['companySearch'] = requestParameters['companySearch'];
        }

        if (requestParameters['industrySearch'] != null) {
            queryParameters['industrySearch'] = requestParameters['industrySearch'];
        }

        if (requestParameters['companySize'] != null) {
            queryParameters['companySize'] = requestParameters['companySize'];
        }

        if (requestParameters['companyType'] != null) {
            queryParameters['companyType'] = requestParameters['companyType'];
        }

        if (requestParameters['escoCodes'] != null) {
            queryParameters['escoCodes'] = requestParameters['escoCodes'];
        }

        if (requestParameters['classificationLevel'] != null) {
            queryParameters['classificationLevel'] = requestParameters['classificationLevel'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['search'] != null) {
            queryParameters['search'] = requestParameters['search'];
        }

        if (requestParameters['sortBy'] != null) {
            queryParameters['sortBy'] = requestParameters['sortBy'];
        }

        if (requestParameters['sortOrder'] != null) {
            queryParameters['sortOrder'] = requestParameters['sortOrder'];
        }

        if (requestParameters['includeTrend'] != null) {
            queryParameters['includeTrend'] = requestParameters['includeTrend'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/analytics/industries`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IndustryListResponseDtoFromJSON(jsonValue));
    }

    /**
     * Returns the number of alumni working in companies grouped by industry.
     */
    async industryAnalyticsControllerGetIndustryWithCounts(requestParameters: IndustryAnalyticsControllerGetIndustryWithCountsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IndustryListResponseDto> {
        const response = await this.industryAnalyticsControllerGetIndustryWithCountsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a list of roles with their ESCO code and title.
     * List of possible role titles to search for.
     */
    async roleAnalyticsControllerGetRoleOptionsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<RoleOptionDto>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/analytics/roles/options`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(RoleOptionDtoFromJSON));
    }

    /**
     * Returns a list of roles with their ESCO code and title.
     * List of possible role titles to search for.
     */
    async roleAnalyticsControllerGetRoleOptions(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<RoleOptionDto>> {
        const response = await this.roleAnalyticsControllerGetRoleOptionsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Returns the number of roles classified with each ESCO classification
     */
    async roleAnalyticsControllerGetRolesRaw(requestParameters: RoleAnalyticsControllerGetRolesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RoleListResponseDto>> {
        if (requestParameters['includeTrend'] == null) {
            throw new runtime.RequiredError(
                'includeTrend',
                'Required parameter "includeTrend" was null or undefined when calling roleAnalyticsControllerGetRoles().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['startDate'] != null) {
            queryParameters['startDate'] = requestParameters['startDate'];
        }

        if (requestParameters['endDate'] != null) {
            queryParameters['endDate'] = requestParameters['endDate'];
        }

        if (requestParameters['courseIds'] != null) {
            queryParameters['courseIds'] = requestParameters['courseIds'];
        }

        if (requestParameters['graduationYears'] != null) {
            queryParameters['graduationYears'] = requestParameters['graduationYears'];
        }

        if (requestParameters['companyIds'] != null) {
            queryParameters['companyIds'] = requestParameters['companyIds'];
        }

        if (requestParameters['industryIds'] != null) {
            queryParameters['industryIds'] = requestParameters['industryIds'];
        }

        if (requestParameters['roleCountryCodes'] != null) {
            queryParameters['roleCountryCodes'] = requestParameters['roleCountryCodes'];
        }

        if (requestParameters['roleCityIds'] != null) {
            queryParameters['roleCityIds'] = requestParameters['roleCityIds'];
        }

        if (requestParameters['companyHQsCountryCodes'] != null) {
            queryParameters['companyHQsCountryCodes'] = requestParameters['companyHQsCountryCodes'];
        }

        if (requestParameters['companyHQsCityIds'] != null) {
            queryParameters['companyHQsCityIds'] = requestParameters['companyHQsCityIds'];
        }

        if (requestParameters['currentRolesOnly'] != null) {
            queryParameters['currentRolesOnly'] = requestParameters['currentRolesOnly'];
        }

        if (requestParameters['onlyInternational'] != null) {
            queryParameters['onlyInternational'] = requestParameters['onlyInternational'];
        }

        if (requestParameters['excludeResearchAndHighEducation'] != null) {
            queryParameters['excludeResearchAndHighEducation'] = requestParameters['excludeResearchAndHighEducation'];
        }

        if (requestParameters['companySearch'] != null) {
            queryParameters['companySearch'] = requestParameters['companySearch'];
        }

        if (requestParameters['industrySearch'] != null) {
            queryParameters['industrySearch'] = requestParameters['industrySearch'];
        }

        if (requestParameters['companySize'] != null) {
            queryParameters['companySize'] = requestParameters['companySize'];
        }

        if (requestParameters['companyType'] != null) {
            queryParameters['companyType'] = requestParameters['companyType'];
        }

        if (requestParameters['escoCodes'] != null) {
            queryParameters['escoCodes'] = requestParameters['escoCodes'];
        }

        if (requestParameters['classificationLevel'] != null) {
            queryParameters['classificationLevel'] = requestParameters['classificationLevel'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['search'] != null) {
            queryParameters['search'] = requestParameters['search'];
        }

        if (requestParameters['sortBy'] != null) {
            queryParameters['sortBy'] = requestParameters['sortBy'];
        }

        if (requestParameters['sortOrder'] != null) {
            queryParameters['sortOrder'] = requestParameters['sortOrder'];
        }

        if (requestParameters['includeTrend'] != null) {
            queryParameters['includeTrend'] = requestParameters['includeTrend'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/analytics/roles`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RoleListResponseDtoFromJSON(jsonValue));
    }

    /**
     * Returns the number of roles classified with each ESCO classification
     */
    async roleAnalyticsControllerGetRoles(requestParameters: RoleAnalyticsControllerGetRolesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RoleListResponseDto> {
        const response = await this.roleAnalyticsControllerGetRolesRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const CompanyAnalyticsControllerGetCompaniesWithAlumniCountCompanySizeEnum = {
    A: 'A',
    B: 'B',
    C: 'C',
    D: 'D',
    E: 'E',
    F: 'F',
    G: 'G',
    H: 'H',
    I: 'I'
} as const;
export type CompanyAnalyticsControllerGetCompaniesWithAlumniCountCompanySizeEnum = typeof CompanyAnalyticsControllerGetCompaniesWithAlumniCountCompanySizeEnum[keyof typeof CompanyAnalyticsControllerGetCompaniesWithAlumniCountCompanySizeEnum];
/**
 * @export
 */
export const CompanyAnalyticsControllerGetCompaniesWithAlumniCountCompanyTypeEnum = {
    Educational: 'EDUCATIONAL',
    GovernmentAgency: 'GOVERNMENT_AGENCY',
    NonProfit: 'NON_PROFIT',
    Partnership: 'PARTNERSHIP',
    PrivatelyHeld: 'PRIVATELY_HELD',
    PublicCompany: 'PUBLIC_COMPANY',
    SelfEmployed: 'SELF_EMPLOYED',
    SelfOwned: 'SELF_OWNED'
} as const;
export type CompanyAnalyticsControllerGetCompaniesWithAlumniCountCompanyTypeEnum = typeof CompanyAnalyticsControllerGetCompaniesWithAlumniCountCompanyTypeEnum[keyof typeof CompanyAnalyticsControllerGetCompaniesWithAlumniCountCompanyTypeEnum];
/**
 * @export
 */
export const CompanyAnalyticsControllerGetHotCompaniesCompanySizeEnum = {
    A: 'A',
    B: 'B',
    C: 'C',
    D: 'D',
    E: 'E',
    F: 'F',
    G: 'G',
    H: 'H',
    I: 'I'
} as const;
export type CompanyAnalyticsControllerGetHotCompaniesCompanySizeEnum = typeof CompanyAnalyticsControllerGetHotCompaniesCompanySizeEnum[keyof typeof CompanyAnalyticsControllerGetHotCompaniesCompanySizeEnum];
/**
 * @export
 */
export const CompanyAnalyticsControllerGetHotCompaniesCompanyTypeEnum = {
    Educational: 'EDUCATIONAL',
    GovernmentAgency: 'GOVERNMENT_AGENCY',
    NonProfit: 'NON_PROFIT',
    Partnership: 'PARTNERSHIP',
    PrivatelyHeld: 'PRIVATELY_HELD',
    PublicCompany: 'PUBLIC_COMPANY',
    SelfEmployed: 'SELF_EMPLOYED',
    SelfOwned: 'SELF_OWNED'
} as const;
export type CompanyAnalyticsControllerGetHotCompaniesCompanyTypeEnum = typeof CompanyAnalyticsControllerGetHotCompaniesCompanyTypeEnum[keyof typeof CompanyAnalyticsControllerGetHotCompaniesCompanyTypeEnum];
/**
 * @export
 */
export const GeoAnalyticsControllerGetCitiesWithAlumniCountCompanySizeEnum = {
    A: 'A',
    B: 'B',
    C: 'C',
    D: 'D',
    E: 'E',
    F: 'F',
    G: 'G',
    H: 'H',
    I: 'I'
} as const;
export type GeoAnalyticsControllerGetCitiesWithAlumniCountCompanySizeEnum = typeof GeoAnalyticsControllerGetCitiesWithAlumniCountCompanySizeEnum[keyof typeof GeoAnalyticsControllerGetCitiesWithAlumniCountCompanySizeEnum];
/**
 * @export
 */
export const GeoAnalyticsControllerGetCitiesWithAlumniCountCompanyTypeEnum = {
    Educational: 'EDUCATIONAL',
    GovernmentAgency: 'GOVERNMENT_AGENCY',
    NonProfit: 'NON_PROFIT',
    Partnership: 'PARTNERSHIP',
    PrivatelyHeld: 'PRIVATELY_HELD',
    PublicCompany: 'PUBLIC_COMPANY',
    SelfEmployed: 'SELF_EMPLOYED',
    SelfOwned: 'SELF_OWNED'
} as const;
export type GeoAnalyticsControllerGetCitiesWithAlumniCountCompanyTypeEnum = typeof GeoAnalyticsControllerGetCitiesWithAlumniCountCompanyTypeEnum[keyof typeof GeoAnalyticsControllerGetCitiesWithAlumniCountCompanyTypeEnum];
/**
 * @export
 */
export const GeoAnalyticsControllerGetCountriesWithAlumniCountCompanySizeEnum = {
    A: 'A',
    B: 'B',
    C: 'C',
    D: 'D',
    E: 'E',
    F: 'F',
    G: 'G',
    H: 'H',
    I: 'I'
} as const;
export type GeoAnalyticsControllerGetCountriesWithAlumniCountCompanySizeEnum = typeof GeoAnalyticsControllerGetCountriesWithAlumniCountCompanySizeEnum[keyof typeof GeoAnalyticsControllerGetCountriesWithAlumniCountCompanySizeEnum];
/**
 * @export
 */
export const GeoAnalyticsControllerGetCountriesWithAlumniCountCompanyTypeEnum = {
    Educational: 'EDUCATIONAL',
    GovernmentAgency: 'GOVERNMENT_AGENCY',
    NonProfit: 'NON_PROFIT',
    Partnership: 'PARTNERSHIP',
    PrivatelyHeld: 'PRIVATELY_HELD',
    PublicCompany: 'PUBLIC_COMPANY',
    SelfEmployed: 'SELF_EMPLOYED',
    SelfOwned: 'SELF_OWNED'
} as const;
export type GeoAnalyticsControllerGetCountriesWithAlumniCountCompanyTypeEnum = typeof GeoAnalyticsControllerGetCountriesWithAlumniCountCompanyTypeEnum[keyof typeof GeoAnalyticsControllerGetCountriesWithAlumniCountCompanyTypeEnum];
/**
 * @export
 */
export const IndustryAnalyticsControllerGetIndustryWithCountsCompanySizeEnum = {
    A: 'A',
    B: 'B',
    C: 'C',
    D: 'D',
    E: 'E',
    F: 'F',
    G: 'G',
    H: 'H',
    I: 'I'
} as const;
export type IndustryAnalyticsControllerGetIndustryWithCountsCompanySizeEnum = typeof IndustryAnalyticsControllerGetIndustryWithCountsCompanySizeEnum[keyof typeof IndustryAnalyticsControllerGetIndustryWithCountsCompanySizeEnum];
/**
 * @export
 */
export const IndustryAnalyticsControllerGetIndustryWithCountsCompanyTypeEnum = {
    Educational: 'EDUCATIONAL',
    GovernmentAgency: 'GOVERNMENT_AGENCY',
    NonProfit: 'NON_PROFIT',
    Partnership: 'PARTNERSHIP',
    PrivatelyHeld: 'PRIVATELY_HELD',
    PublicCompany: 'PUBLIC_COMPANY',
    SelfEmployed: 'SELF_EMPLOYED',
    SelfOwned: 'SELF_OWNED'
} as const;
export type IndustryAnalyticsControllerGetIndustryWithCountsCompanyTypeEnum = typeof IndustryAnalyticsControllerGetIndustryWithCountsCompanyTypeEnum[keyof typeof IndustryAnalyticsControllerGetIndustryWithCountsCompanyTypeEnum];
/**
 * @export
 */
export const RoleAnalyticsControllerGetRolesCompanySizeEnum = {
    A: 'A',
    B: 'B',
    C: 'C',
    D: 'D',
    E: 'E',
    F: 'F',
    G: 'G',
    H: 'H',
    I: 'I'
} as const;
export type RoleAnalyticsControllerGetRolesCompanySizeEnum = typeof RoleAnalyticsControllerGetRolesCompanySizeEnum[keyof typeof RoleAnalyticsControllerGetRolesCompanySizeEnum];
/**
 * @export
 */
export const RoleAnalyticsControllerGetRolesCompanyTypeEnum = {
    Educational: 'EDUCATIONAL',
    GovernmentAgency: 'GOVERNMENT_AGENCY',
    NonProfit: 'NON_PROFIT',
    Partnership: 'PARTNERSHIP',
    PrivatelyHeld: 'PRIVATELY_HELD',
    PublicCompany: 'PUBLIC_COMPANY',
    SelfEmployed: 'SELF_EMPLOYED',
    SelfOwned: 'SELF_OWNED'
} as const;
export type RoleAnalyticsControllerGetRolesCompanyTypeEnum = typeof RoleAnalyticsControllerGetRolesCompanyTypeEnum[keyof typeof RoleAnalyticsControllerGetRolesCompanyTypeEnum];
