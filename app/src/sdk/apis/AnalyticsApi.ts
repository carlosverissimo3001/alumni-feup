/* tslint:disable */
/* eslint-disable */
/**
 * API
 * API description
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CityOptionDto,
  CompanyListResponseDto,
  CompanyOptionDto,
  CountryListResponseDto,
  CountryOptionDto,
  IndustryListResponseDto,
} from '../models/index';
import {
    CityOptionDtoFromJSON,
    CityOptionDtoToJSON,
    CompanyListResponseDtoFromJSON,
    CompanyListResponseDtoToJSON,
    CompanyOptionDtoFromJSON,
    CompanyOptionDtoToJSON,
    CountryListResponseDtoFromJSON,
    CountryListResponseDtoToJSON,
    CountryOptionDtoFromJSON,
    CountryOptionDtoToJSON,
    IndustryListResponseDtoFromJSON,
    IndustryListResponseDtoToJSON,
} from '../models/index';

export interface CompaniesAnalyticsControllerGetCompaniesWithAlumniCountRequest {
    startDate?: string;
    endDate?: string;
    courseIds?: Array<string>;
    companyIds?: Array<string>;
    graduationYears?: Array<string>;
    industryIds?: Array<string>;
    countries?: Array<string>;
    cities?: Array<string>;
    currentRolesOnly?: boolean;
    onlyInternational?: boolean;
    excludeResearchAndHighEducation?: boolean;
    companySearch?: string;
    industrySearch?: string;
    limit?: number;
    offset?: number;
    search?: string;
    sortBy?: string;
    sortOrder?: string;
}

export interface CompaniesAnalyticsControllerGetCompanyDetailsRequest {
    id: string;
    startDate?: string;
    endDate?: string;
    courseIds?: Array<string>;
    companyIds?: Array<string>;
    graduationYears?: Array<string>;
    industryIds?: Array<string>;
    countries?: Array<string>;
    cities?: Array<string>;
    currentRolesOnly?: boolean;
    onlyInternational?: boolean;
    excludeResearchAndHighEducation?: boolean;
    companySearch?: string;
    industrySearch?: string;
    limit?: number;
    offset?: number;
    search?: string;
    sortBy?: string;
    sortOrder?: string;
}

export interface CompaniesAnalyticsControllerGetCompanyOptionsRequest {
    startDate?: string;
    endDate?: string;
    courseIds?: Array<string>;
    companyIds?: Array<string>;
    graduationYears?: Array<string>;
    industryIds?: Array<string>;
    countries?: Array<string>;
    cities?: Array<string>;
    currentRolesOnly?: boolean;
    onlyInternational?: boolean;
    excludeResearchAndHighEducation?: boolean;
    companySearch?: string;
    industrySearch?: string;
    limit?: number;
    offset?: number;
    search?: string;
    sortBy?: string;
    sortOrder?: string;
}

export interface CompaniesAnalyticsControllerGetIndustryWithCountsRequest {
    startDate?: string;
    endDate?: string;
    courseIds?: Array<string>;
    companyIds?: Array<string>;
    graduationYears?: Array<string>;
    industryIds?: Array<string>;
    countries?: Array<string>;
    cities?: Array<string>;
    currentRolesOnly?: boolean;
    onlyInternational?: boolean;
    excludeResearchAndHighEducation?: boolean;
    companySearch?: string;
    industrySearch?: string;
    limit?: number;
    offset?: number;
    search?: string;
    sortBy?: string;
    sortOrder?: string;
}

export interface CountriesAnalyticsControllerGetCitiesOptionsRequest {
    countryCodes?: Array<string>;
}

export interface CountriesAnalyticsControllerGetCountriesWithAlumniCountRequest {
    startDate?: string;
    endDate?: string;
    courseIds?: Array<string>;
    companyIds?: Array<string>;
    graduationYears?: Array<string>;
    industryIds?: Array<string>;
    countries?: Array<string>;
    cities?: Array<string>;
    currentRolesOnly?: boolean;
    onlyInternational?: boolean;
    excludeResearchAndHighEducation?: boolean;
    companySearch?: string;
    industrySearch?: string;
    limit?: number;
    offset?: number;
    search?: string;
    sortBy?: string;
    sortOrder?: string;
}

/**
 * AnalyticsApi - interface
 * 
 * @export
 * @interface AnalyticsApiInterface
 */
export interface AnalyticsApiInterface {
    /**
     * 
     * @summary Get the companies, and the number of alumni working in them.
     * @param {string} [startDate] The start date of the query
     * @param {string} [endDate] The end date of the query
     * @param {Array<string>} [courseIds] The course IDs to filter by
     * @param {Array<string>} [companyIds] The company IDs to filter by
     * @param {Array<string>} [graduationYears] The graduation years to filter by
     * @param {Array<string>} [industryIds] The industry IDs to filter by
     * @param {Array<string>} [countries] The countries to filter by
     * @param {Array<string>} [cities] The cities to filter by
     * @param {boolean} [currentRolesOnly] Filter for current roles only
     * @param {boolean} [onlyInternational] Whether to exclude roles in Portugal
     * @param {boolean} [excludeResearchAndHighEducation] Exclude research and high education roles
     * @param {string} [companySearch] Search query for companies
     * @param {string} [industrySearch] Search query for industries
     * @param {number} [limit] The number of results to return
     * @param {number} [offset] The offset of the query
     * @param {string} [search] Broad search query
     * @param {string} [sortBy] How to sort the results
     * @param {string} [sortOrder] The order of the results
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnalyticsApiInterface
     */
    companiesAnalyticsControllerGetCompaniesWithAlumniCountRaw(requestParameters: CompaniesAnalyticsControllerGetCompaniesWithAlumniCountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CompanyListResponseDto>>;

    /**
     * Get the companies, and the number of alumni working in them.
     */
    companiesAnalyticsControllerGetCompaniesWithAlumniCount(requestParameters: CompaniesAnalyticsControllerGetCompaniesWithAlumniCountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CompanyListResponseDto>;

    /**
     * 
     * @summary Returns detailed information about a specific company.
     * @param {string} id 
     * @param {string} [startDate] The start date of the query
     * @param {string} [endDate] The end date of the query
     * @param {Array<string>} [courseIds] The course IDs to filter by
     * @param {Array<string>} [companyIds] The company IDs to filter by
     * @param {Array<string>} [graduationYears] The graduation years to filter by
     * @param {Array<string>} [industryIds] The industry IDs to filter by
     * @param {Array<string>} [countries] The countries to filter by
     * @param {Array<string>} [cities] The cities to filter by
     * @param {boolean} [currentRolesOnly] Filter for current roles only
     * @param {boolean} [onlyInternational] Whether to exclude roles in Portugal
     * @param {boolean} [excludeResearchAndHighEducation] Exclude research and high education roles
     * @param {string} [companySearch] Search query for companies
     * @param {string} [industrySearch] Search query for industries
     * @param {number} [limit] The number of results to return
     * @param {number} [offset] The offset of the query
     * @param {string} [search] Broad search query
     * @param {string} [sortBy] How to sort the results
     * @param {string} [sortOrder] The order of the results
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnalyticsApiInterface
     */
    companiesAnalyticsControllerGetCompanyDetailsRaw(requestParameters: CompaniesAnalyticsControllerGetCompanyDetailsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Returns detailed information about a specific company.
     */
    companiesAnalyticsControllerGetCompanyDetails(requestParameters: CompaniesAnalyticsControllerGetCompanyDetailsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary Returns company employment growth over time.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnalyticsApiInterface
     */
    companiesAnalyticsControllerGetCompanyGrowthRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Returns company employment growth over time.
     */
    companiesAnalyticsControllerGetCompanyGrowth(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary Get the companies id and name after applying the filters.
     * @param {string} [startDate] The start date of the query
     * @param {string} [endDate] The end date of the query
     * @param {Array<string>} [courseIds] The course IDs to filter by
     * @param {Array<string>} [companyIds] The company IDs to filter by
     * @param {Array<string>} [graduationYears] The graduation years to filter by
     * @param {Array<string>} [industryIds] The industry IDs to filter by
     * @param {Array<string>} [countries] The countries to filter by
     * @param {Array<string>} [cities] The cities to filter by
     * @param {boolean} [currentRolesOnly] Filter for current roles only
     * @param {boolean} [onlyInternational] Whether to exclude roles in Portugal
     * @param {boolean} [excludeResearchAndHighEducation] Exclude research and high education roles
     * @param {string} [companySearch] Search query for companies
     * @param {string} [industrySearch] Search query for industries
     * @param {number} [limit] The number of results to return
     * @param {number} [offset] The offset of the query
     * @param {string} [search] Broad search query
     * @param {string} [sortBy] How to sort the results
     * @param {string} [sortOrder] The order of the results
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnalyticsApiInterface
     */
    companiesAnalyticsControllerGetCompanyOptionsRaw(requestParameters: CompaniesAnalyticsControllerGetCompanyOptionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<CompanyOptionDto>>>;

    /**
     * Get the companies id and name after applying the filters.
     */
    companiesAnalyticsControllerGetCompanyOptions(requestParameters: CompaniesAnalyticsControllerGetCompanyOptionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<CompanyOptionDto>>;

    /**
     * 
     * @summary Returns the number of alumni working in companies grouped by industry.
     * @param {string} [startDate] The start date of the query
     * @param {string} [endDate] The end date of the query
     * @param {Array<string>} [courseIds] The course IDs to filter by
     * @param {Array<string>} [companyIds] The company IDs to filter by
     * @param {Array<string>} [graduationYears] The graduation years to filter by
     * @param {Array<string>} [industryIds] The industry IDs to filter by
     * @param {Array<string>} [countries] The countries to filter by
     * @param {Array<string>} [cities] The cities to filter by
     * @param {boolean} [currentRolesOnly] Filter for current roles only
     * @param {boolean} [onlyInternational] Whether to exclude roles in Portugal
     * @param {boolean} [excludeResearchAndHighEducation] Exclude research and high education roles
     * @param {string} [companySearch] Search query for companies
     * @param {string} [industrySearch] Search query for industries
     * @param {number} [limit] The number of results to return
     * @param {number} [offset] The offset of the query
     * @param {string} [search] Broad search query
     * @param {string} [sortBy] How to sort the results
     * @param {string} [sortOrder] The order of the results
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnalyticsApiInterface
     */
    companiesAnalyticsControllerGetIndustryWithCountsRaw(requestParameters: CompaniesAnalyticsControllerGetIndustryWithCountsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IndustryListResponseDto>>;

    /**
     * Returns the number of alumni working in companies grouped by industry.
     */
    companiesAnalyticsControllerGetIndustryWithCounts(requestParameters: CompaniesAnalyticsControllerGetIndustryWithCountsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IndustryListResponseDto>;

    /**
     * 
     * @summary Get the cities options.
     * @param {Array<string>} [countryCodes] The country codes  to filter by
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnalyticsApiInterface
     */
    countriesAnalyticsControllerGetCitiesOptionsRaw(requestParameters: CountriesAnalyticsControllerGetCitiesOptionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<CityOptionDto>>>;

    /**
     * Get the cities options.
     */
    countriesAnalyticsControllerGetCitiesOptions(requestParameters: CountriesAnalyticsControllerGetCitiesOptionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<CityOptionDto>>;

    /**
     * 
     * @summary Get the countries options.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnalyticsApiInterface
     */
    countriesAnalyticsControllerGetCountriesOptionsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<CountryOptionDto>>>;

    /**
     * Get the countries options.
     */
    countriesAnalyticsControllerGetCountriesOptions(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<CountryOptionDto>>;

    /**
     * 
     * @summary Get the countries, and the number of alumni working in them.
     * @param {string} [startDate] The start date of the query
     * @param {string} [endDate] The end date of the query
     * @param {Array<string>} [courseIds] The course IDs to filter by
     * @param {Array<string>} [companyIds] The company IDs to filter by
     * @param {Array<string>} [graduationYears] The graduation years to filter by
     * @param {Array<string>} [industryIds] The industry IDs to filter by
     * @param {Array<string>} [countries] The countries to filter by
     * @param {Array<string>} [cities] The cities to filter by
     * @param {boolean} [currentRolesOnly] Filter for current roles only
     * @param {boolean} [onlyInternational] Whether to exclude roles in Portugal
     * @param {boolean} [excludeResearchAndHighEducation] Exclude research and high education roles
     * @param {string} [companySearch] Search query for companies
     * @param {string} [industrySearch] Search query for industries
     * @param {number} [limit] The number of results to return
     * @param {number} [offset] The offset of the query
     * @param {string} [search] Broad search query
     * @param {string} [sortBy] How to sort the results
     * @param {string} [sortOrder] The order of the results
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnalyticsApiInterface
     */
    countriesAnalyticsControllerGetCountriesWithAlumniCountRaw(requestParameters: CountriesAnalyticsControllerGetCountriesWithAlumniCountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CountryListResponseDto>>;

    /**
     * Get the countries, and the number of alumni working in them.
     */
    countriesAnalyticsControllerGetCountriesWithAlumniCount(requestParameters: CountriesAnalyticsControllerGetCountriesWithAlumniCountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CountryListResponseDto>;

}

/**
 * 
 */
export class AnalyticsApi extends runtime.BaseAPI implements AnalyticsApiInterface {

    /**
     * Get the companies, and the number of alumni working in them.
     */
    async companiesAnalyticsControllerGetCompaniesWithAlumniCountRaw(requestParameters: CompaniesAnalyticsControllerGetCompaniesWithAlumniCountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CompanyListResponseDto>> {
        const queryParameters: any = {};

        if (requestParameters['startDate'] != null) {
            queryParameters['startDate'] = requestParameters['startDate'];
        }

        if (requestParameters['endDate'] != null) {
            queryParameters['endDate'] = requestParameters['endDate'];
        }

        if (requestParameters['courseIds'] != null) {
            queryParameters['courseIds'] = requestParameters['courseIds'];
        }

        if (requestParameters['companyIds'] != null) {
            queryParameters['companyIds'] = requestParameters['companyIds'];
        }

        if (requestParameters['graduationYears'] != null) {
            queryParameters['graduationYears'] = requestParameters['graduationYears'];
        }

        if (requestParameters['industryIds'] != null) {
            queryParameters['industryIds'] = requestParameters['industryIds'];
        }

        if (requestParameters['countries'] != null) {
            queryParameters['countries'] = requestParameters['countries'];
        }

        if (requestParameters['cities'] != null) {
            queryParameters['cities'] = requestParameters['cities'];
        }

        if (requestParameters['currentRolesOnly'] != null) {
            queryParameters['currentRolesOnly'] = requestParameters['currentRolesOnly'];
        }

        if (requestParameters['onlyInternational'] != null) {
            queryParameters['onlyInternational'] = requestParameters['onlyInternational'];
        }

        if (requestParameters['excludeResearchAndHighEducation'] != null) {
            queryParameters['excludeResearchAndHighEducation'] = requestParameters['excludeResearchAndHighEducation'];
        }

        if (requestParameters['companySearch'] != null) {
            queryParameters['companySearch'] = requestParameters['companySearch'];
        }

        if (requestParameters['industrySearch'] != null) {
            queryParameters['industrySearch'] = requestParameters['industrySearch'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['search'] != null) {
            queryParameters['search'] = requestParameters['search'];
        }

        if (requestParameters['sortBy'] != null) {
            queryParameters['sortBy'] = requestParameters['sortBy'];
        }

        if (requestParameters['sortOrder'] != null) {
            queryParameters['sortOrder'] = requestParameters['sortOrder'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/analytics/companies`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CompanyListResponseDtoFromJSON(jsonValue));
    }

    /**
     * Get the companies, and the number of alumni working in them.
     */
    async companiesAnalyticsControllerGetCompaniesWithAlumniCount(requestParameters: CompaniesAnalyticsControllerGetCompaniesWithAlumniCountRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CompanyListResponseDto> {
        const response = await this.companiesAnalyticsControllerGetCompaniesWithAlumniCountRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns detailed information about a specific company.
     */
    async companiesAnalyticsControllerGetCompanyDetailsRaw(requestParameters: CompaniesAnalyticsControllerGetCompanyDetailsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling companiesAnalyticsControllerGetCompanyDetails().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['startDate'] != null) {
            queryParameters['startDate'] = requestParameters['startDate'];
        }

        if (requestParameters['endDate'] != null) {
            queryParameters['endDate'] = requestParameters['endDate'];
        }

        if (requestParameters['courseIds'] != null) {
            queryParameters['courseIds'] = requestParameters['courseIds'];
        }

        if (requestParameters['companyIds'] != null) {
            queryParameters['companyIds'] = requestParameters['companyIds'];
        }

        if (requestParameters['graduationYears'] != null) {
            queryParameters['graduationYears'] = requestParameters['graduationYears'];
        }

        if (requestParameters['industryIds'] != null) {
            queryParameters['industryIds'] = requestParameters['industryIds'];
        }

        if (requestParameters['countries'] != null) {
            queryParameters['countries'] = requestParameters['countries'];
        }

        if (requestParameters['cities'] != null) {
            queryParameters['cities'] = requestParameters['cities'];
        }

        if (requestParameters['currentRolesOnly'] != null) {
            queryParameters['currentRolesOnly'] = requestParameters['currentRolesOnly'];
        }

        if (requestParameters['onlyInternational'] != null) {
            queryParameters['onlyInternational'] = requestParameters['onlyInternational'];
        }

        if (requestParameters['excludeResearchAndHighEducation'] != null) {
            queryParameters['excludeResearchAndHighEducation'] = requestParameters['excludeResearchAndHighEducation'];
        }

        if (requestParameters['companySearch'] != null) {
            queryParameters['companySearch'] = requestParameters['companySearch'];
        }

        if (requestParameters['industrySearch'] != null) {
            queryParameters['industrySearch'] = requestParameters['industrySearch'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['search'] != null) {
            queryParameters['search'] = requestParameters['search'];
        }

        if (requestParameters['sortBy'] != null) {
            queryParameters['sortBy'] = requestParameters['sortBy'];
        }

        if (requestParameters['sortOrder'] != null) {
            queryParameters['sortOrder'] = requestParameters['sortOrder'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/analytics/companies/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Returns detailed information about a specific company.
     */
    async companiesAnalyticsControllerGetCompanyDetails(requestParameters: CompaniesAnalyticsControllerGetCompanyDetailsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.companiesAnalyticsControllerGetCompanyDetailsRaw(requestParameters, initOverrides);
    }

    /**
     * Returns company employment growth over time.
     */
    async companiesAnalyticsControllerGetCompanyGrowthRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/analytics/companies/growth`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Returns company employment growth over time.
     */
    async companiesAnalyticsControllerGetCompanyGrowth(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.companiesAnalyticsControllerGetCompanyGrowthRaw(initOverrides);
    }

    /**
     * Get the companies id and name after applying the filters.
     */
    async companiesAnalyticsControllerGetCompanyOptionsRaw(requestParameters: CompaniesAnalyticsControllerGetCompanyOptionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<CompanyOptionDto>>> {
        const queryParameters: any = {};

        if (requestParameters['startDate'] != null) {
            queryParameters['startDate'] = requestParameters['startDate'];
        }

        if (requestParameters['endDate'] != null) {
            queryParameters['endDate'] = requestParameters['endDate'];
        }

        if (requestParameters['courseIds'] != null) {
            queryParameters['courseIds'] = requestParameters['courseIds'];
        }

        if (requestParameters['companyIds'] != null) {
            queryParameters['companyIds'] = requestParameters['companyIds'];
        }

        if (requestParameters['graduationYears'] != null) {
            queryParameters['graduationYears'] = requestParameters['graduationYears'];
        }

        if (requestParameters['industryIds'] != null) {
            queryParameters['industryIds'] = requestParameters['industryIds'];
        }

        if (requestParameters['countries'] != null) {
            queryParameters['countries'] = requestParameters['countries'];
        }

        if (requestParameters['cities'] != null) {
            queryParameters['cities'] = requestParameters['cities'];
        }

        if (requestParameters['currentRolesOnly'] != null) {
            queryParameters['currentRolesOnly'] = requestParameters['currentRolesOnly'];
        }

        if (requestParameters['onlyInternational'] != null) {
            queryParameters['onlyInternational'] = requestParameters['onlyInternational'];
        }

        if (requestParameters['excludeResearchAndHighEducation'] != null) {
            queryParameters['excludeResearchAndHighEducation'] = requestParameters['excludeResearchAndHighEducation'];
        }

        if (requestParameters['companySearch'] != null) {
            queryParameters['companySearch'] = requestParameters['companySearch'];
        }

        if (requestParameters['industrySearch'] != null) {
            queryParameters['industrySearch'] = requestParameters['industrySearch'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['search'] != null) {
            queryParameters['search'] = requestParameters['search'];
        }

        if (requestParameters['sortBy'] != null) {
            queryParameters['sortBy'] = requestParameters['sortBy'];
        }

        if (requestParameters['sortOrder'] != null) {
            queryParameters['sortOrder'] = requestParameters['sortOrder'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/analytics/companies/options`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CompanyOptionDtoFromJSON));
    }

    /**
     * Get the companies id and name after applying the filters.
     */
    async companiesAnalyticsControllerGetCompanyOptions(requestParameters: CompaniesAnalyticsControllerGetCompanyOptionsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<CompanyOptionDto>> {
        const response = await this.companiesAnalyticsControllerGetCompanyOptionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns the number of alumni working in companies grouped by industry.
     */
    async companiesAnalyticsControllerGetIndustryWithCountsRaw(requestParameters: CompaniesAnalyticsControllerGetIndustryWithCountsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IndustryListResponseDto>> {
        const queryParameters: any = {};

        if (requestParameters['startDate'] != null) {
            queryParameters['startDate'] = requestParameters['startDate'];
        }

        if (requestParameters['endDate'] != null) {
            queryParameters['endDate'] = requestParameters['endDate'];
        }

        if (requestParameters['courseIds'] != null) {
            queryParameters['courseIds'] = requestParameters['courseIds'];
        }

        if (requestParameters['companyIds'] != null) {
            queryParameters['companyIds'] = requestParameters['companyIds'];
        }

        if (requestParameters['graduationYears'] != null) {
            queryParameters['graduationYears'] = requestParameters['graduationYears'];
        }

        if (requestParameters['industryIds'] != null) {
            queryParameters['industryIds'] = requestParameters['industryIds'];
        }

        if (requestParameters['countries'] != null) {
            queryParameters['countries'] = requestParameters['countries'];
        }

        if (requestParameters['cities'] != null) {
            queryParameters['cities'] = requestParameters['cities'];
        }

        if (requestParameters['currentRolesOnly'] != null) {
            queryParameters['currentRolesOnly'] = requestParameters['currentRolesOnly'];
        }

        if (requestParameters['onlyInternational'] != null) {
            queryParameters['onlyInternational'] = requestParameters['onlyInternational'];
        }

        if (requestParameters['excludeResearchAndHighEducation'] != null) {
            queryParameters['excludeResearchAndHighEducation'] = requestParameters['excludeResearchAndHighEducation'];
        }

        if (requestParameters['companySearch'] != null) {
            queryParameters['companySearch'] = requestParameters['companySearch'];
        }

        if (requestParameters['industrySearch'] != null) {
            queryParameters['industrySearch'] = requestParameters['industrySearch'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['search'] != null) {
            queryParameters['search'] = requestParameters['search'];
        }

        if (requestParameters['sortBy'] != null) {
            queryParameters['sortBy'] = requestParameters['sortBy'];
        }

        if (requestParameters['sortOrder'] != null) {
            queryParameters['sortOrder'] = requestParameters['sortOrder'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/analytics/companies/by-industry`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IndustryListResponseDtoFromJSON(jsonValue));
    }

    /**
     * Returns the number of alumni working in companies grouped by industry.
     */
    async companiesAnalyticsControllerGetIndustryWithCounts(requestParameters: CompaniesAnalyticsControllerGetIndustryWithCountsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IndustryListResponseDto> {
        const response = await this.companiesAnalyticsControllerGetIndustryWithCountsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get the cities options.
     */
    async countriesAnalyticsControllerGetCitiesOptionsRaw(requestParameters: CountriesAnalyticsControllerGetCitiesOptionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<CityOptionDto>>> {
        const queryParameters: any = {};

        if (requestParameters['countryCodes'] != null) {
            queryParameters['countryCodes'] = requestParameters['countryCodes'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/analytics/countries/cities/options`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CityOptionDtoFromJSON));
    }

    /**
     * Get the cities options.
     */
    async countriesAnalyticsControllerGetCitiesOptions(requestParameters: CountriesAnalyticsControllerGetCitiesOptionsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<CityOptionDto>> {
        const response = await this.countriesAnalyticsControllerGetCitiesOptionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get the countries options.
     */
    async countriesAnalyticsControllerGetCountriesOptionsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<CountryOptionDto>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/analytics/countries/options`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CountryOptionDtoFromJSON));
    }

    /**
     * Get the countries options.
     */
    async countriesAnalyticsControllerGetCountriesOptions(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<CountryOptionDto>> {
        const response = await this.countriesAnalyticsControllerGetCountriesOptionsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get the countries, and the number of alumni working in them.
     */
    async countriesAnalyticsControllerGetCountriesWithAlumniCountRaw(requestParameters: CountriesAnalyticsControllerGetCountriesWithAlumniCountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CountryListResponseDto>> {
        const queryParameters: any = {};

        if (requestParameters['startDate'] != null) {
            queryParameters['startDate'] = requestParameters['startDate'];
        }

        if (requestParameters['endDate'] != null) {
            queryParameters['endDate'] = requestParameters['endDate'];
        }

        if (requestParameters['courseIds'] != null) {
            queryParameters['courseIds'] = requestParameters['courseIds'];
        }

        if (requestParameters['companyIds'] != null) {
            queryParameters['companyIds'] = requestParameters['companyIds'];
        }

        if (requestParameters['graduationYears'] != null) {
            queryParameters['graduationYears'] = requestParameters['graduationYears'];
        }

        if (requestParameters['industryIds'] != null) {
            queryParameters['industryIds'] = requestParameters['industryIds'];
        }

        if (requestParameters['countries'] != null) {
            queryParameters['countries'] = requestParameters['countries'];
        }

        if (requestParameters['cities'] != null) {
            queryParameters['cities'] = requestParameters['cities'];
        }

        if (requestParameters['currentRolesOnly'] != null) {
            queryParameters['currentRolesOnly'] = requestParameters['currentRolesOnly'];
        }

        if (requestParameters['onlyInternational'] != null) {
            queryParameters['onlyInternational'] = requestParameters['onlyInternational'];
        }

        if (requestParameters['excludeResearchAndHighEducation'] != null) {
            queryParameters['excludeResearchAndHighEducation'] = requestParameters['excludeResearchAndHighEducation'];
        }

        if (requestParameters['companySearch'] != null) {
            queryParameters['companySearch'] = requestParameters['companySearch'];
        }

        if (requestParameters['industrySearch'] != null) {
            queryParameters['industrySearch'] = requestParameters['industrySearch'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['search'] != null) {
            queryParameters['search'] = requestParameters['search'];
        }

        if (requestParameters['sortBy'] != null) {
            queryParameters['sortBy'] = requestParameters['sortBy'];
        }

        if (requestParameters['sortOrder'] != null) {
            queryParameters['sortOrder'] = requestParameters['sortOrder'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/analytics/countries`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CountryListResponseDtoFromJSON(jsonValue));
    }

    /**
     * Get the countries, and the number of alumni working in them.
     */
    async countriesAnalyticsControllerGetCountriesWithAlumniCount(requestParameters: CountriesAnalyticsControllerGetCountriesWithAlumniCountRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CountryListResponseDto> {
        const response = await this.countriesAnalyticsControllerGetCountriesWithAlumniCountRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
