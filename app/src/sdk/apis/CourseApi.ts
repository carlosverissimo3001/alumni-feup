/* tslint:disable */
/* eslint-disable */
/**
 * API
 * API description
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CourseExtended,
  CreateCourseDto,
} from '../models/index';
import {
    CourseExtendedFromJSON,
    CourseExtendedToJSON,
    CreateCourseDtoFromJSON,
    CreateCourseDtoToJSON,
} from '../models/index';

export interface CourseControllerCreateRequest {
    createCourseDto: CreateCourseDto;
}

export interface CourseControllerFindRequest {
    courseIds?: Array<string>;
    facultyIds?: Array<string>;
}

export interface CourseControllerFindOneRequest {
    id: string;
}

/**
 * CourseApi - interface
 * 
 * @export
 * @interface CourseApiInterface
 */
export interface CourseApiInterface {
    /**
     * 
     * @summary Create a course
     * @param {CreateCourseDto} createCourseDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourseApiInterface
     */
    courseControllerCreateRaw(requestParameters: CourseControllerCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CourseExtended>>;

    /**
     * Create a course
     */
    courseControllerCreate(requestParameters: CourseControllerCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CourseExtended>;

    /**
     * 
     * @summary Get courses
     * @param {Array<string>} [courseIds] The courses to filter by
     * @param {Array<string>} [facultyIds] The faculties to filter by
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourseApiInterface
     */
    courseControllerFindRaw(requestParameters: CourseControllerFindRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<CourseExtended>>>;

    /**
     * Get courses
     */
    courseControllerFind(requestParameters: CourseControllerFindRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<CourseExtended>>;

    /**
     * 
     * @summary Get a course by id
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourseApiInterface
     */
    courseControllerFindOneRaw(requestParameters: CourseControllerFindOneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CourseExtended>>;

    /**
     * Get a course by id
     */
    courseControllerFindOne(requestParameters: CourseControllerFindOneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CourseExtended>;

}

/**
 * 
 */
export class CourseApi extends runtime.BaseAPI implements CourseApiInterface {

    /**
     * Create a course
     */
    async courseControllerCreateRaw(requestParameters: CourseControllerCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CourseExtended>> {
        if (requestParameters['createCourseDto'] == null) {
            throw new runtime.RequiredError(
                'createCourseDto',
                'Required parameter "createCourseDto" was null or undefined when calling courseControllerCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/course`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateCourseDtoToJSON(requestParameters['createCourseDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CourseExtendedFromJSON(jsonValue));
    }

    /**
     * Create a course
     */
    async courseControllerCreate(requestParameters: CourseControllerCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CourseExtended> {
        const response = await this.courseControllerCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get courses
     */
    async courseControllerFindRaw(requestParameters: CourseControllerFindRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<CourseExtended>>> {
        const queryParameters: any = {};

        if (requestParameters['courseIds'] != null) {
            queryParameters['courseIds'] = requestParameters['courseIds'];
        }

        if (requestParameters['facultyIds'] != null) {
            queryParameters['facultyIds'] = requestParameters['facultyIds'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/course`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CourseExtendedFromJSON));
    }

    /**
     * Get courses
     */
    async courseControllerFind(requestParameters: CourseControllerFindRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<CourseExtended>> {
        const response = await this.courseControllerFindRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a course by id
     */
    async courseControllerFindOneRaw(requestParameters: CourseControllerFindOneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CourseExtended>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling courseControllerFindOne().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/course/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CourseExtendedFromJSON(jsonValue));
    }

    /**
     * Get a course by id
     */
    async courseControllerFindOne(requestParameters: CourseControllerFindOneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CourseExtended> {
        const response = await this.courseControllerFindOneRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
