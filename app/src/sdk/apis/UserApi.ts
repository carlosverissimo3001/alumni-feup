/* tslint:disable */
/* eslint-disable */
/**
 * API
 * API description
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CheckPermissionDto,
  LinkedinAuthDto,
  UserAuthResponse,
  VerifyEmailDto,
  VerifyEmailTokenDto,
} from '../models/index';
import {
    CheckPermissionDtoFromJSON,
    CheckPermissionDtoToJSON,
    LinkedinAuthDtoFromJSON,
    LinkedinAuthDtoToJSON,
    UserAuthResponseFromJSON,
    UserAuthResponseToJSON,
    VerifyEmailDtoFromJSON,
    VerifyEmailDtoToJSON,
    VerifyEmailTokenDtoFromJSON,
    VerifyEmailTokenDtoToJSON,
} from '../models/index';

export interface UserControllerCheckPermissionRequest {
    checkPermissionDto: CheckPermissionDto;
}

export interface UserControllerLinkedinAuthRequest {
    linkedinAuthDto: LinkedinAuthDto;
}

export interface UserControllerLinkedinConfirmRequest {
    linkedinAuthDto: LinkedinAuthDto;
}

export interface UserControllerVerifyEmailRequest {
    verifyEmailDto: VerifyEmailDto;
}

export interface UserControllerVerifyEmailTokenRequest {
    verifyEmailTokenDto: VerifyEmailTokenDto;
}

/**
 * UserApi - interface
 * 
 * @export
 * @interface UserApiInterface
 */
export interface UserApiInterface {
    /**
     * 
     * @summary Check if a user has a permission
     * @param {CheckPermissionDto} checkPermissionDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApiInterface
     */
    userControllerCheckPermissionRaw(requestParameters: UserControllerCheckPermissionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<boolean>>;

    /**
     * Check if a user has a permission
     */
    userControllerCheckPermission(requestParameters: UserControllerCheckPermissionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<boolean>;

    /**
     * 
     * @summary Authenticate a user with LinkedIn
     * @param {LinkedinAuthDto} linkedinAuthDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApiInterface
     */
    userControllerLinkedinAuthRaw(requestParameters: UserControllerLinkedinAuthRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserAuthResponse>>;

    /**
     * Authenticate a user with LinkedIn
     */
    userControllerLinkedinAuth(requestParameters: UserControllerLinkedinAuthRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserAuthResponse>;

    /**
     * 
     * @summary Confirm the LinkedIn profile and generate a JWT token
     * @param {LinkedinAuthDto} linkedinAuthDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApiInterface
     */
    userControllerLinkedinConfirmRaw(requestParameters: UserControllerLinkedinConfirmRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserAuthResponse>>;

    /**
     * Confirm the LinkedIn profile and generate a JWT token
     */
    userControllerLinkedinConfirm(requestParameters: UserControllerLinkedinConfirmRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserAuthResponse>;

    /**
     * 
     * @summary Verify the email of the alumni by generating a token and sending it to the email
     * @param {VerifyEmailDto} verifyEmailDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApiInterface
     */
    userControllerVerifyEmailRaw(requestParameters: UserControllerVerifyEmailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Verify the email of the alumni by generating a token and sending it to the email
     */
    userControllerVerifyEmail(requestParameters: UserControllerVerifyEmailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary Validate the token against the email
     * @param {VerifyEmailTokenDto} verifyEmailTokenDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApiInterface
     */
    userControllerVerifyEmailTokenRaw(requestParameters: UserControllerVerifyEmailTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Validate the token against the email
     */
    userControllerVerifyEmailToken(requestParameters: UserControllerVerifyEmailTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

}

/**
 * 
 */
export class UserApi extends runtime.BaseAPI implements UserApiInterface {

    /**
     * Check if a user has a permission
     */
    async userControllerCheckPermissionRaw(requestParameters: UserControllerCheckPermissionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<boolean>> {
        if (requestParameters['checkPermissionDto'] == null) {
            throw new runtime.RequiredError(
                'checkPermissionDto',
                'Required parameter "checkPermissionDto" was null or undefined when calling userControllerCheckPermission().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/user/check-permission`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CheckPermissionDtoToJSON(requestParameters['checkPermissionDto']),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<boolean>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Check if a user has a permission
     */
    async userControllerCheckPermission(requestParameters: UserControllerCheckPermissionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<boolean> {
        const response = await this.userControllerCheckPermissionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Authenticate a user with LinkedIn
     */
    async userControllerLinkedinAuthRaw(requestParameters: UserControllerLinkedinAuthRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserAuthResponse>> {
        if (requestParameters['linkedinAuthDto'] == null) {
            throw new runtime.RequiredError(
                'linkedinAuthDto',
                'Required parameter "linkedinAuthDto" was null or undefined when calling userControllerLinkedinAuth().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/user/linkedinAuth`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LinkedinAuthDtoToJSON(requestParameters['linkedinAuthDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserAuthResponseFromJSON(jsonValue));
    }

    /**
     * Authenticate a user with LinkedIn
     */
    async userControllerLinkedinAuth(requestParameters: UserControllerLinkedinAuthRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserAuthResponse> {
        const response = await this.userControllerLinkedinAuthRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Confirm the LinkedIn profile and generate a JWT token
     */
    async userControllerLinkedinConfirmRaw(requestParameters: UserControllerLinkedinConfirmRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserAuthResponse>> {
        if (requestParameters['linkedinAuthDto'] == null) {
            throw new runtime.RequiredError(
                'linkedinAuthDto',
                'Required parameter "linkedinAuthDto" was null or undefined when calling userControllerLinkedinConfirm().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/user/linkedin-confirm`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LinkedinAuthDtoToJSON(requestParameters['linkedinAuthDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserAuthResponseFromJSON(jsonValue));
    }

    /**
     * Confirm the LinkedIn profile and generate a JWT token
     */
    async userControllerLinkedinConfirm(requestParameters: UserControllerLinkedinConfirmRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserAuthResponse> {
        const response = await this.userControllerLinkedinConfirmRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Verify the email of the alumni by generating a token and sending it to the email
     */
    async userControllerVerifyEmailRaw(requestParameters: UserControllerVerifyEmailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['verifyEmailDto'] == null) {
            throw new runtime.RequiredError(
                'verifyEmailDto',
                'Required parameter "verifyEmailDto" was null or undefined when calling userControllerVerifyEmail().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/user/verify-email`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: VerifyEmailDtoToJSON(requestParameters['verifyEmailDto']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Verify the email of the alumni by generating a token and sending it to the email
     */
    async userControllerVerifyEmail(requestParameters: UserControllerVerifyEmailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.userControllerVerifyEmailRaw(requestParameters, initOverrides);
    }

    /**
     * Validate the token against the email
     */
    async userControllerVerifyEmailTokenRaw(requestParameters: UserControllerVerifyEmailTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['verifyEmailTokenDto'] == null) {
            throw new runtime.RequiredError(
                'verifyEmailTokenDto',
                'Required parameter "verifyEmailTokenDto" was null or undefined when calling userControllerVerifyEmailToken().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/user/verify-email/token`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: VerifyEmailTokenDtoToJSON(requestParameters['verifyEmailTokenDto']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Validate the token against the email
     */
    async userControllerVerifyEmailToken(requestParameters: UserControllerVerifyEmailTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.userControllerVerifyEmailTokenRaw(requestParameters, initOverrides);
    }

}
