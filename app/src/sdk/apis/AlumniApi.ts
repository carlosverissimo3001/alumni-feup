/* tslint:disable */
/* eslint-disable */
/**
 * API
 * API description
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Alumni,
  AlumniExtended,
  AlumniPastLocationsAndCompaniesDto,
  BasicAlumniProfileDto,
  CreateAlumniDto,
  GeoJSONFeatureCollection,
  MarkAsReviewedDto,
} from '../models/index';
import {
    AlumniFromJSON,
    AlumniToJSON,
    AlumniExtendedFromJSON,
    AlumniExtendedToJSON,
    AlumniPastLocationsAndCompaniesDtoFromJSON,
    AlumniPastLocationsAndCompaniesDtoToJSON,
    BasicAlumniProfileDtoFromJSON,
    BasicAlumniProfileDtoToJSON,
    CreateAlumniDtoFromJSON,
    CreateAlumniDtoToJSON,
    GeoJSONFeatureCollectionFromJSON,
    GeoJSONFeatureCollectionToJSON,
    MarkAsReviewedDtoFromJSON,
    MarkAsReviewedDtoToJSON,
} from '../models/index';

export interface AlumniControllerCreateRequest {
    createAlumniDto: CreateAlumniDto;
}

export interface AlumniControllerFindAllGeoJSONRequest {
    groupBy: AlumniControllerFindAllGeoJSONGroupByEnum;
    courseIds?: Array<string>;
    conclusionYears?: Array<string>;
    selectedYear?: number;
    compareYear?: number;
}

export interface AlumniControllerFindOneRequest {
    id: string;
}

export interface AlumniControllerGetBasicProfileRequest {
    id: string;
}

export interface AlumniControllerGetPastLocationsAndCompaniesRequest {
    id: string;
}

export interface AlumniControllerMarkAsReviewedRequest {
    markAsReviewedDto: MarkAsReviewedDto;
}

/**
 * AlumniApi - interface
 * 
 * @export
 * @interface AlumniApiInterface
 */
export interface AlumniApiInterface {
    /**
     * 
     * @summary Create a new alumni
     * @param {CreateAlumniDto} createAlumniDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlumniApiInterface
     */
    alumniControllerCreateRaw(requestParameters: AlumniControllerCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Alumni>>;

    /**
     * Create a new alumni
     */
    alumniControllerCreate(requestParameters: AlumniControllerCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Alumni>;

    /**
     * 
     * @summary Get all alumni, enriched with location, graduations and roles
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlumniApiInterface
     */
    alumniControllerFindAllRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Alumni>>>;

    /**
     * Get all alumni, enriched with location, graduations and roles
     */
    alumniControllerFindAll(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Alumni>>;

    /**
     * 
     * @summary Get all alumni to be displayed in the map
     * @param {'countries' | 'cities'} groupBy How to group the data
     * @param {Array<string>} [courseIds] The ID(s) of the course(s)
     * @param {Array<string>} [conclusionYears] The year(s) of conclusion(s)
     * @param {number} [selectedYear] The selected year
     * @param {number} [compareYear] The year to compare to
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlumniApiInterface
     */
    alumniControllerFindAllGeoJSONRaw(requestParameters: AlumniControllerFindAllGeoJSONRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GeoJSONFeatureCollection>>;

    /**
     * Get all alumni to be displayed in the map
     */
    alumniControllerFindAllGeoJSON(requestParameters: AlumniControllerFindAllGeoJSONRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GeoJSONFeatureCollection>;

    /**
     * 
     * @summary Get alumni by id, enriched with location, graduations and roles
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlumniApiInterface
     */
    alumniControllerFindOneRaw(requestParameters: AlumniControllerFindOneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Alumni>>;

    /**
     * Get alumni by id, enriched with location, graduations and roles
     */
    alumniControllerFindOne(requestParameters: AlumniControllerFindOneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Alumni>;

    /**
     * 
     * @summary Get all alumni submissions that need to be reviewed
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlumniApiInterface
     */
    alumniControllerGetAlumniToReviewRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<AlumniExtended>>>;

    /**
     * Get all alumni submissions that need to be reviewed
     */
    alumniControllerGetAlumniToReview(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<AlumniExtended>>;

    /**
     * 
     * @summary Get basic profile of an alumni
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlumniApiInterface
     */
    alumniControllerGetBasicProfileRaw(requestParameters: AlumniControllerGetBasicProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BasicAlumniProfileDto>>;

    /**
     * Get basic profile of an alumni
     */
    alumniControllerGetBasicProfile(requestParameters: AlumniControllerGetBasicProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BasicAlumniProfileDto>;

    /**
     * 
     * @summary Get the past locations and companies of an alumni
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlumniApiInterface
     */
    alumniControllerGetPastLocationsAndCompaniesRaw(requestParameters: AlumniControllerGetPastLocationsAndCompaniesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AlumniPastLocationsAndCompaniesDto>>;

    /**
     * Get the past locations and companies of an alumni
     */
    alumniControllerGetPastLocationsAndCompanies(requestParameters: AlumniControllerGetPastLocationsAndCompaniesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AlumniPastLocationsAndCompaniesDto>;

    /**
     * 
     * @summary Mark an alumni as reviewed
     * @param {MarkAsReviewedDto} markAsReviewedDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlumniApiInterface
     */
    alumniControllerMarkAsReviewedRaw(requestParameters: AlumniControllerMarkAsReviewedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Alumni>>;

    /**
     * Mark an alumni as reviewed
     */
    alumniControllerMarkAsReviewed(requestParameters: AlumniControllerMarkAsReviewedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Alumni>;

}

/**
 * 
 */
export class AlumniApi extends runtime.BaseAPI implements AlumniApiInterface {

    /**
     * Create a new alumni
     */
    async alumniControllerCreateRaw(requestParameters: AlumniControllerCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Alumni>> {
        if (requestParameters['createAlumniDto'] == null) {
            throw new runtime.RequiredError(
                'createAlumniDto',
                'Required parameter "createAlumniDto" was null or undefined when calling alumniControllerCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/alumni`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateAlumniDtoToJSON(requestParameters['createAlumniDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AlumniFromJSON(jsonValue));
    }

    /**
     * Create a new alumni
     */
    async alumniControllerCreate(requestParameters: AlumniControllerCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Alumni> {
        const response = await this.alumniControllerCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all alumni, enriched with location, graduations and roles
     */
    async alumniControllerFindAllRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Alumni>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/alumni`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AlumniFromJSON));
    }

    /**
     * Get all alumni, enriched with location, graduations and roles
     */
    async alumniControllerFindAll(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Alumni>> {
        const response = await this.alumniControllerFindAllRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get all alumni to be displayed in the map
     */
    async alumniControllerFindAllGeoJSONRaw(requestParameters: AlumniControllerFindAllGeoJSONRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GeoJSONFeatureCollection>> {
        if (requestParameters['groupBy'] == null) {
            throw new runtime.RequiredError(
                'groupBy',
                'Required parameter "groupBy" was null or undefined when calling alumniControllerFindAllGeoJSON().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['groupBy'] != null) {
            queryParameters['groupBy'] = requestParameters['groupBy'];
        }

        if (requestParameters['courseIds'] != null) {
            queryParameters['courseIds'] = requestParameters['courseIds'];
        }

        if (requestParameters['conclusionYears'] != null) {
            queryParameters['conclusionYears'] = requestParameters['conclusionYears'];
        }

        if (requestParameters['selectedYear'] != null) {
            queryParameters['selectedYear'] = requestParameters['selectedYear'];
        }

        if (requestParameters['compareYear'] != null) {
            queryParameters['compareYear'] = requestParameters['compareYear'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/alumni/geoJSON`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GeoJSONFeatureCollectionFromJSON(jsonValue));
    }

    /**
     * Get all alumni to be displayed in the map
     */
    async alumniControllerFindAllGeoJSON(requestParameters: AlumniControllerFindAllGeoJSONRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GeoJSONFeatureCollection> {
        const response = await this.alumniControllerFindAllGeoJSONRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get alumni by id, enriched with location, graduations and roles
     */
    async alumniControllerFindOneRaw(requestParameters: AlumniControllerFindOneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Alumni>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling alumniControllerFindOne().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/alumni/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AlumniFromJSON(jsonValue));
    }

    /**
     * Get alumni by id, enriched with location, graduations and roles
     */
    async alumniControllerFindOne(requestParameters: AlumniControllerFindOneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Alumni> {
        const response = await this.alumniControllerFindOneRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all alumni submissions that need to be reviewed
     */
    async alumniControllerGetAlumniToReviewRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<AlumniExtended>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/alumni/review`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AlumniExtendedFromJSON));
    }

    /**
     * Get all alumni submissions that need to be reviewed
     */
    async alumniControllerGetAlumniToReview(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<AlumniExtended>> {
        const response = await this.alumniControllerGetAlumniToReviewRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get basic profile of an alumni
     */
    async alumniControllerGetBasicProfileRaw(requestParameters: AlumniControllerGetBasicProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BasicAlumniProfileDto>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling alumniControllerGetBasicProfile().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/alumni/basic-profile/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BasicAlumniProfileDtoFromJSON(jsonValue));
    }

    /**
     * Get basic profile of an alumni
     */
    async alumniControllerGetBasicProfile(requestParameters: AlumniControllerGetBasicProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BasicAlumniProfileDto> {
        const response = await this.alumniControllerGetBasicProfileRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get the past locations and companies of an alumni
     */
    async alumniControllerGetPastLocationsAndCompaniesRaw(requestParameters: AlumniControllerGetPastLocationsAndCompaniesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AlumniPastLocationsAndCompaniesDto>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling alumniControllerGetPastLocationsAndCompanies().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/alumni/past-locations-companies/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AlumniPastLocationsAndCompaniesDtoFromJSON(jsonValue));
    }

    /**
     * Get the past locations and companies of an alumni
     */
    async alumniControllerGetPastLocationsAndCompanies(requestParameters: AlumniControllerGetPastLocationsAndCompaniesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AlumniPastLocationsAndCompaniesDto> {
        const response = await this.alumniControllerGetPastLocationsAndCompaniesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Mark an alumni as reviewed
     */
    async alumniControllerMarkAsReviewedRaw(requestParameters: AlumniControllerMarkAsReviewedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Alumni>> {
        if (requestParameters['markAsReviewedDto'] == null) {
            throw new runtime.RequiredError(
                'markAsReviewedDto',
                'Required parameter "markAsReviewedDto" was null or undefined when calling alumniControllerMarkAsReviewed().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/alumni/review`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MarkAsReviewedDtoToJSON(requestParameters['markAsReviewedDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AlumniFromJSON(jsonValue));
    }

    /**
     * Mark an alumni as reviewed
     */
    async alumniControllerMarkAsReviewed(requestParameters: AlumniControllerMarkAsReviewedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Alumni> {
        const response = await this.alumniControllerMarkAsReviewedRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const AlumniControllerFindAllGeoJSONGroupByEnum = {
    Countries: 'countries',
    Cities: 'cities'
} as const;
export type AlumniControllerFindAllGeoJSONGroupByEnum = typeof AlumniControllerFindAllGeoJSONGroupByEnum[keyof typeof AlumniControllerFindAllGeoJSONGroupByEnum];
