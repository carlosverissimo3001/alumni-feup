/* tslint:disable */
/* eslint-disable */
/**
 * API
 * API description
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AddFacultyDto,
  Alumni,
  AlumniExtended,
  BasicAlumniProfileDto,
  CityOptionDto,
  CompanyListResponseDto,
  CompanyOptionDto,
  CountryListResponseDto,
  CountryOptionDto,
  CourseExtended,
  CreateAlumniDto,
  CreateCourseDto,
  CreateReviewDto,
  Faculty,
  GeoJSONFeatureCollection,
  IndustryListResponseDto,
  IndustryOptionDto,
  LinkedinAuthDto,
  MarkAsReviewedDto,
  ReviewGeoJSONFeatureCollection,
  RoleListResponseDto,
  RoleOptionDto,
  UploadExtractionDto,
  UserAuthResponse,
  VerifyEmailDto,
  VerifyEmailTokenDto,
} from '../models/index';
import {
    AddFacultyDtoFromJSON,
    AddFacultyDtoToJSON,
    AlumniFromJSON,
    AlumniToJSON,
    AlumniExtendedFromJSON,
    AlumniExtendedToJSON,
    BasicAlumniProfileDtoFromJSON,
    BasicAlumniProfileDtoToJSON,
    CityOptionDtoFromJSON,
    CityOptionDtoToJSON,
    CompanyListResponseDtoFromJSON,
    CompanyListResponseDtoToJSON,
    CompanyOptionDtoFromJSON,
    CompanyOptionDtoToJSON,
    CountryListResponseDtoFromJSON,
    CountryListResponseDtoToJSON,
    CountryOptionDtoFromJSON,
    CountryOptionDtoToJSON,
    CourseExtendedFromJSON,
    CourseExtendedToJSON,
    CreateAlumniDtoFromJSON,
    CreateAlumniDtoToJSON,
    CreateCourseDtoFromJSON,
    CreateCourseDtoToJSON,
    CreateReviewDtoFromJSON,
    CreateReviewDtoToJSON,
    FacultyFromJSON,
    FacultyToJSON,
    GeoJSONFeatureCollectionFromJSON,
    GeoJSONFeatureCollectionToJSON,
    IndustryListResponseDtoFromJSON,
    IndustryListResponseDtoToJSON,
    IndustryOptionDtoFromJSON,
    IndustryOptionDtoToJSON,
    LinkedinAuthDtoFromJSON,
    LinkedinAuthDtoToJSON,
    MarkAsReviewedDtoFromJSON,
    MarkAsReviewedDtoToJSON,
    ReviewGeoJSONFeatureCollectionFromJSON,
    ReviewGeoJSONFeatureCollectionToJSON,
    RoleListResponseDtoFromJSON,
    RoleListResponseDtoToJSON,
    RoleOptionDtoFromJSON,
    RoleOptionDtoToJSON,
    UploadExtractionDtoFromJSON,
    UploadExtractionDtoToJSON,
    UserAuthResponseFromJSON,
    UserAuthResponseToJSON,
    VerifyEmailDtoFromJSON,
    VerifyEmailDtoToJSON,
    VerifyEmailTokenDtoFromJSON,
    VerifyEmailTokenDtoToJSON,
} from '../models/index';

export interface AlumniControllerCreateRequest {
    createAlumniDto: CreateAlumniDto;
}

export interface AlumniControllerFindAllGeoJSONRequest {
    groupBy: AlumniControllerFindAllGeoJSONGroupByEnum;
    courseIds?: Array<string>;
    conclusionYears?: Array<string>;
    selectedYear?: number;
    compareYear?: number;
}

export interface AlumniControllerFindOneRequest {
    id: string;
}

export interface AlumniControllerGetBasicProfileRequest {
    id: string;
}

export interface AlumniControllerGetPastLocationsAndCompaniesRequest {
    id: string;
}

export interface AlumniControllerMarkAsReviewedRequest {
    markAsReviewedDto: MarkAsReviewedDto;
}

export interface CompaniesAnalyticsControllerGetCompaniesWithAlumniCountRequest {
    startDate?: string;
    endDate?: string;
    courseIds?: Array<string>;
    graduationYears?: Array<string>;
    companyIds?: Array<string>;
    industryIds?: Array<string>;
    countries?: Array<string>;
    cityIds?: Array<string>;
    currentRolesOnly?: boolean;
    onlyInternational?: boolean;
    excludeResearchAndHighEducation?: boolean;
    companySearch?: string;
    industrySearch?: string;
    companySize?: Array<CompaniesAnalyticsControllerGetCompaniesWithAlumniCountCompanySizeEnum>;
    companyType?: Array<CompaniesAnalyticsControllerGetCompaniesWithAlumniCountCompanyTypeEnum>;
    escoCodes?: Array<string>;
    limit?: number;
    offset?: number;
    search?: string;
    sortBy?: string;
    sortOrder?: string;
}

export interface CompaniesAnalyticsControllerGetCompanyDetailsRequest {
    id: string;
    startDate?: string;
    endDate?: string;
    courseIds?: Array<string>;
    graduationYears?: Array<string>;
    companyIds?: Array<string>;
    industryIds?: Array<string>;
    countries?: Array<string>;
    cityIds?: Array<string>;
    currentRolesOnly?: boolean;
    onlyInternational?: boolean;
    excludeResearchAndHighEducation?: boolean;
    companySearch?: string;
    industrySearch?: string;
    companySize?: Array<CompaniesAnalyticsControllerGetCompanyDetailsCompanySizeEnum>;
    companyType?: Array<CompaniesAnalyticsControllerGetCompanyDetailsCompanyTypeEnum>;
    escoCodes?: Array<string>;
    limit?: number;
    offset?: number;
    search?: string;
    sortBy?: string;
    sortOrder?: string;
}

export interface CompaniesAnalyticsControllerGetHotCompaniesRequest {
    startDate?: string;
    endDate?: string;
    courseIds?: Array<string>;
    graduationYears?: Array<string>;
    companyIds?: Array<string>;
    industryIds?: Array<string>;
    countries?: Array<string>;
    cityIds?: Array<string>;
    currentRolesOnly?: boolean;
    onlyInternational?: boolean;
    excludeResearchAndHighEducation?: boolean;
    companySearch?: string;
    industrySearch?: string;
    companySize?: Array<CompaniesAnalyticsControllerGetHotCompaniesCompanySizeEnum>;
    companyType?: Array<CompaniesAnalyticsControllerGetHotCompaniesCompanyTypeEnum>;
    escoCodes?: Array<string>;
    limit?: number;
    offset?: number;
    search?: string;
    sortBy?: string;
    sortOrder?: string;
}

export interface CompanyControllerFindOneRequest {
    id: string;
}

export interface CountriesAnalyticsControllerGetCitiesOptionsRequest {
    countryCodes?: Array<string>;
}

export interface CountriesAnalyticsControllerGetCountriesWithAlumniCountRequest {
    startDate?: string;
    endDate?: string;
    courseIds?: Array<string>;
    graduationYears?: Array<string>;
    companyIds?: Array<string>;
    industryIds?: Array<string>;
    countries?: Array<string>;
    cityIds?: Array<string>;
    currentRolesOnly?: boolean;
    onlyInternational?: boolean;
    excludeResearchAndHighEducation?: boolean;
    companySearch?: string;
    industrySearch?: string;
    companySize?: Array<CountriesAnalyticsControllerGetCountriesWithAlumniCountCompanySizeEnum>;
    companyType?: Array<CountriesAnalyticsControllerGetCountriesWithAlumniCountCompanyTypeEnum>;
    escoCodes?: Array<string>;
    limit?: number;
    offset?: number;
    search?: string;
    sortBy?: string;
    sortOrder?: string;
}

export interface CourseControllerCreateRequest {
    createCourseDto: CreateCourseDto;
}

export interface CourseControllerFindRequest {
    courseIds?: Array<string>;
    facultyIds?: Array<string>;
}

export interface CourseControllerFindOneRequest {
    id: string;
}

export interface FacultyControllerCreateRequest {
    addFacultyDto: AddFacultyDto;
}

export interface FileUploadControllerCreateRequest {
    uploadExtractionDto: UploadExtractionDto;
}

export interface IndustriesAnalyticsControllerGetIndustryWithCountsRequest {
    startDate?: string;
    endDate?: string;
    courseIds?: Array<string>;
    graduationYears?: Array<string>;
    companyIds?: Array<string>;
    industryIds?: Array<string>;
    countries?: Array<string>;
    cityIds?: Array<string>;
    currentRolesOnly?: boolean;
    onlyInternational?: boolean;
    excludeResearchAndHighEducation?: boolean;
    companySearch?: string;
    industrySearch?: string;
    companySize?: Array<IndustriesAnalyticsControllerGetIndustryWithCountsCompanySizeEnum>;
    companyType?: Array<IndustriesAnalyticsControllerGetIndustryWithCountsCompanyTypeEnum>;
    escoCodes?: Array<string>;
    limit?: number;
    offset?: number;
    search?: string;
    sortBy?: string;
    sortOrder?: string;
}

export interface ReviewControllerCreateRequest {
    createReviewDto: CreateReviewDto;
}

export interface ReviewControllerFindAllGeoJSONRequest {
    groupBy: ReviewControllerFindAllGeoJSONGroupByEnum;
    reviewType?: string;
}

export interface RoleAnalyticsControllerGetRolesRequest {
    startDate?: string;
    endDate?: string;
    courseIds?: Array<string>;
    graduationYears?: Array<string>;
    companyIds?: Array<string>;
    industryIds?: Array<string>;
    countries?: Array<string>;
    cityIds?: Array<string>;
    currentRolesOnly?: boolean;
    onlyInternational?: boolean;
    excludeResearchAndHighEducation?: boolean;
    companySearch?: string;
    industrySearch?: string;
    companySize?: Array<RoleAnalyticsControllerGetRolesCompanySizeEnum>;
    companyType?: Array<RoleAnalyticsControllerGetRolesCompanyTypeEnum>;
    escoCodes?: Array<string>;
    limit?: number;
    offset?: number;
    search?: string;
    sortBy?: string;
    sortOrder?: string;
}

export interface UserControllerLinkedinAuthRequest {
    linkedinAuthDto: LinkedinAuthDto;
}

export interface UserControllerLinkedinConfirmRequest {
    linkedinAuthDto: LinkedinAuthDto;
}

export interface UserControllerVerifyEmailRequest {
    verifyEmailDto: VerifyEmailDto;
}

export interface UserControllerVerifyEmailTokenRequest {
    verifyEmailTokenDto: VerifyEmailTokenDto;
}

/**
 * V1Api - interface
 * 
 * @export
 * @interface V1ApiInterface
 */
export interface V1ApiInterface {
    /**
     * 
     * @summary Get BrightData balance
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    adminControllerGetBrightDataBalanceRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<number>>;

    /**
     * Get BrightData balance
     */
    adminControllerGetBrightDataBalance(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<number>;

    /**
     * 
     * @summary Get ProxyCurl balance
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    adminControllerGetProxyCurlBalanceRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<number>>;

    /**
     * Get ProxyCurl balance
     */
    adminControllerGetProxyCurlBalance(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<number>;

    /**
     * 
     * @summary Create a new alumni
     * @param {CreateAlumniDto} createAlumniDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    alumniControllerCreateRaw(requestParameters: AlumniControllerCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Alumni>>;

    /**
     * Create a new alumni
     */
    alumniControllerCreate(requestParameters: AlumniControllerCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Alumni>;

    /**
     * 
     * @summary Get all alumni, enriched with location, graduations and roles
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    alumniControllerFindAllRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Alumni>>>;

    /**
     * Get all alumni, enriched with location, graduations and roles
     */
    alumniControllerFindAll(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Alumni>>;

    /**
     * 
     * @summary Get all alumni to be displayed in the map
     * @param {'countries' | 'cities'} groupBy How to group the data
     * @param {Array<string>} [courseIds] The ID(s) of the course(s)
     * @param {Array<string>} [conclusionYears] The year(s) of conclusion(s)
     * @param {number} [selectedYear] The selected year
     * @param {number} [compareYear] The year to compare to
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    alumniControllerFindAllGeoJSONRaw(requestParameters: AlumniControllerFindAllGeoJSONRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GeoJSONFeatureCollection>>;

    /**
     * Get all alumni to be displayed in the map
     */
    alumniControllerFindAllGeoJSON(requestParameters: AlumniControllerFindAllGeoJSONRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GeoJSONFeatureCollection>;

    /**
     * 
     * @summary Get alumni by id, enriched with location, graduations and roles
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    alumniControllerFindOneRaw(requestParameters: AlumniControllerFindOneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Alumni>>;

    /**
     * Get alumni by id, enriched with location, graduations and roles
     */
    alumniControllerFindOne(requestParameters: AlumniControllerFindOneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Alumni>;

    /**
     * 
     * @summary Get all alumni submissions that need to be reviewed
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    alumniControllerGetAlumniToReviewRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<AlumniExtended>>>;

    /**
     * Get all alumni submissions that need to be reviewed
     */
    alumniControllerGetAlumniToReview(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<AlumniExtended>>;

    /**
     * 
     * @summary Get basic profile of an alumni
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    alumniControllerGetBasicProfileRaw(requestParameters: AlumniControllerGetBasicProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BasicAlumniProfileDto>>;

    /**
     * Get basic profile of an alumni
     */
    alumniControllerGetBasicProfile(requestParameters: AlumniControllerGetBasicProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BasicAlumniProfileDto>;

    /**
     * 
     * @summary Get the past locations and companies of an alumni
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    alumniControllerGetPastLocationsAndCompaniesRaw(requestParameters: AlumniControllerGetPastLocationsAndCompaniesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>>;

    /**
     * Get the past locations and companies of an alumni
     */
    alumniControllerGetPastLocationsAndCompanies(requestParameters: AlumniControllerGetPastLocationsAndCompaniesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object>;

    /**
     * 
     * @summary Mark an alumni as reviewed
     * @param {MarkAsReviewedDto} markAsReviewedDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    alumniControllerMarkAsReviewedRaw(requestParameters: AlumniControllerMarkAsReviewedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Alumni>>;

    /**
     * Mark an alumni as reviewed
     */
    alumniControllerMarkAsReviewed(requestParameters: AlumniControllerMarkAsReviewedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Alumni>;

    /**
     * 
     * @summary Get the companies, and the number of alumni working in them.
     * @param {string} [startDate] The start date of the role
     * @param {string} [endDate] The end date of the role
     * @param {Array<string>} [courseIds] The course IDs to filter by
     * @param {Array<string>} [graduationYears] The graduation years to filter by
     * @param {Array<string>} [companyIds] The company IDs to filter by
     * @param {Array<string>} [industryIds] The industry IDs to filter by
     * @param {Array<string>} [countries] The countries to filter by
     * @param {Array<string>} [cityIds] The cities ids to filter by
     * @param {boolean} [currentRolesOnly] Filter for current roles only
     * @param {boolean} [onlyInternational] Whether to exclude roles in Portugal
     * @param {boolean} [excludeResearchAndHighEducation] Exclude research and high education roles
     * @param {string} [companySearch] Search query for companies
     * @param {string} [industrySearch] Search query for industries
     * @param {Array<'A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I'>} [companySize] The company sizes to filter by
     * @param {Array<'EDUCATIONAL' | 'GOVERNMENT_AGENCY' | 'NON_PROFIT' | 'PARTNERSHIP' | 'PRIVATELY_HELD' | 'PUBLIC_COMPANY' | 'SELF_EMPLOYED' | 'SELF_OWNED'>} [companyType] The company types to filter by
     * @param {Array<string>} [escoCodes] The ESCO codes to filter by
     * @param {number} [limit] The number of results to return
     * @param {number} [offset] The offset of the query
     * @param {string} [search] Broad search query
     * @param {string} [sortBy] How to sort the results
     * @param {string} [sortOrder] The order of the results
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    companiesAnalyticsControllerGetCompaniesWithAlumniCountRaw(requestParameters: CompaniesAnalyticsControllerGetCompaniesWithAlumniCountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CompanyListResponseDto>>;

    /**
     * Get the companies, and the number of alumni working in them.
     */
    companiesAnalyticsControllerGetCompaniesWithAlumniCount(requestParameters: CompaniesAnalyticsControllerGetCompaniesWithAlumniCountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CompanyListResponseDto>;

    /**
     * 
     * @summary Returns detailed information about a specific company.
     * @param {string} id 
     * @param {string} [startDate] The start date of the role
     * @param {string} [endDate] The end date of the role
     * @param {Array<string>} [courseIds] The course IDs to filter by
     * @param {Array<string>} [graduationYears] The graduation years to filter by
     * @param {Array<string>} [companyIds] The company IDs to filter by
     * @param {Array<string>} [industryIds] The industry IDs to filter by
     * @param {Array<string>} [countries] The countries to filter by
     * @param {Array<string>} [cityIds] The cities ids to filter by
     * @param {boolean} [currentRolesOnly] Filter for current roles only
     * @param {boolean} [onlyInternational] Whether to exclude roles in Portugal
     * @param {boolean} [excludeResearchAndHighEducation] Exclude research and high education roles
     * @param {string} [companySearch] Search query for companies
     * @param {string} [industrySearch] Search query for industries
     * @param {Array<'A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I'>} [companySize] The company sizes to filter by
     * @param {Array<'EDUCATIONAL' | 'GOVERNMENT_AGENCY' | 'NON_PROFIT' | 'PARTNERSHIP' | 'PRIVATELY_HELD' | 'PUBLIC_COMPANY' | 'SELF_EMPLOYED' | 'SELF_OWNED'>} [companyType] The company types to filter by
     * @param {Array<string>} [escoCodes] The ESCO codes to filter by
     * @param {number} [limit] The number of results to return
     * @param {number} [offset] The offset of the query
     * @param {string} [search] Broad search query
     * @param {string} [sortBy] How to sort the results
     * @param {string} [sortOrder] The order of the results
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    companiesAnalyticsControllerGetCompanyDetailsRaw(requestParameters: CompaniesAnalyticsControllerGetCompanyDetailsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Returns detailed information about a specific company.
     */
    companiesAnalyticsControllerGetCompanyDetails(requestParameters: CompaniesAnalyticsControllerGetCompanyDetailsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary Returns company employment growth over time.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    companiesAnalyticsControllerGetCompanyGrowthRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Returns company employment growth over time.
     */
    companiesAnalyticsControllerGetCompanyGrowth(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary List of possible companies to search for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    companiesAnalyticsControllerGetCompanyOptionsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<CompanyOptionDto>>>;

    /**
     * List of possible companies to search for.
     */
    companiesAnalyticsControllerGetCompanyOptions(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<CompanyOptionDto>>;

    /**
     * 
     * @summary Returns companies that have seen a spike in alumni employment.
     * @param {string} [startDate] The start date of the role
     * @param {string} [endDate] The end date of the role
     * @param {Array<string>} [courseIds] The course IDs to filter by
     * @param {Array<string>} [graduationYears] The graduation years to filter by
     * @param {Array<string>} [companyIds] The company IDs to filter by
     * @param {Array<string>} [industryIds] The industry IDs to filter by
     * @param {Array<string>} [countries] The countries to filter by
     * @param {Array<string>} [cityIds] The cities ids to filter by
     * @param {boolean} [currentRolesOnly] Filter for current roles only
     * @param {boolean} [onlyInternational] Whether to exclude roles in Portugal
     * @param {boolean} [excludeResearchAndHighEducation] Exclude research and high education roles
     * @param {string} [companySearch] Search query for companies
     * @param {string} [industrySearch] Search query for industries
     * @param {Array<'A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I'>} [companySize] The company sizes to filter by
     * @param {Array<'EDUCATIONAL' | 'GOVERNMENT_AGENCY' | 'NON_PROFIT' | 'PARTNERSHIP' | 'PRIVATELY_HELD' | 'PUBLIC_COMPANY' | 'SELF_EMPLOYED' | 'SELF_OWNED'>} [companyType] The company types to filter by
     * @param {Array<string>} [escoCodes] The ESCO codes to filter by
     * @param {number} [limit] The number of results to return
     * @param {number} [offset] The offset of the query
     * @param {string} [search] Broad search query
     * @param {string} [sortBy] How to sort the results
     * @param {string} [sortOrder] The order of the results
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    companiesAnalyticsControllerGetHotCompaniesRaw(requestParameters: CompaniesAnalyticsControllerGetHotCompaniesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Returns companies that have seen a spike in alumni employment.
     */
    companiesAnalyticsControllerGetHotCompanies(requestParameters: CompaniesAnalyticsControllerGetHotCompaniesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary Get all companies
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    companyControllerFindAllRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Get all companies
     */
    companyControllerFindAll(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary Get company by id
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    companyControllerFindOneRaw(requestParameters: CompanyControllerFindOneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Get company by id
     */
    companyControllerFindOne(requestParameters: CompanyControllerFindOneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary Get the cities options.
     * @param {Array<string>} [countryCodes] The country codes  to filter by
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    countriesAnalyticsControllerGetCitiesOptionsRaw(requestParameters: CountriesAnalyticsControllerGetCitiesOptionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<CityOptionDto>>>;

    /**
     * Get the cities options.
     */
    countriesAnalyticsControllerGetCitiesOptions(requestParameters: CountriesAnalyticsControllerGetCitiesOptionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<CityOptionDto>>;

    /**
     * 
     * @summary Get the countries options.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    countriesAnalyticsControllerGetCountriesOptionsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<CountryOptionDto>>>;

    /**
     * Get the countries options.
     */
    countriesAnalyticsControllerGetCountriesOptions(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<CountryOptionDto>>;

    /**
     * 
     * @summary Get the countries, and the number of alumni working in them.
     * @param {string} [startDate] The start date of the role
     * @param {string} [endDate] The end date of the role
     * @param {Array<string>} [courseIds] The course IDs to filter by
     * @param {Array<string>} [graduationYears] The graduation years to filter by
     * @param {Array<string>} [companyIds] The company IDs to filter by
     * @param {Array<string>} [industryIds] The industry IDs to filter by
     * @param {Array<string>} [countries] The countries to filter by
     * @param {Array<string>} [cityIds] The cities ids to filter by
     * @param {boolean} [currentRolesOnly] Filter for current roles only
     * @param {boolean} [onlyInternational] Whether to exclude roles in Portugal
     * @param {boolean} [excludeResearchAndHighEducation] Exclude research and high education roles
     * @param {string} [companySearch] Search query for companies
     * @param {string} [industrySearch] Search query for industries
     * @param {Array<'A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I'>} [companySize] The company sizes to filter by
     * @param {Array<'EDUCATIONAL' | 'GOVERNMENT_AGENCY' | 'NON_PROFIT' | 'PARTNERSHIP' | 'PRIVATELY_HELD' | 'PUBLIC_COMPANY' | 'SELF_EMPLOYED' | 'SELF_OWNED'>} [companyType] The company types to filter by
     * @param {Array<string>} [escoCodes] The ESCO codes to filter by
     * @param {number} [limit] The number of results to return
     * @param {number} [offset] The offset of the query
     * @param {string} [search] Broad search query
     * @param {string} [sortBy] How to sort the results
     * @param {string} [sortOrder] The order of the results
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    countriesAnalyticsControllerGetCountriesWithAlumniCountRaw(requestParameters: CountriesAnalyticsControllerGetCountriesWithAlumniCountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CountryListResponseDto>>;

    /**
     * Get the countries, and the number of alumni working in them.
     */
    countriesAnalyticsControllerGetCountriesWithAlumniCount(requestParameters: CountriesAnalyticsControllerGetCountriesWithAlumniCountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CountryListResponseDto>;

    /**
     * 
     * @summary Create a course
     * @param {CreateCourseDto} createCourseDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    courseControllerCreateRaw(requestParameters: CourseControllerCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CourseExtended>>;

    /**
     * Create a course
     */
    courseControllerCreate(requestParameters: CourseControllerCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CourseExtended>;

    /**
     * 
     * @summary Get courses
     * @param {Array<string>} [courseIds] The courses to filter by
     * @param {Array<string>} [facultyIds] The faculties to filter by
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    courseControllerFindRaw(requestParameters: CourseControllerFindRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<CourseExtended>>>;

    /**
     * Get courses
     */
    courseControllerFind(requestParameters: CourseControllerFindRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<CourseExtended>>;

    /**
     * 
     * @summary Get a course by id
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    courseControllerFindOneRaw(requestParameters: CourseControllerFindOneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CourseExtended>>;

    /**
     * Get a course by id
     */
    courseControllerFindOne(requestParameters: CourseControllerFindOneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CourseExtended>;

    /**
     * 
     * @summary Create a faculty
     * @param {AddFacultyDto} addFacultyDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    facultyControllerCreateRaw(requestParameters: FacultyControllerCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Faculty>>;

    /**
     * Create a faculty
     */
    facultyControllerCreate(requestParameters: FacultyControllerCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Faculty>;

    /**
     * 
     * @summary Get all faculties
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    facultyControllerFindAllRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Faculty>>>;

    /**
     * Get all faculties
     */
    facultyControllerFindAll(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Faculty>>;

    /**
     * 
     * @summary Upload a file
     * @param {UploadExtractionDto} uploadExtractionDto Data to upload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    fileUploadControllerCreateRaw(requestParameters: FileUploadControllerCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>>;

    /**
     * Upload a file
     */
    fileUploadControllerCreate(requestParameters: FileUploadControllerCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string>;

    /**
     * Returns a list of industries with their id and name.
     * @summary List of possible industries to search for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    industriesAnalyticsControllerGetIndustryOptionsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<IndustryOptionDto>>>;

    /**
     * Returns a list of industries with their id and name.
     * List of possible industries to search for.
     */
    industriesAnalyticsControllerGetIndustryOptions(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<IndustryOptionDto>>;

    /**
     * 
     * @summary Returns the number of alumni working in companies grouped by industry.
     * @param {string} [startDate] The start date of the role
     * @param {string} [endDate] The end date of the role
     * @param {Array<string>} [courseIds] The course IDs to filter by
     * @param {Array<string>} [graduationYears] The graduation years to filter by
     * @param {Array<string>} [companyIds] The company IDs to filter by
     * @param {Array<string>} [industryIds] The industry IDs to filter by
     * @param {Array<string>} [countries] The countries to filter by
     * @param {Array<string>} [cityIds] The cities ids to filter by
     * @param {boolean} [currentRolesOnly] Filter for current roles only
     * @param {boolean} [onlyInternational] Whether to exclude roles in Portugal
     * @param {boolean} [excludeResearchAndHighEducation] Exclude research and high education roles
     * @param {string} [companySearch] Search query for companies
     * @param {string} [industrySearch] Search query for industries
     * @param {Array<'A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I'>} [companySize] The company sizes to filter by
     * @param {Array<'EDUCATIONAL' | 'GOVERNMENT_AGENCY' | 'NON_PROFIT' | 'PARTNERSHIP' | 'PRIVATELY_HELD' | 'PUBLIC_COMPANY' | 'SELF_EMPLOYED' | 'SELF_OWNED'>} [companyType] The company types to filter by
     * @param {Array<string>} [escoCodes] The ESCO codes to filter by
     * @param {number} [limit] The number of results to return
     * @param {number} [offset] The offset of the query
     * @param {string} [search] Broad search query
     * @param {string} [sortBy] How to sort the results
     * @param {string} [sortOrder] The order of the results
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    industriesAnalyticsControllerGetIndustryWithCountsRaw(requestParameters: IndustriesAnalyticsControllerGetIndustryWithCountsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IndustryListResponseDto>>;

    /**
     * Returns the number of alumni working in companies grouped by industry.
     */
    industriesAnalyticsControllerGetIndustryWithCounts(requestParameters: IndustriesAnalyticsControllerGetIndustryWithCountsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IndustryListResponseDto>;

    /**
     * 
     * @summary Create a new review
     * @param {CreateReviewDto} createReviewDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    reviewControllerCreateRaw(requestParameters: ReviewControllerCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Create a new review
     */
    reviewControllerCreate(requestParameters: ReviewControllerCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary Get all the review to be displayed on the map
     * @param {'countries' | 'cities'} groupBy How to group the data
     * @param {string} [reviewType] The review type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    reviewControllerFindAllGeoJSONRaw(requestParameters: ReviewControllerFindAllGeoJSONRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReviewGeoJSONFeatureCollection>>;

    /**
     * Get all the review to be displayed on the map
     */
    reviewControllerFindAllGeoJSON(requestParameters: ReviewControllerFindAllGeoJSONRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReviewGeoJSONFeatureCollection>;

    /**
     * Returns a list of roles with their ESCO code and title.
     * @summary List of possible role titles to search for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    roleAnalyticsControllerGetRoleOptionsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<RoleOptionDto>>>;

    /**
     * Returns a list of roles with their ESCO code and title.
     * List of possible role titles to search for.
     */
    roleAnalyticsControllerGetRoleOptions(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<RoleOptionDto>>;

    /**
     * 
     * @summary Returns the number of roles classified with each ESCO classification
     * @param {string} [startDate] The start date of the role
     * @param {string} [endDate] The end date of the role
     * @param {Array<string>} [courseIds] The course IDs to filter by
     * @param {Array<string>} [graduationYears] The graduation years to filter by
     * @param {Array<string>} [companyIds] The company IDs to filter by
     * @param {Array<string>} [industryIds] The industry IDs to filter by
     * @param {Array<string>} [countries] The countries to filter by
     * @param {Array<string>} [cityIds] The cities ids to filter by
     * @param {boolean} [currentRolesOnly] Filter for current roles only
     * @param {boolean} [onlyInternational] Whether to exclude roles in Portugal
     * @param {boolean} [excludeResearchAndHighEducation] Exclude research and high education roles
     * @param {string} [companySearch] Search query for companies
     * @param {string} [industrySearch] Search query for industries
     * @param {Array<'A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I'>} [companySize] The company sizes to filter by
     * @param {Array<'EDUCATIONAL' | 'GOVERNMENT_AGENCY' | 'NON_PROFIT' | 'PARTNERSHIP' | 'PRIVATELY_HELD' | 'PUBLIC_COMPANY' | 'SELF_EMPLOYED' | 'SELF_OWNED'>} [companyType] The company types to filter by
     * @param {Array<string>} [escoCodes] The ESCO codes to filter by
     * @param {number} [limit] The number of results to return
     * @param {number} [offset] The offset of the query
     * @param {string} [search] Broad search query
     * @param {string} [sortBy] How to sort the results
     * @param {string} [sortOrder] The order of the results
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    roleAnalyticsControllerGetRolesRaw(requestParameters: RoleAnalyticsControllerGetRolesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RoleListResponseDto>>;

    /**
     * Returns the number of roles classified with each ESCO classification
     */
    roleAnalyticsControllerGetRoles(requestParameters: RoleAnalyticsControllerGetRolesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RoleListResponseDto>;

    /**
     * 
     * @summary Authenticate a user with LinkedIn
     * @param {LinkedinAuthDto} linkedinAuthDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    userControllerLinkedinAuthRaw(requestParameters: UserControllerLinkedinAuthRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserAuthResponse>>;

    /**
     * Authenticate a user with LinkedIn
     */
    userControllerLinkedinAuth(requestParameters: UserControllerLinkedinAuthRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserAuthResponse>;

    /**
     * 
     * @summary Confirm the LinkedIn profile and generate a JWT token
     * @param {LinkedinAuthDto} linkedinAuthDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    userControllerLinkedinConfirmRaw(requestParameters: UserControllerLinkedinConfirmRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserAuthResponse>>;

    /**
     * Confirm the LinkedIn profile and generate a JWT token
     */
    userControllerLinkedinConfirm(requestParameters: UserControllerLinkedinConfirmRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserAuthResponse>;

    /**
     * 
     * @summary Verify the email of the alumni by generating a token and sending it to the email
     * @param {VerifyEmailDto} verifyEmailDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    userControllerVerifyEmailRaw(requestParameters: UserControllerVerifyEmailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Verify the email of the alumni by generating a token and sending it to the email
     */
    userControllerVerifyEmail(requestParameters: UserControllerVerifyEmailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary Validate the token against the email
     * @param {VerifyEmailTokenDto} verifyEmailTokenDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    userControllerVerifyEmailTokenRaw(requestParameters: UserControllerVerifyEmailTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Validate the token against the email
     */
    userControllerVerifyEmailToken(requestParameters: UserControllerVerifyEmailTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

}

/**
 * 
 */
export class V1Api extends runtime.BaseAPI implements V1ApiInterface {

    /**
     * Get BrightData balance
     */
    async adminControllerGetBrightDataBalanceRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<number>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/admin/brightdata-balance`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<number>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Get BrightData balance
     */
    async adminControllerGetBrightDataBalance(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<number> {
        const response = await this.adminControllerGetBrightDataBalanceRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get ProxyCurl balance
     */
    async adminControllerGetProxyCurlBalanceRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<number>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/admin/proxycurl-balance`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<number>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Get ProxyCurl balance
     */
    async adminControllerGetProxyCurlBalance(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<number> {
        const response = await this.adminControllerGetProxyCurlBalanceRaw(initOverrides);
        return await response.value();
    }

    /**
     * Create a new alumni
     */
    async alumniControllerCreateRaw(requestParameters: AlumniControllerCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Alumni>> {
        if (requestParameters['createAlumniDto'] == null) {
            throw new runtime.RequiredError(
                'createAlumniDto',
                'Required parameter "createAlumniDto" was null or undefined when calling alumniControllerCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/alumni`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateAlumniDtoToJSON(requestParameters['createAlumniDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AlumniFromJSON(jsonValue));
    }

    /**
     * Create a new alumni
     */
    async alumniControllerCreate(requestParameters: AlumniControllerCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Alumni> {
        const response = await this.alumniControllerCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all alumni, enriched with location, graduations and roles
     */
    async alumniControllerFindAllRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Alumni>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/alumni`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AlumniFromJSON));
    }

    /**
     * Get all alumni, enriched with location, graduations and roles
     */
    async alumniControllerFindAll(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Alumni>> {
        const response = await this.alumniControllerFindAllRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get all alumni to be displayed in the map
     */
    async alumniControllerFindAllGeoJSONRaw(requestParameters: AlumniControllerFindAllGeoJSONRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GeoJSONFeatureCollection>> {
        if (requestParameters['groupBy'] == null) {
            throw new runtime.RequiredError(
                'groupBy',
                'Required parameter "groupBy" was null or undefined when calling alumniControllerFindAllGeoJSON().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['groupBy'] != null) {
            queryParameters['groupBy'] = requestParameters['groupBy'];
        }

        if (requestParameters['courseIds'] != null) {
            queryParameters['courseIds'] = requestParameters['courseIds'];
        }

        if (requestParameters['conclusionYears'] != null) {
            queryParameters['conclusionYears'] = requestParameters['conclusionYears'];
        }

        if (requestParameters['selectedYear'] != null) {
            queryParameters['selectedYear'] = requestParameters['selectedYear'];
        }

        if (requestParameters['compareYear'] != null) {
            queryParameters['compareYear'] = requestParameters['compareYear'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/alumni/geoJSON`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GeoJSONFeatureCollectionFromJSON(jsonValue));
    }

    /**
     * Get all alumni to be displayed in the map
     */
    async alumniControllerFindAllGeoJSON(requestParameters: AlumniControllerFindAllGeoJSONRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GeoJSONFeatureCollection> {
        const response = await this.alumniControllerFindAllGeoJSONRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get alumni by id, enriched with location, graduations and roles
     */
    async alumniControllerFindOneRaw(requestParameters: AlumniControllerFindOneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Alumni>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling alumniControllerFindOne().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/alumni/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AlumniFromJSON(jsonValue));
    }

    /**
     * Get alumni by id, enriched with location, graduations and roles
     */
    async alumniControllerFindOne(requestParameters: AlumniControllerFindOneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Alumni> {
        const response = await this.alumniControllerFindOneRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all alumni submissions that need to be reviewed
     */
    async alumniControllerGetAlumniToReviewRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<AlumniExtended>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/alumni/review`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AlumniExtendedFromJSON));
    }

    /**
     * Get all alumni submissions that need to be reviewed
     */
    async alumniControllerGetAlumniToReview(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<AlumniExtended>> {
        const response = await this.alumniControllerGetAlumniToReviewRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get basic profile of an alumni
     */
    async alumniControllerGetBasicProfileRaw(requestParameters: AlumniControllerGetBasicProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BasicAlumniProfileDto>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling alumniControllerGetBasicProfile().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/alumni/basic-profile/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BasicAlumniProfileDtoFromJSON(jsonValue));
    }

    /**
     * Get basic profile of an alumni
     */
    async alumniControllerGetBasicProfile(requestParameters: AlumniControllerGetBasicProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BasicAlumniProfileDto> {
        const response = await this.alumniControllerGetBasicProfileRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get the past locations and companies of an alumni
     */
    async alumniControllerGetPastLocationsAndCompaniesRaw(requestParameters: AlumniControllerGetPastLocationsAndCompaniesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling alumniControllerGetPastLocationsAndCompanies().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/alumni/past-locations-companies/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Get the past locations and companies of an alumni
     */
    async alumniControllerGetPastLocationsAndCompanies(requestParameters: AlumniControllerGetPastLocationsAndCompaniesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.alumniControllerGetPastLocationsAndCompaniesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Mark an alumni as reviewed
     */
    async alumniControllerMarkAsReviewedRaw(requestParameters: AlumniControllerMarkAsReviewedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Alumni>> {
        if (requestParameters['markAsReviewedDto'] == null) {
            throw new runtime.RequiredError(
                'markAsReviewedDto',
                'Required parameter "markAsReviewedDto" was null or undefined when calling alumniControllerMarkAsReviewed().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/alumni/review`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MarkAsReviewedDtoToJSON(requestParameters['markAsReviewedDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AlumniFromJSON(jsonValue));
    }

    /**
     * Mark an alumni as reviewed
     */
    async alumniControllerMarkAsReviewed(requestParameters: AlumniControllerMarkAsReviewedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Alumni> {
        const response = await this.alumniControllerMarkAsReviewedRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get the companies, and the number of alumni working in them.
     */
    async companiesAnalyticsControllerGetCompaniesWithAlumniCountRaw(requestParameters: CompaniesAnalyticsControllerGetCompaniesWithAlumniCountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CompanyListResponseDto>> {
        const queryParameters: any = {};

        if (requestParameters['startDate'] != null) {
            queryParameters['startDate'] = requestParameters['startDate'];
        }

        if (requestParameters['endDate'] != null) {
            queryParameters['endDate'] = requestParameters['endDate'];
        }

        if (requestParameters['courseIds'] != null) {
            queryParameters['courseIds'] = requestParameters['courseIds'];
        }

        if (requestParameters['graduationYears'] != null) {
            queryParameters['graduationYears'] = requestParameters['graduationYears'];
        }

        if (requestParameters['companyIds'] != null) {
            queryParameters['companyIds'] = requestParameters['companyIds'];
        }

        if (requestParameters['industryIds'] != null) {
            queryParameters['industryIds'] = requestParameters['industryIds'];
        }

        if (requestParameters['countries'] != null) {
            queryParameters['countries'] = requestParameters['countries'];
        }

        if (requestParameters['cityIds'] != null) {
            queryParameters['cityIds'] = requestParameters['cityIds'];
        }

        if (requestParameters['currentRolesOnly'] != null) {
            queryParameters['currentRolesOnly'] = requestParameters['currentRolesOnly'];
        }

        if (requestParameters['onlyInternational'] != null) {
            queryParameters['onlyInternational'] = requestParameters['onlyInternational'];
        }

        if (requestParameters['excludeResearchAndHighEducation'] != null) {
            queryParameters['excludeResearchAndHighEducation'] = requestParameters['excludeResearchAndHighEducation'];
        }

        if (requestParameters['companySearch'] != null) {
            queryParameters['companySearch'] = requestParameters['companySearch'];
        }

        if (requestParameters['industrySearch'] != null) {
            queryParameters['industrySearch'] = requestParameters['industrySearch'];
        }

        if (requestParameters['companySize'] != null) {
            queryParameters['companySize'] = requestParameters['companySize'];
        }

        if (requestParameters['companyType'] != null) {
            queryParameters['companyType'] = requestParameters['companyType'];
        }

        if (requestParameters['escoCodes'] != null) {
            queryParameters['escoCodes'] = requestParameters['escoCodes'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['search'] != null) {
            queryParameters['search'] = requestParameters['search'];
        }

        if (requestParameters['sortBy'] != null) {
            queryParameters['sortBy'] = requestParameters['sortBy'];
        }

        if (requestParameters['sortOrder'] != null) {
            queryParameters['sortOrder'] = requestParameters['sortOrder'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/analytics/companies`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CompanyListResponseDtoFromJSON(jsonValue));
    }

    /**
     * Get the companies, and the number of alumni working in them.
     */
    async companiesAnalyticsControllerGetCompaniesWithAlumniCount(requestParameters: CompaniesAnalyticsControllerGetCompaniesWithAlumniCountRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CompanyListResponseDto> {
        const response = await this.companiesAnalyticsControllerGetCompaniesWithAlumniCountRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns detailed information about a specific company.
     */
    async companiesAnalyticsControllerGetCompanyDetailsRaw(requestParameters: CompaniesAnalyticsControllerGetCompanyDetailsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling companiesAnalyticsControllerGetCompanyDetails().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['startDate'] != null) {
            queryParameters['startDate'] = requestParameters['startDate'];
        }

        if (requestParameters['endDate'] != null) {
            queryParameters['endDate'] = requestParameters['endDate'];
        }

        if (requestParameters['courseIds'] != null) {
            queryParameters['courseIds'] = requestParameters['courseIds'];
        }

        if (requestParameters['graduationYears'] != null) {
            queryParameters['graduationYears'] = requestParameters['graduationYears'];
        }

        if (requestParameters['companyIds'] != null) {
            queryParameters['companyIds'] = requestParameters['companyIds'];
        }

        if (requestParameters['industryIds'] != null) {
            queryParameters['industryIds'] = requestParameters['industryIds'];
        }

        if (requestParameters['countries'] != null) {
            queryParameters['countries'] = requestParameters['countries'];
        }

        if (requestParameters['cityIds'] != null) {
            queryParameters['cityIds'] = requestParameters['cityIds'];
        }

        if (requestParameters['currentRolesOnly'] != null) {
            queryParameters['currentRolesOnly'] = requestParameters['currentRolesOnly'];
        }

        if (requestParameters['onlyInternational'] != null) {
            queryParameters['onlyInternational'] = requestParameters['onlyInternational'];
        }

        if (requestParameters['excludeResearchAndHighEducation'] != null) {
            queryParameters['excludeResearchAndHighEducation'] = requestParameters['excludeResearchAndHighEducation'];
        }

        if (requestParameters['companySearch'] != null) {
            queryParameters['companySearch'] = requestParameters['companySearch'];
        }

        if (requestParameters['industrySearch'] != null) {
            queryParameters['industrySearch'] = requestParameters['industrySearch'];
        }

        if (requestParameters['companySize'] != null) {
            queryParameters['companySize'] = requestParameters['companySize'];
        }

        if (requestParameters['companyType'] != null) {
            queryParameters['companyType'] = requestParameters['companyType'];
        }

        if (requestParameters['escoCodes'] != null) {
            queryParameters['escoCodes'] = requestParameters['escoCodes'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['search'] != null) {
            queryParameters['search'] = requestParameters['search'];
        }

        if (requestParameters['sortBy'] != null) {
            queryParameters['sortBy'] = requestParameters['sortBy'];
        }

        if (requestParameters['sortOrder'] != null) {
            queryParameters['sortOrder'] = requestParameters['sortOrder'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/analytics/companies/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Returns detailed information about a specific company.
     */
    async companiesAnalyticsControllerGetCompanyDetails(requestParameters: CompaniesAnalyticsControllerGetCompanyDetailsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.companiesAnalyticsControllerGetCompanyDetailsRaw(requestParameters, initOverrides);
    }

    /**
     * Returns company employment growth over time.
     */
    async companiesAnalyticsControllerGetCompanyGrowthRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/analytics/companies/growth`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Returns company employment growth over time.
     */
    async companiesAnalyticsControllerGetCompanyGrowth(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.companiesAnalyticsControllerGetCompanyGrowthRaw(initOverrides);
    }

    /**
     * List of possible companies to search for.
     */
    async companiesAnalyticsControllerGetCompanyOptionsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<CompanyOptionDto>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/analytics/companies/options`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CompanyOptionDtoFromJSON));
    }

    /**
     * List of possible companies to search for.
     */
    async companiesAnalyticsControllerGetCompanyOptions(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<CompanyOptionDto>> {
        const response = await this.companiesAnalyticsControllerGetCompanyOptionsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Returns companies that have seen a spike in alumni employment.
     */
    async companiesAnalyticsControllerGetHotCompaniesRaw(requestParameters: CompaniesAnalyticsControllerGetHotCompaniesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters['startDate'] != null) {
            queryParameters['startDate'] = requestParameters['startDate'];
        }

        if (requestParameters['endDate'] != null) {
            queryParameters['endDate'] = requestParameters['endDate'];
        }

        if (requestParameters['courseIds'] != null) {
            queryParameters['courseIds'] = requestParameters['courseIds'];
        }

        if (requestParameters['graduationYears'] != null) {
            queryParameters['graduationYears'] = requestParameters['graduationYears'];
        }

        if (requestParameters['companyIds'] != null) {
            queryParameters['companyIds'] = requestParameters['companyIds'];
        }

        if (requestParameters['industryIds'] != null) {
            queryParameters['industryIds'] = requestParameters['industryIds'];
        }

        if (requestParameters['countries'] != null) {
            queryParameters['countries'] = requestParameters['countries'];
        }

        if (requestParameters['cityIds'] != null) {
            queryParameters['cityIds'] = requestParameters['cityIds'];
        }

        if (requestParameters['currentRolesOnly'] != null) {
            queryParameters['currentRolesOnly'] = requestParameters['currentRolesOnly'];
        }

        if (requestParameters['onlyInternational'] != null) {
            queryParameters['onlyInternational'] = requestParameters['onlyInternational'];
        }

        if (requestParameters['excludeResearchAndHighEducation'] != null) {
            queryParameters['excludeResearchAndHighEducation'] = requestParameters['excludeResearchAndHighEducation'];
        }

        if (requestParameters['companySearch'] != null) {
            queryParameters['companySearch'] = requestParameters['companySearch'];
        }

        if (requestParameters['industrySearch'] != null) {
            queryParameters['industrySearch'] = requestParameters['industrySearch'];
        }

        if (requestParameters['companySize'] != null) {
            queryParameters['companySize'] = requestParameters['companySize'];
        }

        if (requestParameters['companyType'] != null) {
            queryParameters['companyType'] = requestParameters['companyType'];
        }

        if (requestParameters['escoCodes'] != null) {
            queryParameters['escoCodes'] = requestParameters['escoCodes'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['search'] != null) {
            queryParameters['search'] = requestParameters['search'];
        }

        if (requestParameters['sortBy'] != null) {
            queryParameters['sortBy'] = requestParameters['sortBy'];
        }

        if (requestParameters['sortOrder'] != null) {
            queryParameters['sortOrder'] = requestParameters['sortOrder'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/analytics/companies/hot-companies`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Returns companies that have seen a spike in alumni employment.
     */
    async companiesAnalyticsControllerGetHotCompanies(requestParameters: CompaniesAnalyticsControllerGetHotCompaniesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.companiesAnalyticsControllerGetHotCompaniesRaw(requestParameters, initOverrides);
    }

    /**
     * Get all companies
     */
    async companyControllerFindAllRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/company`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Get all companies
     */
    async companyControllerFindAll(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.companyControllerFindAllRaw(initOverrides);
    }

    /**
     * Get company by id
     */
    async companyControllerFindOneRaw(requestParameters: CompanyControllerFindOneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling companyControllerFindOne().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/company/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Get company by id
     */
    async companyControllerFindOne(requestParameters: CompanyControllerFindOneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.companyControllerFindOneRaw(requestParameters, initOverrides);
    }

    /**
     * Get the cities options.
     */
    async countriesAnalyticsControllerGetCitiesOptionsRaw(requestParameters: CountriesAnalyticsControllerGetCitiesOptionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<CityOptionDto>>> {
        const queryParameters: any = {};

        if (requestParameters['countryCodes'] != null) {
            queryParameters['countryCodes'] = requestParameters['countryCodes'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/analytics/countries/cities/options`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CityOptionDtoFromJSON));
    }

    /**
     * Get the cities options.
     */
    async countriesAnalyticsControllerGetCitiesOptions(requestParameters: CountriesAnalyticsControllerGetCitiesOptionsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<CityOptionDto>> {
        const response = await this.countriesAnalyticsControllerGetCitiesOptionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get the countries options.
     */
    async countriesAnalyticsControllerGetCountriesOptionsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<CountryOptionDto>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/analytics/countries/options`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CountryOptionDtoFromJSON));
    }

    /**
     * Get the countries options.
     */
    async countriesAnalyticsControllerGetCountriesOptions(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<CountryOptionDto>> {
        const response = await this.countriesAnalyticsControllerGetCountriesOptionsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get the countries, and the number of alumni working in them.
     */
    async countriesAnalyticsControllerGetCountriesWithAlumniCountRaw(requestParameters: CountriesAnalyticsControllerGetCountriesWithAlumniCountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CountryListResponseDto>> {
        const queryParameters: any = {};

        if (requestParameters['startDate'] != null) {
            queryParameters['startDate'] = requestParameters['startDate'];
        }

        if (requestParameters['endDate'] != null) {
            queryParameters['endDate'] = requestParameters['endDate'];
        }

        if (requestParameters['courseIds'] != null) {
            queryParameters['courseIds'] = requestParameters['courseIds'];
        }

        if (requestParameters['graduationYears'] != null) {
            queryParameters['graduationYears'] = requestParameters['graduationYears'];
        }

        if (requestParameters['companyIds'] != null) {
            queryParameters['companyIds'] = requestParameters['companyIds'];
        }

        if (requestParameters['industryIds'] != null) {
            queryParameters['industryIds'] = requestParameters['industryIds'];
        }

        if (requestParameters['countries'] != null) {
            queryParameters['countries'] = requestParameters['countries'];
        }

        if (requestParameters['cityIds'] != null) {
            queryParameters['cityIds'] = requestParameters['cityIds'];
        }

        if (requestParameters['currentRolesOnly'] != null) {
            queryParameters['currentRolesOnly'] = requestParameters['currentRolesOnly'];
        }

        if (requestParameters['onlyInternational'] != null) {
            queryParameters['onlyInternational'] = requestParameters['onlyInternational'];
        }

        if (requestParameters['excludeResearchAndHighEducation'] != null) {
            queryParameters['excludeResearchAndHighEducation'] = requestParameters['excludeResearchAndHighEducation'];
        }

        if (requestParameters['companySearch'] != null) {
            queryParameters['companySearch'] = requestParameters['companySearch'];
        }

        if (requestParameters['industrySearch'] != null) {
            queryParameters['industrySearch'] = requestParameters['industrySearch'];
        }

        if (requestParameters['companySize'] != null) {
            queryParameters['companySize'] = requestParameters['companySize'];
        }

        if (requestParameters['companyType'] != null) {
            queryParameters['companyType'] = requestParameters['companyType'];
        }

        if (requestParameters['escoCodes'] != null) {
            queryParameters['escoCodes'] = requestParameters['escoCodes'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['search'] != null) {
            queryParameters['search'] = requestParameters['search'];
        }

        if (requestParameters['sortBy'] != null) {
            queryParameters['sortBy'] = requestParameters['sortBy'];
        }

        if (requestParameters['sortOrder'] != null) {
            queryParameters['sortOrder'] = requestParameters['sortOrder'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/analytics/countries`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CountryListResponseDtoFromJSON(jsonValue));
    }

    /**
     * Get the countries, and the number of alumni working in them.
     */
    async countriesAnalyticsControllerGetCountriesWithAlumniCount(requestParameters: CountriesAnalyticsControllerGetCountriesWithAlumniCountRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CountryListResponseDto> {
        const response = await this.countriesAnalyticsControllerGetCountriesWithAlumniCountRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a course
     */
    async courseControllerCreateRaw(requestParameters: CourseControllerCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CourseExtended>> {
        if (requestParameters['createCourseDto'] == null) {
            throw new runtime.RequiredError(
                'createCourseDto',
                'Required parameter "createCourseDto" was null or undefined when calling courseControllerCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/course`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateCourseDtoToJSON(requestParameters['createCourseDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CourseExtendedFromJSON(jsonValue));
    }

    /**
     * Create a course
     */
    async courseControllerCreate(requestParameters: CourseControllerCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CourseExtended> {
        const response = await this.courseControllerCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get courses
     */
    async courseControllerFindRaw(requestParameters: CourseControllerFindRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<CourseExtended>>> {
        const queryParameters: any = {};

        if (requestParameters['courseIds'] != null) {
            queryParameters['courseIds'] = requestParameters['courseIds'];
        }

        if (requestParameters['facultyIds'] != null) {
            queryParameters['facultyIds'] = requestParameters['facultyIds'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/course`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CourseExtendedFromJSON));
    }

    /**
     * Get courses
     */
    async courseControllerFind(requestParameters: CourseControllerFindRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<CourseExtended>> {
        const response = await this.courseControllerFindRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a course by id
     */
    async courseControllerFindOneRaw(requestParameters: CourseControllerFindOneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CourseExtended>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling courseControllerFindOne().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/course/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CourseExtendedFromJSON(jsonValue));
    }

    /**
     * Get a course by id
     */
    async courseControllerFindOne(requestParameters: CourseControllerFindOneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CourseExtended> {
        const response = await this.courseControllerFindOneRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a faculty
     */
    async facultyControllerCreateRaw(requestParameters: FacultyControllerCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Faculty>> {
        if (requestParameters['addFacultyDto'] == null) {
            throw new runtime.RequiredError(
                'addFacultyDto',
                'Required parameter "addFacultyDto" was null or undefined when calling facultyControllerCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/faculty`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AddFacultyDtoToJSON(requestParameters['addFacultyDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FacultyFromJSON(jsonValue));
    }

    /**
     * Create a faculty
     */
    async facultyControllerCreate(requestParameters: FacultyControllerCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Faculty> {
        const response = await this.facultyControllerCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all faculties
     */
    async facultyControllerFindAllRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Faculty>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/faculty`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(FacultyFromJSON));
    }

    /**
     * Get all faculties
     */
    async facultyControllerFindAll(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Faculty>> {
        const response = await this.facultyControllerFindAllRaw(initOverrides);
        return await response.value();
    }

    /**
     * Upload a file
     */
    async fileUploadControllerCreateRaw(requestParameters: FileUploadControllerCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters['uploadExtractionDto'] == null) {
            throw new runtime.RequiredError(
                'uploadExtractionDto',
                'Required parameter "uploadExtractionDto" was null or undefined when calling fileUploadControllerCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/files`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UploadExtractionDtoToJSON(requestParameters['uploadExtractionDto']),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Upload a file
     */
    async fileUploadControllerCreate(requestParameters: FileUploadControllerCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.fileUploadControllerCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a list of industries with their id and name.
     * List of possible industries to search for.
     */
    async industriesAnalyticsControllerGetIndustryOptionsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<IndustryOptionDto>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/analytics/industries/options`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(IndustryOptionDtoFromJSON));
    }

    /**
     * Returns a list of industries with their id and name.
     * List of possible industries to search for.
     */
    async industriesAnalyticsControllerGetIndustryOptions(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<IndustryOptionDto>> {
        const response = await this.industriesAnalyticsControllerGetIndustryOptionsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Returns the number of alumni working in companies grouped by industry.
     */
    async industriesAnalyticsControllerGetIndustryWithCountsRaw(requestParameters: IndustriesAnalyticsControllerGetIndustryWithCountsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IndustryListResponseDto>> {
        const queryParameters: any = {};

        if (requestParameters['startDate'] != null) {
            queryParameters['startDate'] = requestParameters['startDate'];
        }

        if (requestParameters['endDate'] != null) {
            queryParameters['endDate'] = requestParameters['endDate'];
        }

        if (requestParameters['courseIds'] != null) {
            queryParameters['courseIds'] = requestParameters['courseIds'];
        }

        if (requestParameters['graduationYears'] != null) {
            queryParameters['graduationYears'] = requestParameters['graduationYears'];
        }

        if (requestParameters['companyIds'] != null) {
            queryParameters['companyIds'] = requestParameters['companyIds'];
        }

        if (requestParameters['industryIds'] != null) {
            queryParameters['industryIds'] = requestParameters['industryIds'];
        }

        if (requestParameters['countries'] != null) {
            queryParameters['countries'] = requestParameters['countries'];
        }

        if (requestParameters['cityIds'] != null) {
            queryParameters['cityIds'] = requestParameters['cityIds'];
        }

        if (requestParameters['currentRolesOnly'] != null) {
            queryParameters['currentRolesOnly'] = requestParameters['currentRolesOnly'];
        }

        if (requestParameters['onlyInternational'] != null) {
            queryParameters['onlyInternational'] = requestParameters['onlyInternational'];
        }

        if (requestParameters['excludeResearchAndHighEducation'] != null) {
            queryParameters['excludeResearchAndHighEducation'] = requestParameters['excludeResearchAndHighEducation'];
        }

        if (requestParameters['companySearch'] != null) {
            queryParameters['companySearch'] = requestParameters['companySearch'];
        }

        if (requestParameters['industrySearch'] != null) {
            queryParameters['industrySearch'] = requestParameters['industrySearch'];
        }

        if (requestParameters['companySize'] != null) {
            queryParameters['companySize'] = requestParameters['companySize'];
        }

        if (requestParameters['companyType'] != null) {
            queryParameters['companyType'] = requestParameters['companyType'];
        }

        if (requestParameters['escoCodes'] != null) {
            queryParameters['escoCodes'] = requestParameters['escoCodes'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['search'] != null) {
            queryParameters['search'] = requestParameters['search'];
        }

        if (requestParameters['sortBy'] != null) {
            queryParameters['sortBy'] = requestParameters['sortBy'];
        }

        if (requestParameters['sortOrder'] != null) {
            queryParameters['sortOrder'] = requestParameters['sortOrder'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/analytics/industries`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IndustryListResponseDtoFromJSON(jsonValue));
    }

    /**
     * Returns the number of alumni working in companies grouped by industry.
     */
    async industriesAnalyticsControllerGetIndustryWithCounts(requestParameters: IndustriesAnalyticsControllerGetIndustryWithCountsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IndustryListResponseDto> {
        const response = await this.industriesAnalyticsControllerGetIndustryWithCountsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a new review
     */
    async reviewControllerCreateRaw(requestParameters: ReviewControllerCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['createReviewDto'] == null) {
            throw new runtime.RequiredError(
                'createReviewDto',
                'Required parameter "createReviewDto" was null or undefined when calling reviewControllerCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/reviews`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateReviewDtoToJSON(requestParameters['createReviewDto']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Create a new review
     */
    async reviewControllerCreate(requestParameters: ReviewControllerCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.reviewControllerCreateRaw(requestParameters, initOverrides);
    }

    /**
     * Get all the review to be displayed on the map
     */
    async reviewControllerFindAllGeoJSONRaw(requestParameters: ReviewControllerFindAllGeoJSONRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReviewGeoJSONFeatureCollection>> {
        if (requestParameters['groupBy'] == null) {
            throw new runtime.RequiredError(
                'groupBy',
                'Required parameter "groupBy" was null or undefined when calling reviewControllerFindAllGeoJSON().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['groupBy'] != null) {
            queryParameters['groupBy'] = requestParameters['groupBy'];
        }

        if (requestParameters['reviewType'] != null) {
            queryParameters['reviewType'] = requestParameters['reviewType'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/reviews/geoJSON`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReviewGeoJSONFeatureCollectionFromJSON(jsonValue));
    }

    /**
     * Get all the review to be displayed on the map
     */
    async reviewControllerFindAllGeoJSON(requestParameters: ReviewControllerFindAllGeoJSONRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReviewGeoJSONFeatureCollection> {
        const response = await this.reviewControllerFindAllGeoJSONRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a list of roles with their ESCO code and title.
     * List of possible role titles to search for.
     */
    async roleAnalyticsControllerGetRoleOptionsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<RoleOptionDto>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/analytics/roles/options`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(RoleOptionDtoFromJSON));
    }

    /**
     * Returns a list of roles with their ESCO code and title.
     * List of possible role titles to search for.
     */
    async roleAnalyticsControllerGetRoleOptions(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<RoleOptionDto>> {
        const response = await this.roleAnalyticsControllerGetRoleOptionsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Returns the number of roles classified with each ESCO classification
     */
    async roleAnalyticsControllerGetRolesRaw(requestParameters: RoleAnalyticsControllerGetRolesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RoleListResponseDto>> {
        const queryParameters: any = {};

        if (requestParameters['startDate'] != null) {
            queryParameters['startDate'] = requestParameters['startDate'];
        }

        if (requestParameters['endDate'] != null) {
            queryParameters['endDate'] = requestParameters['endDate'];
        }

        if (requestParameters['courseIds'] != null) {
            queryParameters['courseIds'] = requestParameters['courseIds'];
        }

        if (requestParameters['graduationYears'] != null) {
            queryParameters['graduationYears'] = requestParameters['graduationYears'];
        }

        if (requestParameters['companyIds'] != null) {
            queryParameters['companyIds'] = requestParameters['companyIds'];
        }

        if (requestParameters['industryIds'] != null) {
            queryParameters['industryIds'] = requestParameters['industryIds'];
        }

        if (requestParameters['countries'] != null) {
            queryParameters['countries'] = requestParameters['countries'];
        }

        if (requestParameters['cityIds'] != null) {
            queryParameters['cityIds'] = requestParameters['cityIds'];
        }

        if (requestParameters['currentRolesOnly'] != null) {
            queryParameters['currentRolesOnly'] = requestParameters['currentRolesOnly'];
        }

        if (requestParameters['onlyInternational'] != null) {
            queryParameters['onlyInternational'] = requestParameters['onlyInternational'];
        }

        if (requestParameters['excludeResearchAndHighEducation'] != null) {
            queryParameters['excludeResearchAndHighEducation'] = requestParameters['excludeResearchAndHighEducation'];
        }

        if (requestParameters['companySearch'] != null) {
            queryParameters['companySearch'] = requestParameters['companySearch'];
        }

        if (requestParameters['industrySearch'] != null) {
            queryParameters['industrySearch'] = requestParameters['industrySearch'];
        }

        if (requestParameters['companySize'] != null) {
            queryParameters['companySize'] = requestParameters['companySize'];
        }

        if (requestParameters['companyType'] != null) {
            queryParameters['companyType'] = requestParameters['companyType'];
        }

        if (requestParameters['escoCodes'] != null) {
            queryParameters['escoCodes'] = requestParameters['escoCodes'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['search'] != null) {
            queryParameters['search'] = requestParameters['search'];
        }

        if (requestParameters['sortBy'] != null) {
            queryParameters['sortBy'] = requestParameters['sortBy'];
        }

        if (requestParameters['sortOrder'] != null) {
            queryParameters['sortOrder'] = requestParameters['sortOrder'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/analytics/roles`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RoleListResponseDtoFromJSON(jsonValue));
    }

    /**
     * Returns the number of roles classified with each ESCO classification
     */
    async roleAnalyticsControllerGetRoles(requestParameters: RoleAnalyticsControllerGetRolesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RoleListResponseDto> {
        const response = await this.roleAnalyticsControllerGetRolesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Authenticate a user with LinkedIn
     */
    async userControllerLinkedinAuthRaw(requestParameters: UserControllerLinkedinAuthRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserAuthResponse>> {
        if (requestParameters['linkedinAuthDto'] == null) {
            throw new runtime.RequiredError(
                'linkedinAuthDto',
                'Required parameter "linkedinAuthDto" was null or undefined when calling userControllerLinkedinAuth().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/user/linkedinAuth`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LinkedinAuthDtoToJSON(requestParameters['linkedinAuthDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserAuthResponseFromJSON(jsonValue));
    }

    /**
     * Authenticate a user with LinkedIn
     */
    async userControllerLinkedinAuth(requestParameters: UserControllerLinkedinAuthRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserAuthResponse> {
        const response = await this.userControllerLinkedinAuthRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Confirm the LinkedIn profile and generate a JWT token
     */
    async userControllerLinkedinConfirmRaw(requestParameters: UserControllerLinkedinConfirmRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserAuthResponse>> {
        if (requestParameters['linkedinAuthDto'] == null) {
            throw new runtime.RequiredError(
                'linkedinAuthDto',
                'Required parameter "linkedinAuthDto" was null or undefined when calling userControllerLinkedinConfirm().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/user/linkedin-confirm`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LinkedinAuthDtoToJSON(requestParameters['linkedinAuthDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserAuthResponseFromJSON(jsonValue));
    }

    /**
     * Confirm the LinkedIn profile and generate a JWT token
     */
    async userControllerLinkedinConfirm(requestParameters: UserControllerLinkedinConfirmRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserAuthResponse> {
        const response = await this.userControllerLinkedinConfirmRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Verify the email of the alumni by generating a token and sending it to the email
     */
    async userControllerVerifyEmailRaw(requestParameters: UserControllerVerifyEmailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['verifyEmailDto'] == null) {
            throw new runtime.RequiredError(
                'verifyEmailDto',
                'Required parameter "verifyEmailDto" was null or undefined when calling userControllerVerifyEmail().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/user/verify-email`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: VerifyEmailDtoToJSON(requestParameters['verifyEmailDto']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Verify the email of the alumni by generating a token and sending it to the email
     */
    async userControllerVerifyEmail(requestParameters: UserControllerVerifyEmailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.userControllerVerifyEmailRaw(requestParameters, initOverrides);
    }

    /**
     * Validate the token against the email
     */
    async userControllerVerifyEmailTokenRaw(requestParameters: UserControllerVerifyEmailTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['verifyEmailTokenDto'] == null) {
            throw new runtime.RequiredError(
                'verifyEmailTokenDto',
                'Required parameter "verifyEmailTokenDto" was null or undefined when calling userControllerVerifyEmailToken().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/user/verify-email/token`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: VerifyEmailTokenDtoToJSON(requestParameters['verifyEmailTokenDto']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Validate the token against the email
     */
    async userControllerVerifyEmailToken(requestParameters: UserControllerVerifyEmailTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.userControllerVerifyEmailTokenRaw(requestParameters, initOverrides);
    }

}

/**
 * @export
 */
export const AlumniControllerFindAllGeoJSONGroupByEnum = {
    Countries: 'countries',
    Cities: 'cities'
} as const;
export type AlumniControllerFindAllGeoJSONGroupByEnum = typeof AlumniControllerFindAllGeoJSONGroupByEnum[keyof typeof AlumniControllerFindAllGeoJSONGroupByEnum];
/**
 * @export
 */
export const CompaniesAnalyticsControllerGetCompaniesWithAlumniCountCompanySizeEnum = {
    A: 'A',
    B: 'B',
    C: 'C',
    D: 'D',
    E: 'E',
    F: 'F',
    G: 'G',
    H: 'H',
    I: 'I'
} as const;
export type CompaniesAnalyticsControllerGetCompaniesWithAlumniCountCompanySizeEnum = typeof CompaniesAnalyticsControllerGetCompaniesWithAlumniCountCompanySizeEnum[keyof typeof CompaniesAnalyticsControllerGetCompaniesWithAlumniCountCompanySizeEnum];
/**
 * @export
 */
export const CompaniesAnalyticsControllerGetCompaniesWithAlumniCountCompanyTypeEnum = {
    Educational: 'EDUCATIONAL',
    GovernmentAgency: 'GOVERNMENT_AGENCY',
    NonProfit: 'NON_PROFIT',
    Partnership: 'PARTNERSHIP',
    PrivatelyHeld: 'PRIVATELY_HELD',
    PublicCompany: 'PUBLIC_COMPANY',
    SelfEmployed: 'SELF_EMPLOYED',
    SelfOwned: 'SELF_OWNED'
} as const;
export type CompaniesAnalyticsControllerGetCompaniesWithAlumniCountCompanyTypeEnum = typeof CompaniesAnalyticsControllerGetCompaniesWithAlumniCountCompanyTypeEnum[keyof typeof CompaniesAnalyticsControllerGetCompaniesWithAlumniCountCompanyTypeEnum];
/**
 * @export
 */
export const CompaniesAnalyticsControllerGetCompanyDetailsCompanySizeEnum = {
    A: 'A',
    B: 'B',
    C: 'C',
    D: 'D',
    E: 'E',
    F: 'F',
    G: 'G',
    H: 'H',
    I: 'I'
} as const;
export type CompaniesAnalyticsControllerGetCompanyDetailsCompanySizeEnum = typeof CompaniesAnalyticsControllerGetCompanyDetailsCompanySizeEnum[keyof typeof CompaniesAnalyticsControllerGetCompanyDetailsCompanySizeEnum];
/**
 * @export
 */
export const CompaniesAnalyticsControllerGetCompanyDetailsCompanyTypeEnum = {
    Educational: 'EDUCATIONAL',
    GovernmentAgency: 'GOVERNMENT_AGENCY',
    NonProfit: 'NON_PROFIT',
    Partnership: 'PARTNERSHIP',
    PrivatelyHeld: 'PRIVATELY_HELD',
    PublicCompany: 'PUBLIC_COMPANY',
    SelfEmployed: 'SELF_EMPLOYED',
    SelfOwned: 'SELF_OWNED'
} as const;
export type CompaniesAnalyticsControllerGetCompanyDetailsCompanyTypeEnum = typeof CompaniesAnalyticsControllerGetCompanyDetailsCompanyTypeEnum[keyof typeof CompaniesAnalyticsControllerGetCompanyDetailsCompanyTypeEnum];
/**
 * @export
 */
export const CompaniesAnalyticsControllerGetHotCompaniesCompanySizeEnum = {
    A: 'A',
    B: 'B',
    C: 'C',
    D: 'D',
    E: 'E',
    F: 'F',
    G: 'G',
    H: 'H',
    I: 'I'
} as const;
export type CompaniesAnalyticsControllerGetHotCompaniesCompanySizeEnum = typeof CompaniesAnalyticsControllerGetHotCompaniesCompanySizeEnum[keyof typeof CompaniesAnalyticsControllerGetHotCompaniesCompanySizeEnum];
/**
 * @export
 */
export const CompaniesAnalyticsControllerGetHotCompaniesCompanyTypeEnum = {
    Educational: 'EDUCATIONAL',
    GovernmentAgency: 'GOVERNMENT_AGENCY',
    NonProfit: 'NON_PROFIT',
    Partnership: 'PARTNERSHIP',
    PrivatelyHeld: 'PRIVATELY_HELD',
    PublicCompany: 'PUBLIC_COMPANY',
    SelfEmployed: 'SELF_EMPLOYED',
    SelfOwned: 'SELF_OWNED'
} as const;
export type CompaniesAnalyticsControllerGetHotCompaniesCompanyTypeEnum = typeof CompaniesAnalyticsControllerGetHotCompaniesCompanyTypeEnum[keyof typeof CompaniesAnalyticsControllerGetHotCompaniesCompanyTypeEnum];
/**
 * @export
 */
export const CountriesAnalyticsControllerGetCountriesWithAlumniCountCompanySizeEnum = {
    A: 'A',
    B: 'B',
    C: 'C',
    D: 'D',
    E: 'E',
    F: 'F',
    G: 'G',
    H: 'H',
    I: 'I'
} as const;
export type CountriesAnalyticsControllerGetCountriesWithAlumniCountCompanySizeEnum = typeof CountriesAnalyticsControllerGetCountriesWithAlumniCountCompanySizeEnum[keyof typeof CountriesAnalyticsControllerGetCountriesWithAlumniCountCompanySizeEnum];
/**
 * @export
 */
export const CountriesAnalyticsControllerGetCountriesWithAlumniCountCompanyTypeEnum = {
    Educational: 'EDUCATIONAL',
    GovernmentAgency: 'GOVERNMENT_AGENCY',
    NonProfit: 'NON_PROFIT',
    Partnership: 'PARTNERSHIP',
    PrivatelyHeld: 'PRIVATELY_HELD',
    PublicCompany: 'PUBLIC_COMPANY',
    SelfEmployed: 'SELF_EMPLOYED',
    SelfOwned: 'SELF_OWNED'
} as const;
export type CountriesAnalyticsControllerGetCountriesWithAlumniCountCompanyTypeEnum = typeof CountriesAnalyticsControllerGetCountriesWithAlumniCountCompanyTypeEnum[keyof typeof CountriesAnalyticsControllerGetCountriesWithAlumniCountCompanyTypeEnum];
/**
 * @export
 */
export const IndustriesAnalyticsControllerGetIndustryWithCountsCompanySizeEnum = {
    A: 'A',
    B: 'B',
    C: 'C',
    D: 'D',
    E: 'E',
    F: 'F',
    G: 'G',
    H: 'H',
    I: 'I'
} as const;
export type IndustriesAnalyticsControllerGetIndustryWithCountsCompanySizeEnum = typeof IndustriesAnalyticsControllerGetIndustryWithCountsCompanySizeEnum[keyof typeof IndustriesAnalyticsControllerGetIndustryWithCountsCompanySizeEnum];
/**
 * @export
 */
export const IndustriesAnalyticsControllerGetIndustryWithCountsCompanyTypeEnum = {
    Educational: 'EDUCATIONAL',
    GovernmentAgency: 'GOVERNMENT_AGENCY',
    NonProfit: 'NON_PROFIT',
    Partnership: 'PARTNERSHIP',
    PrivatelyHeld: 'PRIVATELY_HELD',
    PublicCompany: 'PUBLIC_COMPANY',
    SelfEmployed: 'SELF_EMPLOYED',
    SelfOwned: 'SELF_OWNED'
} as const;
export type IndustriesAnalyticsControllerGetIndustryWithCountsCompanyTypeEnum = typeof IndustriesAnalyticsControllerGetIndustryWithCountsCompanyTypeEnum[keyof typeof IndustriesAnalyticsControllerGetIndustryWithCountsCompanyTypeEnum];
/**
 * @export
 */
export const ReviewControllerFindAllGeoJSONGroupByEnum = {
    Countries: 'countries',
    Cities: 'cities'
} as const;
export type ReviewControllerFindAllGeoJSONGroupByEnum = typeof ReviewControllerFindAllGeoJSONGroupByEnum[keyof typeof ReviewControllerFindAllGeoJSONGroupByEnum];
/**
 * @export
 */
export const RoleAnalyticsControllerGetRolesCompanySizeEnum = {
    A: 'A',
    B: 'B',
    C: 'C',
    D: 'D',
    E: 'E',
    F: 'F',
    G: 'G',
    H: 'H',
    I: 'I'
} as const;
export type RoleAnalyticsControllerGetRolesCompanySizeEnum = typeof RoleAnalyticsControllerGetRolesCompanySizeEnum[keyof typeof RoleAnalyticsControllerGetRolesCompanySizeEnum];
/**
 * @export
 */
export const RoleAnalyticsControllerGetRolesCompanyTypeEnum = {
    Educational: 'EDUCATIONAL',
    GovernmentAgency: 'GOVERNMENT_AGENCY',
    NonProfit: 'NON_PROFIT',
    Partnership: 'PARTNERSHIP',
    PrivatelyHeld: 'PRIVATELY_HELD',
    PublicCompany: 'PUBLIC_COMPANY',
    SelfEmployed: 'SELF_EMPLOYED',
    SelfOwned: 'SELF_OWNED'
} as const;
export type RoleAnalyticsControllerGetRolesCompanyTypeEnum = typeof RoleAnalyticsControllerGetRolesCompanyTypeEnum[keyof typeof RoleAnalyticsControllerGetRolesCompanyTypeEnum];
