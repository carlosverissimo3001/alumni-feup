/* tslint:disable */
/* eslint-disable */
/**
 * API
 * API description
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Alumni,
  AlumniExtended,
  AlumniListResponseDto,
  AlumniOptionDto,
  AlumniPastLocationsAndCompaniesDto,
  BasicAlumniProfileDto,
  ChangeReviewScoreDto,
  CheckPermissionDto,
  CheckPermissionResponse,
  CityListResponseDto,
  CityOptionDto,
  CompanyInsightsDto,
  CompanyListResponseDto,
  CompanyOptionDto,
  CountryListResponseDto,
  CountryOptionDto,
  CourseAnalyticsEntity,
  CreateAlumniDto,
  CreateCourseDto,
  CreateFacultyDto,
  CreateReviewDto,
  DeleteUserDto,
  EscoClassificationDto,
  Faculty,
  FacultyListDto,
  GeoJSONFeatureCollection,
  GraduationListDto,
  IndustryListResponseDto,
  IndustryOptionDto,
  LinkedinAuthDto,
  MajorListDto,
  MarkAsReviewedDto,
  ReviewGeoJSONFeatureCollection,
  RoleListResponseDto,
  RoleOptionDto,
  SendFeedbackDto,
  UploadExtractionDto,
  UserAuthResponse,
  VerifyEmailDto,
  VerifyEmailTokenDto,
} from '../models/index';
import {
    AlumniFromJSON,
    AlumniToJSON,
    AlumniExtendedFromJSON,
    AlumniExtendedToJSON,
    AlumniListResponseDtoFromJSON,
    AlumniListResponseDtoToJSON,
    AlumniOptionDtoFromJSON,
    AlumniOptionDtoToJSON,
    AlumniPastLocationsAndCompaniesDtoFromJSON,
    AlumniPastLocationsAndCompaniesDtoToJSON,
    BasicAlumniProfileDtoFromJSON,
    BasicAlumniProfileDtoToJSON,
    ChangeReviewScoreDtoFromJSON,
    ChangeReviewScoreDtoToJSON,
    CheckPermissionDtoFromJSON,
    CheckPermissionDtoToJSON,
    CheckPermissionResponseFromJSON,
    CheckPermissionResponseToJSON,
    CityListResponseDtoFromJSON,
    CityListResponseDtoToJSON,
    CityOptionDtoFromJSON,
    CityOptionDtoToJSON,
    CompanyInsightsDtoFromJSON,
    CompanyInsightsDtoToJSON,
    CompanyListResponseDtoFromJSON,
    CompanyListResponseDtoToJSON,
    CompanyOptionDtoFromJSON,
    CompanyOptionDtoToJSON,
    CountryListResponseDtoFromJSON,
    CountryListResponseDtoToJSON,
    CountryOptionDtoFromJSON,
    CountryOptionDtoToJSON,
    CourseAnalyticsEntityFromJSON,
    CourseAnalyticsEntityToJSON,
    CreateAlumniDtoFromJSON,
    CreateAlumniDtoToJSON,
    CreateCourseDtoFromJSON,
    CreateCourseDtoToJSON,
    CreateFacultyDtoFromJSON,
    CreateFacultyDtoToJSON,
    CreateReviewDtoFromJSON,
    CreateReviewDtoToJSON,
    DeleteUserDtoFromJSON,
    DeleteUserDtoToJSON,
    EscoClassificationDtoFromJSON,
    EscoClassificationDtoToJSON,
    FacultyFromJSON,
    FacultyToJSON,
    FacultyListDtoFromJSON,
    FacultyListDtoToJSON,
    GeoJSONFeatureCollectionFromJSON,
    GeoJSONFeatureCollectionToJSON,
    GraduationListDtoFromJSON,
    GraduationListDtoToJSON,
    IndustryListResponseDtoFromJSON,
    IndustryListResponseDtoToJSON,
    IndustryOptionDtoFromJSON,
    IndustryOptionDtoToJSON,
    LinkedinAuthDtoFromJSON,
    LinkedinAuthDtoToJSON,
    MajorListDtoFromJSON,
    MajorListDtoToJSON,
    MarkAsReviewedDtoFromJSON,
    MarkAsReviewedDtoToJSON,
    ReviewGeoJSONFeatureCollectionFromJSON,
    ReviewGeoJSONFeatureCollectionToJSON,
    RoleListResponseDtoFromJSON,
    RoleListResponseDtoToJSON,
    RoleOptionDtoFromJSON,
    RoleOptionDtoToJSON,
    SendFeedbackDtoFromJSON,
    SendFeedbackDtoToJSON,
    UploadExtractionDtoFromJSON,
    UploadExtractionDtoToJSON,
    UserAuthResponseFromJSON,
    UserAuthResponseToJSON,
    VerifyEmailDtoFromJSON,
    VerifyEmailDtoToJSON,
    VerifyEmailTokenDtoFromJSON,
    VerifyEmailTokenDtoToJSON,
} from '../models/index';

export interface AlumniAnalyticsControllerGetAlumniListRequest {
    includeTrend: boolean;
    alumniIds?: Array<string>;
    startDate?: string;
    endDate?: string;
    facultyIds?: Array<string>;
    courseIds?: Array<string>;
    graduationYears?: Array<string>;
    companyIds?: Array<string>;
    industryIds?: Array<string>;
    roleCountryCodes?: Array<string>;
    roleCityIds?: Array<string>;
    companyHQsCountryCodes?: Array<string>;
    companyHQsCityIds?: Array<string>;
    currentRolesOnly?: boolean;
    onlyCompaniesWithSalaryData?: boolean;
    onlyInternational?: boolean;
    excludeResearchAndHighEducation?: boolean;
    alumniSearch?: string;
    companySize?: Array<AlumniAnalyticsControllerGetAlumniListCompanySizeEnum>;
    companyType?: Array<AlumniAnalyticsControllerGetAlumniListCompanyTypeEnum>;
    escoCodes?: Array<string>;
    escoClassificationLevel?: number;
    limit?: number;
    offset?: number;
    search?: string;
    sortBy?: AlumniAnalyticsControllerGetAlumniListSortByEnum;
    sortOrder?: string;
}

export interface AlumniControllerCreateRequest {
    createAlumniDto: CreateAlumniDto;
}

export interface AlumniControllerFindAllGeoJSONRequest {
    groupBy: AlumniControllerFindAllGeoJSONGroupByEnum;
    courseIds?: Array<string>;
    conclusionYears?: Array<string>;
    selectedYear?: number;
    compareYear?: number;
}

export interface AlumniControllerFindOneRequest {
    id: string;
}

export interface AlumniControllerGetBasicProfileRequest {
    id: string;
}

export interface AlumniControllerGetPastLocationsAndCompaniesRequest {
    id: string;
}

export interface AlumniControllerMarkAsReviewedRequest {
    markAsReviewedDto: MarkAsReviewedDto;
}

export interface CompanyAnalyticsControllerGetCompaniesWithAlumniCountRequest {
    includeTrend: boolean;
    alumniIds?: Array<string>;
    startDate?: string;
    endDate?: string;
    facultyIds?: Array<string>;
    courseIds?: Array<string>;
    graduationYears?: Array<string>;
    companyIds?: Array<string>;
    industryIds?: Array<string>;
    roleCountryCodes?: Array<string>;
    roleCityIds?: Array<string>;
    companyHQsCountryCodes?: Array<string>;
    companyHQsCityIds?: Array<string>;
    currentRolesOnly?: boolean;
    onlyCompaniesWithSalaryData?: boolean;
    onlyInternational?: boolean;
    excludeResearchAndHighEducation?: boolean;
    alumniSearch?: string;
    companySize?: Array<CompanyAnalyticsControllerGetCompaniesWithAlumniCountCompanySizeEnum>;
    companyType?: Array<CompanyAnalyticsControllerGetCompaniesWithAlumniCountCompanyTypeEnum>;
    escoCodes?: Array<string>;
    escoClassificationLevel?: number;
    limit?: number;
    offset?: number;
    search?: string;
    sortBy?: CompanyAnalyticsControllerGetCompaniesWithAlumniCountSortByEnum;
    sortOrder?: string;
}

export interface CompanyAnalyticsControllerGetCompanyDetailsRequest {
    id: string;
}

export interface CompanyControllerFindOneRequest {
    id: string;
}

export interface CourseControllerCreateRequest {
    createCourseDto: CreateCourseDto;
}

export interface CourseControllerFindRequest {
    courseIds?: Array<string>;
    facultyIds?: Array<string>;
}

export interface CourseControllerFindOneRequest {
    id: string;
}

export interface EducationAnalyticsControllerGetFacultiesRequest {
    includeTrend: boolean;
    alumniIds?: Array<string>;
    startDate?: string;
    endDate?: string;
    facultyIds?: Array<string>;
    courseIds?: Array<string>;
    graduationYears?: Array<string>;
    companyIds?: Array<string>;
    industryIds?: Array<string>;
    roleCountryCodes?: Array<string>;
    roleCityIds?: Array<string>;
    companyHQsCountryCodes?: Array<string>;
    companyHQsCityIds?: Array<string>;
    currentRolesOnly?: boolean;
    onlyCompaniesWithSalaryData?: boolean;
    onlyInternational?: boolean;
    excludeResearchAndHighEducation?: boolean;
    alumniSearch?: string;
    companySize?: Array<EducationAnalyticsControllerGetFacultiesCompanySizeEnum>;
    companyType?: Array<EducationAnalyticsControllerGetFacultiesCompanyTypeEnum>;
    escoCodes?: Array<string>;
    escoClassificationLevel?: number;
    limit?: number;
    offset?: number;
    search?: string;
    sortBy?: EducationAnalyticsControllerGetFacultiesSortByEnum;
    sortOrder?: string;
}

export interface EducationAnalyticsControllerGetGraduationsRequest {
    includeTrend: boolean;
    alumniIds?: Array<string>;
    startDate?: string;
    endDate?: string;
    facultyIds?: Array<string>;
    courseIds?: Array<string>;
    graduationYears?: Array<string>;
    companyIds?: Array<string>;
    industryIds?: Array<string>;
    roleCountryCodes?: Array<string>;
    roleCityIds?: Array<string>;
    companyHQsCountryCodes?: Array<string>;
    companyHQsCityIds?: Array<string>;
    currentRolesOnly?: boolean;
    onlyCompaniesWithSalaryData?: boolean;
    onlyInternational?: boolean;
    excludeResearchAndHighEducation?: boolean;
    alumniSearch?: string;
    companySize?: Array<EducationAnalyticsControllerGetGraduationsCompanySizeEnum>;
    companyType?: Array<EducationAnalyticsControllerGetGraduationsCompanyTypeEnum>;
    escoCodes?: Array<string>;
    escoClassificationLevel?: number;
    limit?: number;
    offset?: number;
    search?: string;
    sortBy?: EducationAnalyticsControllerGetGraduationsSortByEnum;
    sortOrder?: string;
}

export interface EducationAnalyticsControllerGetMajorsRequest {
    includeTrend: boolean;
    alumniIds?: Array<string>;
    startDate?: string;
    endDate?: string;
    facultyIds?: Array<string>;
    courseIds?: Array<string>;
    graduationYears?: Array<string>;
    companyIds?: Array<string>;
    industryIds?: Array<string>;
    roleCountryCodes?: Array<string>;
    roleCityIds?: Array<string>;
    companyHQsCountryCodes?: Array<string>;
    companyHQsCityIds?: Array<string>;
    currentRolesOnly?: boolean;
    onlyCompaniesWithSalaryData?: boolean;
    onlyInternational?: boolean;
    excludeResearchAndHighEducation?: boolean;
    alumniSearch?: string;
    companySize?: Array<EducationAnalyticsControllerGetMajorsCompanySizeEnum>;
    companyType?: Array<EducationAnalyticsControllerGetMajorsCompanyTypeEnum>;
    escoCodes?: Array<string>;
    escoClassificationLevel?: number;
    limit?: number;
    offset?: number;
    search?: string;
    sortBy?: EducationAnalyticsControllerGetMajorsSortByEnum;
    sortOrder?: string;
}

export interface FacultyControllerCreateRequest {
    createFacultyDto: CreateFacultyDto;
}

export interface FeedbackControllerCreateRequest {
    sendFeedbackDto: SendFeedbackDto;
}

export interface FileUploadControllerCreateRequest {
    uploadExtractionDto: UploadExtractionDto;
}

export interface GeoAnalyticsControllerGetCitiesOptionsRequest {
    countryCodes?: Array<string>;
}

export interface GeoAnalyticsControllerGetCitiesWithAlumniCountRequest {
    includeTrend: boolean;
    alumniIds?: Array<string>;
    startDate?: string;
    endDate?: string;
    facultyIds?: Array<string>;
    courseIds?: Array<string>;
    graduationYears?: Array<string>;
    companyIds?: Array<string>;
    industryIds?: Array<string>;
    roleCountryCodes?: Array<string>;
    roleCityIds?: Array<string>;
    companyHQsCountryCodes?: Array<string>;
    companyHQsCityIds?: Array<string>;
    currentRolesOnly?: boolean;
    onlyCompaniesWithSalaryData?: boolean;
    onlyInternational?: boolean;
    excludeResearchAndHighEducation?: boolean;
    alumniSearch?: string;
    companySize?: Array<GeoAnalyticsControllerGetCitiesWithAlumniCountCompanySizeEnum>;
    companyType?: Array<GeoAnalyticsControllerGetCitiesWithAlumniCountCompanyTypeEnum>;
    escoCodes?: Array<string>;
    escoClassificationLevel?: number;
    limit?: number;
    offset?: number;
    search?: string;
    sortBy?: GeoAnalyticsControllerGetCitiesWithAlumniCountSortByEnum;
    sortOrder?: string;
}

export interface GeoAnalyticsControllerGetCountriesWithAlumniCountRequest {
    includeTrend: boolean;
    alumniIds?: Array<string>;
    startDate?: string;
    endDate?: string;
    facultyIds?: Array<string>;
    courseIds?: Array<string>;
    graduationYears?: Array<string>;
    companyIds?: Array<string>;
    industryIds?: Array<string>;
    roleCountryCodes?: Array<string>;
    roleCityIds?: Array<string>;
    companyHQsCountryCodes?: Array<string>;
    companyHQsCityIds?: Array<string>;
    currentRolesOnly?: boolean;
    onlyCompaniesWithSalaryData?: boolean;
    onlyInternational?: boolean;
    excludeResearchAndHighEducation?: boolean;
    alumniSearch?: string;
    companySize?: Array<GeoAnalyticsControllerGetCountriesWithAlumniCountCompanySizeEnum>;
    companyType?: Array<GeoAnalyticsControllerGetCountriesWithAlumniCountCompanyTypeEnum>;
    escoCodes?: Array<string>;
    escoClassificationLevel?: number;
    limit?: number;
    offset?: number;
    search?: string;
    sortBy?: GeoAnalyticsControllerGetCountriesWithAlumniCountSortByEnum;
    sortOrder?: string;
}

export interface IndustryAnalyticsControllerGetIndustryWithCountsRequest {
    includeTrend: boolean;
    alumniIds?: Array<string>;
    startDate?: string;
    endDate?: string;
    facultyIds?: Array<string>;
    courseIds?: Array<string>;
    graduationYears?: Array<string>;
    companyIds?: Array<string>;
    industryIds?: Array<string>;
    roleCountryCodes?: Array<string>;
    roleCityIds?: Array<string>;
    companyHQsCountryCodes?: Array<string>;
    companyHQsCityIds?: Array<string>;
    currentRolesOnly?: boolean;
    onlyCompaniesWithSalaryData?: boolean;
    onlyInternational?: boolean;
    excludeResearchAndHighEducation?: boolean;
    alumniSearch?: string;
    companySize?: Array<IndustryAnalyticsControllerGetIndustryWithCountsCompanySizeEnum>;
    companyType?: Array<IndustryAnalyticsControllerGetIndustryWithCountsCompanyTypeEnum>;
    escoCodes?: Array<string>;
    escoClassificationLevel?: number;
    limit?: number;
    offset?: number;
    search?: string;
    sortBy?: IndustryAnalyticsControllerGetIndustryWithCountsSortByEnum;
    sortOrder?: string;
}

export interface ReviewControllerChangeScoreRequest {
    changeReviewScoreDto: ChangeReviewScoreDto;
}

export interface ReviewControllerCreateRequest {
    createReviewDto: CreateReviewDto;
}

export interface ReviewControllerFindAllGeoJSONRequest {
    groupBy: ReviewControllerFindAllGeoJSONGroupByEnum;
    reviewType?: string;
    rating?: number;
    dateFrom?: Date;
    dateTo?: Date;
}

export interface RoleAnalyticsControllerGetRoleHierarchyRequest {
    code: string;
}

export interface RoleAnalyticsControllerGetRolesRequest {
    includeTrend: boolean;
    alumniIds?: Array<string>;
    startDate?: string;
    endDate?: string;
    facultyIds?: Array<string>;
    courseIds?: Array<string>;
    graduationYears?: Array<string>;
    companyIds?: Array<string>;
    industryIds?: Array<string>;
    roleCountryCodes?: Array<string>;
    roleCityIds?: Array<string>;
    companyHQsCountryCodes?: Array<string>;
    companyHQsCityIds?: Array<string>;
    currentRolesOnly?: boolean;
    onlyCompaniesWithSalaryData?: boolean;
    onlyInternational?: boolean;
    excludeResearchAndHighEducation?: boolean;
    alumniSearch?: string;
    companySize?: Array<RoleAnalyticsControllerGetRolesCompanySizeEnum>;
    companyType?: Array<RoleAnalyticsControllerGetRolesCompanyTypeEnum>;
    escoCodes?: Array<string>;
    escoClassificationLevel?: number;
    limit?: number;
    offset?: number;
    search?: string;
    sortBy?: RoleAnalyticsControllerGetRolesSortByEnum;
    sortOrder?: string;
}

export interface UserControllerCheckPermissionRequest {
    checkPermissionDto: CheckPermissionDto;
}

export interface UserControllerDeleteUserRequest {
    deleteUserDto: DeleteUserDto;
}

export interface UserControllerLinkedinAuthRequest {
    linkedinAuthDto: LinkedinAuthDto;
}

export interface UserControllerLinkedinConfirmRequest {
    linkedinAuthDto: LinkedinAuthDto;
}

export interface UserControllerVerifyEmailRequest {
    verifyEmailDto: VerifyEmailDto;
}

export interface UserControllerVerifyEmailTokenRequest {
    verifyEmailTokenDto: VerifyEmailTokenDto;
}

/**
 * V1Api - interface
 * 
 * @export
 * @interface V1ApiInterface
 */
export interface V1ApiInterface {
    /**
     * 
     * @summary Get all alumni list
     * @param {boolean} includeTrend Whether to include the trend data
     * @param {Array<string>} [alumniIds] The alumni IDs to filter by
     * @param {string} [startDate] The start date of the role
     * @param {string} [endDate] The end date of the role
     * @param {Array<string>} [facultyIds] The faculty IDs to filter by
     * @param {Array<string>} [courseIds] The course IDs to filter by
     * @param {Array<string>} [graduationYears] The graduation years to filter by
     * @param {Array<string>} [companyIds] The company IDs to filter by
     * @param {Array<string>} [industryIds] The industry IDs to filter by
     * @param {Array<string>} [roleCountryCodes] The country codes where alumni exerced their roles
     * @param {Array<string>} [roleCityIds] The city IDS where alumni exerced their roles
     * @param {Array<string>} [companyHQsCountryCodes] The company HQs country codes to filter by
     * @param {Array<string>} [companyHQsCityIds] The company HQs city ids to filter by
     * @param {boolean} [currentRolesOnly] Filter for current roles only
     * @param {boolean} [onlyCompaniesWithSalaryData] Include only companies with salary data
     * @param {boolean} [onlyInternational] Whether to exclude roles in Portugal
     * @param {boolean} [excludeResearchAndHighEducation] Exclude research and high education roles
     * @param {string} [alumniSearch] Search query for companies
     * @param {Array<'A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I'>} [companySize] The company sizes to filter by
     * @param {Array<'EDUCATIONAL' | 'GOVERNMENT_AGENCY' | 'NON_PROFIT' | 'PARTNERSHIP' | 'PRIVATELY_HELD' | 'PUBLIC_COMPANY' | 'SELF_EMPLOYED' | 'SELF_OWNED'>} [companyType] The company types to filter by
     * @param {Array<string>} [escoCodes] The ESCO codes to filter by
     * @param {number} [escoClassificationLevel] The ESCO classification level to filter by
     * @param {number} [limit] The number of results to return
     * @param {number} [offset] The offset of the query
     * @param {string} [search] Broad search query
     * @param {'count' | 'name' | 'year'} [sortBy] How to sort the results
     * @param {string} [sortOrder] The order of the results
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    alumniAnalyticsControllerGetAlumniListRaw(requestParameters: AlumniAnalyticsControllerGetAlumniListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AlumniListResponseDto>>;

    /**
     * Get all alumni list
     */
    alumniAnalyticsControllerGetAlumniList(requestParameters: AlumniAnalyticsControllerGetAlumniListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AlumniListResponseDto>;

    /**
     * 
     * @summary Get all alumni options
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    alumniAnalyticsControllerGetAlumniOptionsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<AlumniOptionDto>>>;

    /**
     * Get all alumni options
     */
    alumniAnalyticsControllerGetAlumniOptions(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<AlumniOptionDto>>;

    /**
     * 
     * @summary Create a new alumni
     * @param {CreateAlumniDto} createAlumniDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    alumniControllerCreateRaw(requestParameters: AlumniControllerCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Alumni>>;

    /**
     * Create a new alumni
     */
    alumniControllerCreate(requestParameters: AlumniControllerCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Alumni>;

    /**
     * 
     * @summary Get all alumni, enriched with location, graduations and roles
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    alumniControllerFindAllRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Alumni>>>;

    /**
     * Get all alumni, enriched with location, graduations and roles
     */
    alumniControllerFindAll(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Alumni>>;

    /**
     * 
     * @summary Get all alumni to be displayed in the map
     * @param {'countries' | 'cities'} groupBy How to group the data
     * @param {Array<string>} [courseIds] The ID(s) of the course(s)
     * @param {Array<string>} [conclusionYears] The year(s) of conclusion(s)
     * @param {number} [selectedYear] The selected year
     * @param {number} [compareYear] The year to compare to
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    alumniControllerFindAllGeoJSONRaw(requestParameters: AlumniControllerFindAllGeoJSONRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GeoJSONFeatureCollection>>;

    /**
     * Get all alumni to be displayed in the map
     */
    alumniControllerFindAllGeoJSON(requestParameters: AlumniControllerFindAllGeoJSONRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GeoJSONFeatureCollection>;

    /**
     * 
     * @summary Get alumni by id, enriched with location, graduations and roles
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    alumniControllerFindOneRaw(requestParameters: AlumniControllerFindOneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Alumni>>;

    /**
     * Get alumni by id, enriched with location, graduations and roles
     */
    alumniControllerFindOne(requestParameters: AlumniControllerFindOneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Alumni>;

    /**
     * 
     * @summary Get all alumni submissions that need to be reviewed
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    alumniControllerGetAlumniToReviewRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<AlumniExtended>>>;

    /**
     * Get all alumni submissions that need to be reviewed
     */
    alumniControllerGetAlumniToReview(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<AlumniExtended>>;

    /**
     * 
     * @summary Get basic profile of an alumni
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    alumniControllerGetBasicProfileRaw(requestParameters: AlumniControllerGetBasicProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BasicAlumniProfileDto>>;

    /**
     * Get basic profile of an alumni
     */
    alumniControllerGetBasicProfile(requestParameters: AlumniControllerGetBasicProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BasicAlumniProfileDto>;

    /**
     * 
     * @summary Get the past locations and companies of an alumni
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    alumniControllerGetPastLocationsAndCompaniesRaw(requestParameters: AlumniControllerGetPastLocationsAndCompaniesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AlumniPastLocationsAndCompaniesDto>>;

    /**
     * Get the past locations and companies of an alumni
     */
    alumniControllerGetPastLocationsAndCompanies(requestParameters: AlumniControllerGetPastLocationsAndCompaniesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AlumniPastLocationsAndCompaniesDto>;

    /**
     * 
     * @summary Mark an alumni as reviewed
     * @param {MarkAsReviewedDto} markAsReviewedDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    alumniControllerMarkAsReviewedRaw(requestParameters: AlumniControllerMarkAsReviewedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Alumni>>;

    /**
     * Mark an alumni as reviewed
     */
    alumniControllerMarkAsReviewed(requestParameters: AlumniControllerMarkAsReviewedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Alumni>;

    /**
     * 
     * @summary Get the companies, and the number of alumni working in them.
     * @param {boolean} includeTrend Whether to include the trend data
     * @param {Array<string>} [alumniIds] The alumni IDs to filter by
     * @param {string} [startDate] The start date of the role
     * @param {string} [endDate] The end date of the role
     * @param {Array<string>} [facultyIds] The faculty IDs to filter by
     * @param {Array<string>} [courseIds] The course IDs to filter by
     * @param {Array<string>} [graduationYears] The graduation years to filter by
     * @param {Array<string>} [companyIds] The company IDs to filter by
     * @param {Array<string>} [industryIds] The industry IDs to filter by
     * @param {Array<string>} [roleCountryCodes] The country codes where alumni exerced their roles
     * @param {Array<string>} [roleCityIds] The city IDS where alumni exerced their roles
     * @param {Array<string>} [companyHQsCountryCodes] The company HQs country codes to filter by
     * @param {Array<string>} [companyHQsCityIds] The company HQs city ids to filter by
     * @param {boolean} [currentRolesOnly] Filter for current roles only
     * @param {boolean} [onlyCompaniesWithSalaryData] Include only companies with salary data
     * @param {boolean} [onlyInternational] Whether to exclude roles in Portugal
     * @param {boolean} [excludeResearchAndHighEducation] Exclude research and high education roles
     * @param {string} [alumniSearch] Search query for companies
     * @param {Array<'A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I'>} [companySize] The company sizes to filter by
     * @param {Array<'EDUCATIONAL' | 'GOVERNMENT_AGENCY' | 'NON_PROFIT' | 'PARTNERSHIP' | 'PRIVATELY_HELD' | 'PUBLIC_COMPANY' | 'SELF_EMPLOYED' | 'SELF_OWNED'>} [companyType] The company types to filter by
     * @param {Array<string>} [escoCodes] The ESCO codes to filter by
     * @param {number} [escoClassificationLevel] The ESCO classification level to filter by
     * @param {number} [limit] The number of results to return
     * @param {number} [offset] The offset of the query
     * @param {string} [search] Broad search query
     * @param {'count' | 'name' | 'year'} [sortBy] How to sort the results
     * @param {string} [sortOrder] The order of the results
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    companyAnalyticsControllerGetCompaniesWithAlumniCountRaw(requestParameters: CompanyAnalyticsControllerGetCompaniesWithAlumniCountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CompanyListResponseDto>>;

    /**
     * Get the companies, and the number of alumni working in them.
     */
    companyAnalyticsControllerGetCompaniesWithAlumniCount(requestParameters: CompanyAnalyticsControllerGetCompaniesWithAlumniCountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CompanyListResponseDto>;

    /**
     * 
     * @summary Returns detailed information about a specific company.
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    companyAnalyticsControllerGetCompanyDetailsRaw(requestParameters: CompanyAnalyticsControllerGetCompanyDetailsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CompanyInsightsDto>>;

    /**
     * Returns detailed information about a specific company.
     */
    companyAnalyticsControllerGetCompanyDetails(requestParameters: CompanyAnalyticsControllerGetCompanyDetailsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CompanyInsightsDto>;

    /**
     * 
     * @summary Returns company employment growth over time.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    companyAnalyticsControllerGetCompanyGrowthRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Returns company employment growth over time.
     */
    companyAnalyticsControllerGetCompanyGrowth(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary List of possible companies to search for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    companyAnalyticsControllerGetCompanyOptionsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<CompanyOptionDto>>>;

    /**
     * List of possible companies to search for.
     */
    companyAnalyticsControllerGetCompanyOptions(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<CompanyOptionDto>>;

    /**
     * 
     * @summary Get all companies
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    companyControllerFindAllRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Get all companies
     */
    companyControllerFindAll(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary Get company by id
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    companyControllerFindOneRaw(requestParameters: CompanyControllerFindOneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Get company by id
     */
    companyControllerFindOne(requestParameters: CompanyControllerFindOneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary Create a course
     * @param {CreateCourseDto} createCourseDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    courseControllerCreateRaw(requestParameters: CourseControllerCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CourseAnalyticsEntity>>;

    /**
     * Create a course
     */
    courseControllerCreate(requestParameters: CourseControllerCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CourseAnalyticsEntity>;

    /**
     * 
     * @summary Get courses
     * @param {Array<string>} [courseIds] The courses to filter by
     * @param {Array<string>} [facultyIds] The faculties to filter by
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    courseControllerFindRaw(requestParameters: CourseControllerFindRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<CourseAnalyticsEntity>>>;

    /**
     * Get courses
     */
    courseControllerFind(requestParameters: CourseControllerFindRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<CourseAnalyticsEntity>>;

    /**
     * 
     * @summary Get a course by id
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    courseControllerFindOneRaw(requestParameters: CourseControllerFindOneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CourseAnalyticsEntity>>;

    /**
     * Get a course by id
     */
    courseControllerFindOne(requestParameters: CourseControllerFindOneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CourseAnalyticsEntity>;

    /**
     * 
     * @summary Gets the faculties, and the number of alumni graduated from them.
     * @param {boolean} includeTrend Whether to include the trend data
     * @param {Array<string>} [alumniIds] The alumni IDs to filter by
     * @param {string} [startDate] The start date of the role
     * @param {string} [endDate] The end date of the role
     * @param {Array<string>} [facultyIds] The faculty IDs to filter by
     * @param {Array<string>} [courseIds] The course IDs to filter by
     * @param {Array<string>} [graduationYears] The graduation years to filter by
     * @param {Array<string>} [companyIds] The company IDs to filter by
     * @param {Array<string>} [industryIds] The industry IDs to filter by
     * @param {Array<string>} [roleCountryCodes] The country codes where alumni exerced their roles
     * @param {Array<string>} [roleCityIds] The city IDS where alumni exerced their roles
     * @param {Array<string>} [companyHQsCountryCodes] The company HQs country codes to filter by
     * @param {Array<string>} [companyHQsCityIds] The company HQs city ids to filter by
     * @param {boolean} [currentRolesOnly] Filter for current roles only
     * @param {boolean} [onlyCompaniesWithSalaryData] Include only companies with salary data
     * @param {boolean} [onlyInternational] Whether to exclude roles in Portugal
     * @param {boolean} [excludeResearchAndHighEducation] Exclude research and high education roles
     * @param {string} [alumniSearch] Search query for companies
     * @param {Array<'A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I'>} [companySize] The company sizes to filter by
     * @param {Array<'EDUCATIONAL' | 'GOVERNMENT_AGENCY' | 'NON_PROFIT' | 'PARTNERSHIP' | 'PRIVATELY_HELD' | 'PUBLIC_COMPANY' | 'SELF_EMPLOYED' | 'SELF_OWNED'>} [companyType] The company types to filter by
     * @param {Array<string>} [escoCodes] The ESCO codes to filter by
     * @param {number} [escoClassificationLevel] The ESCO classification level to filter by
     * @param {number} [limit] The number of results to return
     * @param {number} [offset] The offset of the query
     * @param {string} [search] Broad search query
     * @param {'count' | 'name' | 'year'} [sortBy] How to sort the results
     * @param {string} [sortOrder] The order of the results
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    educationAnalyticsControllerGetFacultiesRaw(requestParameters: EducationAnalyticsControllerGetFacultiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FacultyListDto>>;

    /**
     * Gets the faculties, and the number of alumni graduated from them.
     */
    educationAnalyticsControllerGetFaculties(requestParameters: EducationAnalyticsControllerGetFacultiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FacultyListDto>;

    /**
     * 
     * @summary Get the graduations, and the number of alumni graduated from them.
     * @param {boolean} includeTrend Whether to include the trend data
     * @param {Array<string>} [alumniIds] The alumni IDs to filter by
     * @param {string} [startDate] The start date of the role
     * @param {string} [endDate] The end date of the role
     * @param {Array<string>} [facultyIds] The faculty IDs to filter by
     * @param {Array<string>} [courseIds] The course IDs to filter by
     * @param {Array<string>} [graduationYears] The graduation years to filter by
     * @param {Array<string>} [companyIds] The company IDs to filter by
     * @param {Array<string>} [industryIds] The industry IDs to filter by
     * @param {Array<string>} [roleCountryCodes] The country codes where alumni exerced their roles
     * @param {Array<string>} [roleCityIds] The city IDS where alumni exerced their roles
     * @param {Array<string>} [companyHQsCountryCodes] The company HQs country codes to filter by
     * @param {Array<string>} [companyHQsCityIds] The company HQs city ids to filter by
     * @param {boolean} [currentRolesOnly] Filter for current roles only
     * @param {boolean} [onlyCompaniesWithSalaryData] Include only companies with salary data
     * @param {boolean} [onlyInternational] Whether to exclude roles in Portugal
     * @param {boolean} [excludeResearchAndHighEducation] Exclude research and high education roles
     * @param {string} [alumniSearch] Search query for companies
     * @param {Array<'A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I'>} [companySize] The company sizes to filter by
     * @param {Array<'EDUCATIONAL' | 'GOVERNMENT_AGENCY' | 'NON_PROFIT' | 'PARTNERSHIP' | 'PRIVATELY_HELD' | 'PUBLIC_COMPANY' | 'SELF_EMPLOYED' | 'SELF_OWNED'>} [companyType] The company types to filter by
     * @param {Array<string>} [escoCodes] The ESCO codes to filter by
     * @param {number} [escoClassificationLevel] The ESCO classification level to filter by
     * @param {number} [limit] The number of results to return
     * @param {number} [offset] The offset of the query
     * @param {string} [search] Broad search query
     * @param {'count' | 'name' | 'year'} [sortBy] How to sort the results
     * @param {string} [sortOrder] The order of the results
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    educationAnalyticsControllerGetGraduationsRaw(requestParameters: EducationAnalyticsControllerGetGraduationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GraduationListDto>>;

    /**
     * Get the graduations, and the number of alumni graduated from them.
     */
    educationAnalyticsControllerGetGraduations(requestParameters: EducationAnalyticsControllerGetGraduationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GraduationListDto>;

    /**
     * 
     * @summary Get the majors, and the number of alumni graduated from them.
     * @param {boolean} includeTrend Whether to include the trend data
     * @param {Array<string>} [alumniIds] The alumni IDs to filter by
     * @param {string} [startDate] The start date of the role
     * @param {string} [endDate] The end date of the role
     * @param {Array<string>} [facultyIds] The faculty IDs to filter by
     * @param {Array<string>} [courseIds] The course IDs to filter by
     * @param {Array<string>} [graduationYears] The graduation years to filter by
     * @param {Array<string>} [companyIds] The company IDs to filter by
     * @param {Array<string>} [industryIds] The industry IDs to filter by
     * @param {Array<string>} [roleCountryCodes] The country codes where alumni exerced their roles
     * @param {Array<string>} [roleCityIds] The city IDS where alumni exerced their roles
     * @param {Array<string>} [companyHQsCountryCodes] The company HQs country codes to filter by
     * @param {Array<string>} [companyHQsCityIds] The company HQs city ids to filter by
     * @param {boolean} [currentRolesOnly] Filter for current roles only
     * @param {boolean} [onlyCompaniesWithSalaryData] Include only companies with salary data
     * @param {boolean} [onlyInternational] Whether to exclude roles in Portugal
     * @param {boolean} [excludeResearchAndHighEducation] Exclude research and high education roles
     * @param {string} [alumniSearch] Search query for companies
     * @param {Array<'A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I'>} [companySize] The company sizes to filter by
     * @param {Array<'EDUCATIONAL' | 'GOVERNMENT_AGENCY' | 'NON_PROFIT' | 'PARTNERSHIP' | 'PRIVATELY_HELD' | 'PUBLIC_COMPANY' | 'SELF_EMPLOYED' | 'SELF_OWNED'>} [companyType] The company types to filter by
     * @param {Array<string>} [escoCodes] The ESCO codes to filter by
     * @param {number} [escoClassificationLevel] The ESCO classification level to filter by
     * @param {number} [limit] The number of results to return
     * @param {number} [offset] The offset of the query
     * @param {string} [search] Broad search query
     * @param {'count' | 'name' | 'year'} [sortBy] How to sort the results
     * @param {string} [sortOrder] The order of the results
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    educationAnalyticsControllerGetMajorsRaw(requestParameters: EducationAnalyticsControllerGetMajorsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MajorListDto>>;

    /**
     * Get the majors, and the number of alumni graduated from them.
     */
    educationAnalyticsControllerGetMajors(requestParameters: EducationAnalyticsControllerGetMajorsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MajorListDto>;

    /**
     * 
     * @summary Get all level 1 ESCO classifications
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    escoControllerGetLevelOneClassificationsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<EscoClassificationDto>>>;

    /**
     * Get all level 1 ESCO classifications
     */
    escoControllerGetLevelOneClassifications(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<EscoClassificationDto>>;

    /**
     * 
     * @summary Get all level 2 ESCO classifications
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    escoControllerGetLevelTwoClassificationsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<EscoClassificationDto>>>;

    /**
     * Get all level 2 ESCO classifications
     */
    escoControllerGetLevelTwoClassifications(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<EscoClassificationDto>>;

    /**
     * 
     * @summary Create a faculty
     * @param {CreateFacultyDto} createFacultyDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    facultyControllerCreateRaw(requestParameters: FacultyControllerCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Faculty>>;

    /**
     * Create a faculty
     */
    facultyControllerCreate(requestParameters: FacultyControllerCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Faculty>;

    /**
     * 
     * @summary Get all faculties
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    facultyControllerFindAllRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Faculty>>>;

    /**
     * Get all faculties
     */
    facultyControllerFindAll(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Faculty>>;

    /**
     * 
     * @summary Handles the feedback by inserting it into the database and sending an email to the administrators
     * @param {SendFeedbackDto} sendFeedbackDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    feedbackControllerCreateRaw(requestParameters: FeedbackControllerCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Handles the feedback by inserting it into the database and sending an email to the administrators
     */
    feedbackControllerCreate(requestParameters: FeedbackControllerCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary Upload a file
     * @param {UploadExtractionDto} uploadExtractionDto Data to upload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    fileUploadControllerCreateRaw(requestParameters: FileUploadControllerCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>>;

    /**
     * Upload a file
     */
    fileUploadControllerCreate(requestParameters: FileUploadControllerCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string>;

    /**
     * 
     * @summary Get the cities options.
     * @param {Array<string>} [countryCodes] The country codes  to filter by
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    geoAnalyticsControllerGetCitiesOptionsRaw(requestParameters: GeoAnalyticsControllerGetCitiesOptionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<CityOptionDto>>>;

    /**
     * Get the cities options.
     */
    geoAnalyticsControllerGetCitiesOptions(requestParameters: GeoAnalyticsControllerGetCitiesOptionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<CityOptionDto>>;

    /**
     * 
     * @summary Get the cities, and the number of alumni working in them.
     * @param {boolean} includeTrend Whether to include the trend data
     * @param {Array<string>} [alumniIds] The alumni IDs to filter by
     * @param {string} [startDate] The start date of the role
     * @param {string} [endDate] The end date of the role
     * @param {Array<string>} [facultyIds] The faculty IDs to filter by
     * @param {Array<string>} [courseIds] The course IDs to filter by
     * @param {Array<string>} [graduationYears] The graduation years to filter by
     * @param {Array<string>} [companyIds] The company IDs to filter by
     * @param {Array<string>} [industryIds] The industry IDs to filter by
     * @param {Array<string>} [roleCountryCodes] The country codes where alumni exerced their roles
     * @param {Array<string>} [roleCityIds] The city IDS where alumni exerced their roles
     * @param {Array<string>} [companyHQsCountryCodes] The company HQs country codes to filter by
     * @param {Array<string>} [companyHQsCityIds] The company HQs city ids to filter by
     * @param {boolean} [currentRolesOnly] Filter for current roles only
     * @param {boolean} [onlyCompaniesWithSalaryData] Include only companies with salary data
     * @param {boolean} [onlyInternational] Whether to exclude roles in Portugal
     * @param {boolean} [excludeResearchAndHighEducation] Exclude research and high education roles
     * @param {string} [alumniSearch] Search query for companies
     * @param {Array<'A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I'>} [companySize] The company sizes to filter by
     * @param {Array<'EDUCATIONAL' | 'GOVERNMENT_AGENCY' | 'NON_PROFIT' | 'PARTNERSHIP' | 'PRIVATELY_HELD' | 'PUBLIC_COMPANY' | 'SELF_EMPLOYED' | 'SELF_OWNED'>} [companyType] The company types to filter by
     * @param {Array<string>} [escoCodes] The ESCO codes to filter by
     * @param {number} [escoClassificationLevel] The ESCO classification level to filter by
     * @param {number} [limit] The number of results to return
     * @param {number} [offset] The offset of the query
     * @param {string} [search] Broad search query
     * @param {'count' | 'name' | 'year'} [sortBy] How to sort the results
     * @param {string} [sortOrder] The order of the results
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    geoAnalyticsControllerGetCitiesWithAlumniCountRaw(requestParameters: GeoAnalyticsControllerGetCitiesWithAlumniCountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CityListResponseDto>>;

    /**
     * Get the cities, and the number of alumni working in them.
     */
    geoAnalyticsControllerGetCitiesWithAlumniCount(requestParameters: GeoAnalyticsControllerGetCitiesWithAlumniCountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CityListResponseDto>;

    /**
     * 
     * @summary Get the countries options.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    geoAnalyticsControllerGetCountriesOptionsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<CountryOptionDto>>>;

    /**
     * Get the countries options.
     */
    geoAnalyticsControllerGetCountriesOptions(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<CountryOptionDto>>;

    /**
     * 
     * @summary Get the countries, and the number of alumni working in them.
     * @param {boolean} includeTrend Whether to include the trend data
     * @param {Array<string>} [alumniIds] The alumni IDs to filter by
     * @param {string} [startDate] The start date of the role
     * @param {string} [endDate] The end date of the role
     * @param {Array<string>} [facultyIds] The faculty IDs to filter by
     * @param {Array<string>} [courseIds] The course IDs to filter by
     * @param {Array<string>} [graduationYears] The graduation years to filter by
     * @param {Array<string>} [companyIds] The company IDs to filter by
     * @param {Array<string>} [industryIds] The industry IDs to filter by
     * @param {Array<string>} [roleCountryCodes] The country codes where alumni exerced their roles
     * @param {Array<string>} [roleCityIds] The city IDS where alumni exerced their roles
     * @param {Array<string>} [companyHQsCountryCodes] The company HQs country codes to filter by
     * @param {Array<string>} [companyHQsCityIds] The company HQs city ids to filter by
     * @param {boolean} [currentRolesOnly] Filter for current roles only
     * @param {boolean} [onlyCompaniesWithSalaryData] Include only companies with salary data
     * @param {boolean} [onlyInternational] Whether to exclude roles in Portugal
     * @param {boolean} [excludeResearchAndHighEducation] Exclude research and high education roles
     * @param {string} [alumniSearch] Search query for companies
     * @param {Array<'A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I'>} [companySize] The company sizes to filter by
     * @param {Array<'EDUCATIONAL' | 'GOVERNMENT_AGENCY' | 'NON_PROFIT' | 'PARTNERSHIP' | 'PRIVATELY_HELD' | 'PUBLIC_COMPANY' | 'SELF_EMPLOYED' | 'SELF_OWNED'>} [companyType] The company types to filter by
     * @param {Array<string>} [escoCodes] The ESCO codes to filter by
     * @param {number} [escoClassificationLevel] The ESCO classification level to filter by
     * @param {number} [limit] The number of results to return
     * @param {number} [offset] The offset of the query
     * @param {string} [search] Broad search query
     * @param {'count' | 'name' | 'year'} [sortBy] How to sort the results
     * @param {string} [sortOrder] The order of the results
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    geoAnalyticsControllerGetCountriesWithAlumniCountRaw(requestParameters: GeoAnalyticsControllerGetCountriesWithAlumniCountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CountryListResponseDto>>;

    /**
     * Get the countries, and the number of alumni working in them.
     */
    geoAnalyticsControllerGetCountriesWithAlumniCount(requestParameters: GeoAnalyticsControllerGetCountriesWithAlumniCountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CountryListResponseDto>;

    /**
     * Returns a list of industries with their id and name.
     * @summary List of possible industries to search for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    industryAnalyticsControllerGetIndustryOptionsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<IndustryOptionDto>>>;

    /**
     * Returns a list of industries with their id and name.
     * List of possible industries to search for.
     */
    industryAnalyticsControllerGetIndustryOptions(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<IndustryOptionDto>>;

    /**
     * 
     * @summary Returns the number of alumni working in companies grouped by industry.
     * @param {boolean} includeTrend Whether to include the trend data
     * @param {Array<string>} [alumniIds] The alumni IDs to filter by
     * @param {string} [startDate] The start date of the role
     * @param {string} [endDate] The end date of the role
     * @param {Array<string>} [facultyIds] The faculty IDs to filter by
     * @param {Array<string>} [courseIds] The course IDs to filter by
     * @param {Array<string>} [graduationYears] The graduation years to filter by
     * @param {Array<string>} [companyIds] The company IDs to filter by
     * @param {Array<string>} [industryIds] The industry IDs to filter by
     * @param {Array<string>} [roleCountryCodes] The country codes where alumni exerced their roles
     * @param {Array<string>} [roleCityIds] The city IDS where alumni exerced their roles
     * @param {Array<string>} [companyHQsCountryCodes] The company HQs country codes to filter by
     * @param {Array<string>} [companyHQsCityIds] The company HQs city ids to filter by
     * @param {boolean} [currentRolesOnly] Filter for current roles only
     * @param {boolean} [onlyCompaniesWithSalaryData] Include only companies with salary data
     * @param {boolean} [onlyInternational] Whether to exclude roles in Portugal
     * @param {boolean} [excludeResearchAndHighEducation] Exclude research and high education roles
     * @param {string} [alumniSearch] Search query for companies
     * @param {Array<'A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I'>} [companySize] The company sizes to filter by
     * @param {Array<'EDUCATIONAL' | 'GOVERNMENT_AGENCY' | 'NON_PROFIT' | 'PARTNERSHIP' | 'PRIVATELY_HELD' | 'PUBLIC_COMPANY' | 'SELF_EMPLOYED' | 'SELF_OWNED'>} [companyType] The company types to filter by
     * @param {Array<string>} [escoCodes] The ESCO codes to filter by
     * @param {number} [escoClassificationLevel] The ESCO classification level to filter by
     * @param {number} [limit] The number of results to return
     * @param {number} [offset] The offset of the query
     * @param {string} [search] Broad search query
     * @param {'count' | 'name' | 'year'} [sortBy] How to sort the results
     * @param {string} [sortOrder] The order of the results
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    industryAnalyticsControllerGetIndustryWithCountsRaw(requestParameters: IndustryAnalyticsControllerGetIndustryWithCountsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IndustryListResponseDto>>;

    /**
     * Returns the number of alumni working in companies grouped by industry.
     */
    industryAnalyticsControllerGetIndustryWithCounts(requestParameters: IndustryAnalyticsControllerGetIndustryWithCountsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IndustryListResponseDto>;

    /**
     * 
     * @summary Update a review score
     * @param {ChangeReviewScoreDto} changeReviewScoreDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    reviewControllerChangeScoreRaw(requestParameters: ReviewControllerChangeScoreRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Update a review score
     */
    reviewControllerChangeScore(requestParameters: ReviewControllerChangeScoreRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary Create a new review
     * @param {CreateReviewDto} createReviewDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    reviewControllerCreateRaw(requestParameters: ReviewControllerCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Create a new review
     */
    reviewControllerCreate(requestParameters: ReviewControllerCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary Get all the review to be displayed on the map
     * @param {'countries' | 'cities'} groupBy How to group the data
     * @param {string} [reviewType] Type of review
     * @param {number} [rating] The review rating
     * @param {Date} [dateFrom] Date range to filter
     * @param {Date} [dateTo] Date range to filter
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    reviewControllerFindAllGeoJSONRaw(requestParameters: ReviewControllerFindAllGeoJSONRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReviewGeoJSONFeatureCollection>>;

    /**
     * Get all the review to be displayed on the map
     */
    reviewControllerFindAllGeoJSON(requestParameters: ReviewControllerFindAllGeoJSONRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReviewGeoJSONFeatureCollection>;

    /**
     * Returns a list of roles with their ESCO code and title.
     * @summary Gets the hierarchy of a role
     * @param {string} code The ESCO code of the role
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    roleAnalyticsControllerGetRoleHierarchyRaw(requestParameters: RoleAnalyticsControllerGetRoleHierarchyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>>;

    /**
     * Returns a list of roles with their ESCO code and title.
     * Gets the hierarchy of a role
     */
    roleAnalyticsControllerGetRoleHierarchy(requestParameters: RoleAnalyticsControllerGetRoleHierarchyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string>;

    /**
     * Returns a list of roles with their ESCO code and title.
     * @summary List of possible role titles to search for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    roleAnalyticsControllerGetRoleOptionsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<RoleOptionDto>>>;

    /**
     * Returns a list of roles with their ESCO code and title.
     * List of possible role titles to search for.
     */
    roleAnalyticsControllerGetRoleOptions(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<RoleOptionDto>>;

    /**
     * 
     * @summary Returns the number of roles classified with each ESCO classification
     * @param {boolean} includeTrend Whether to include the trend data
     * @param {Array<string>} [alumniIds] The alumni IDs to filter by
     * @param {string} [startDate] The start date of the role
     * @param {string} [endDate] The end date of the role
     * @param {Array<string>} [facultyIds] The faculty IDs to filter by
     * @param {Array<string>} [courseIds] The course IDs to filter by
     * @param {Array<string>} [graduationYears] The graduation years to filter by
     * @param {Array<string>} [companyIds] The company IDs to filter by
     * @param {Array<string>} [industryIds] The industry IDs to filter by
     * @param {Array<string>} [roleCountryCodes] The country codes where alumni exerced their roles
     * @param {Array<string>} [roleCityIds] The city IDS where alumni exerced their roles
     * @param {Array<string>} [companyHQsCountryCodes] The company HQs country codes to filter by
     * @param {Array<string>} [companyHQsCityIds] The company HQs city ids to filter by
     * @param {boolean} [currentRolesOnly] Filter for current roles only
     * @param {boolean} [onlyCompaniesWithSalaryData] Include only companies with salary data
     * @param {boolean} [onlyInternational] Whether to exclude roles in Portugal
     * @param {boolean} [excludeResearchAndHighEducation] Exclude research and high education roles
     * @param {string} [alumniSearch] Search query for companies
     * @param {Array<'A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I'>} [companySize] The company sizes to filter by
     * @param {Array<'EDUCATIONAL' | 'GOVERNMENT_AGENCY' | 'NON_PROFIT' | 'PARTNERSHIP' | 'PRIVATELY_HELD' | 'PUBLIC_COMPANY' | 'SELF_EMPLOYED' | 'SELF_OWNED'>} [companyType] The company types to filter by
     * @param {Array<string>} [escoCodes] The ESCO codes to filter by
     * @param {number} [escoClassificationLevel] The ESCO classification level to filter by
     * @param {number} [limit] The number of results to return
     * @param {number} [offset] The offset of the query
     * @param {string} [search] Broad search query
     * @param {'count' | 'name' | 'year'} [sortBy] How to sort the results
     * @param {string} [sortOrder] The order of the results
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    roleAnalyticsControllerGetRolesRaw(requestParameters: RoleAnalyticsControllerGetRolesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RoleListResponseDto>>;

    /**
     * Returns the number of roles classified with each ESCO classification
     */
    roleAnalyticsControllerGetRoles(requestParameters: RoleAnalyticsControllerGetRolesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RoleListResponseDto>;

    /**
     * 
     * @summary Check if a user has a permission
     * @param {CheckPermissionDto} checkPermissionDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    userControllerCheckPermissionRaw(requestParameters: UserControllerCheckPermissionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CheckPermissionResponse>>;

    /**
     * Check if a user has a permission
     */
    userControllerCheckPermission(requestParameters: UserControllerCheckPermissionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CheckPermissionResponse>;

    /**
     * 
     * @summary Delete a user
     * @param {DeleteUserDto} deleteUserDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    userControllerDeleteUserRaw(requestParameters: UserControllerDeleteUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Delete a user
     */
    userControllerDeleteUser(requestParameters: UserControllerDeleteUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary Authenticate a user with LinkedIn
     * @param {LinkedinAuthDto} linkedinAuthDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    userControllerLinkedinAuthRaw(requestParameters: UserControllerLinkedinAuthRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserAuthResponse>>;

    /**
     * Authenticate a user with LinkedIn
     */
    userControllerLinkedinAuth(requestParameters: UserControllerLinkedinAuthRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserAuthResponse>;

    /**
     * 
     * @summary Confirm the LinkedIn profile and generate a JWT token
     * @param {LinkedinAuthDto} linkedinAuthDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    userControllerLinkedinConfirmRaw(requestParameters: UserControllerLinkedinConfirmRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserAuthResponse>>;

    /**
     * Confirm the LinkedIn profile and generate a JWT token
     */
    userControllerLinkedinConfirm(requestParameters: UserControllerLinkedinConfirmRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserAuthResponse>;

    /**
     * 
     * @summary Verify the email of the alumni by generating a token and sending it to the email
     * @param {VerifyEmailDto} verifyEmailDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    userControllerVerifyEmailRaw(requestParameters: UserControllerVerifyEmailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Verify the email of the alumni by generating a token and sending it to the email
     */
    userControllerVerifyEmail(requestParameters: UserControllerVerifyEmailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary Validate the token against the email
     * @param {VerifyEmailTokenDto} verifyEmailTokenDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    userControllerVerifyEmailTokenRaw(requestParameters: UserControllerVerifyEmailTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Validate the token against the email
     */
    userControllerVerifyEmailToken(requestParameters: UserControllerVerifyEmailTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

}

/**
 * 
 */
export class V1Api extends runtime.BaseAPI implements V1ApiInterface {

    /**
     * Get all alumni list
     */
    async alumniAnalyticsControllerGetAlumniListRaw(requestParameters: AlumniAnalyticsControllerGetAlumniListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AlumniListResponseDto>> {
        if (requestParameters['includeTrend'] == null) {
            throw new runtime.RequiredError(
                'includeTrend',
                'Required parameter "includeTrend" was null or undefined when calling alumniAnalyticsControllerGetAlumniList().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['alumniIds'] != null) {
            queryParameters['alumniIds'] = requestParameters['alumniIds'];
        }

        if (requestParameters['startDate'] != null) {
            queryParameters['startDate'] = requestParameters['startDate'];
        }

        if (requestParameters['endDate'] != null) {
            queryParameters['endDate'] = requestParameters['endDate'];
        }

        if (requestParameters['facultyIds'] != null) {
            queryParameters['facultyIds'] = requestParameters['facultyIds'];
        }

        if (requestParameters['courseIds'] != null) {
            queryParameters['courseIds'] = requestParameters['courseIds'];
        }

        if (requestParameters['graduationYears'] != null) {
            queryParameters['graduationYears'] = requestParameters['graduationYears'];
        }

        if (requestParameters['companyIds'] != null) {
            queryParameters['companyIds'] = requestParameters['companyIds'];
        }

        if (requestParameters['industryIds'] != null) {
            queryParameters['industryIds'] = requestParameters['industryIds'];
        }

        if (requestParameters['roleCountryCodes'] != null) {
            queryParameters['roleCountryCodes'] = requestParameters['roleCountryCodes'];
        }

        if (requestParameters['roleCityIds'] != null) {
            queryParameters['roleCityIds'] = requestParameters['roleCityIds'];
        }

        if (requestParameters['companyHQsCountryCodes'] != null) {
            queryParameters['companyHQsCountryCodes'] = requestParameters['companyHQsCountryCodes'];
        }

        if (requestParameters['companyHQsCityIds'] != null) {
            queryParameters['companyHQsCityIds'] = requestParameters['companyHQsCityIds'];
        }

        if (requestParameters['currentRolesOnly'] != null) {
            queryParameters['currentRolesOnly'] = requestParameters['currentRolesOnly'];
        }

        if (requestParameters['onlyCompaniesWithSalaryData'] != null) {
            queryParameters['onlyCompaniesWithSalaryData'] = requestParameters['onlyCompaniesWithSalaryData'];
        }

        if (requestParameters['onlyInternational'] != null) {
            queryParameters['onlyInternational'] = requestParameters['onlyInternational'];
        }

        if (requestParameters['excludeResearchAndHighEducation'] != null) {
            queryParameters['excludeResearchAndHighEducation'] = requestParameters['excludeResearchAndHighEducation'];
        }

        if (requestParameters['alumniSearch'] != null) {
            queryParameters['alumniSearch'] = requestParameters['alumniSearch'];
        }

        if (requestParameters['companySize'] != null) {
            queryParameters['companySize'] = requestParameters['companySize'];
        }

        if (requestParameters['companyType'] != null) {
            queryParameters['companyType'] = requestParameters['companyType'];
        }

        if (requestParameters['escoCodes'] != null) {
            queryParameters['escoCodes'] = requestParameters['escoCodes'];
        }

        if (requestParameters['escoClassificationLevel'] != null) {
            queryParameters['escoClassificationLevel'] = requestParameters['escoClassificationLevel'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['search'] != null) {
            queryParameters['search'] = requestParameters['search'];
        }

        if (requestParameters['sortBy'] != null) {
            queryParameters['sortBy'] = requestParameters['sortBy'];
        }

        if (requestParameters['sortOrder'] != null) {
            queryParameters['sortOrder'] = requestParameters['sortOrder'];
        }

        if (requestParameters['includeTrend'] != null) {
            queryParameters['includeTrend'] = requestParameters['includeTrend'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/analytics/alumni`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AlumniListResponseDtoFromJSON(jsonValue));
    }

    /**
     * Get all alumni list
     */
    async alumniAnalyticsControllerGetAlumniList(requestParameters: AlumniAnalyticsControllerGetAlumniListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AlumniListResponseDto> {
        const response = await this.alumniAnalyticsControllerGetAlumniListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all alumni options
     */
    async alumniAnalyticsControllerGetAlumniOptionsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<AlumniOptionDto>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/analytics/alumni/options`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AlumniOptionDtoFromJSON));
    }

    /**
     * Get all alumni options
     */
    async alumniAnalyticsControllerGetAlumniOptions(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<AlumniOptionDto>> {
        const response = await this.alumniAnalyticsControllerGetAlumniOptionsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Create a new alumni
     */
    async alumniControllerCreateRaw(requestParameters: AlumniControllerCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Alumni>> {
        if (requestParameters['createAlumniDto'] == null) {
            throw new runtime.RequiredError(
                'createAlumniDto',
                'Required parameter "createAlumniDto" was null or undefined when calling alumniControllerCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/alumni`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateAlumniDtoToJSON(requestParameters['createAlumniDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AlumniFromJSON(jsonValue));
    }

    /**
     * Create a new alumni
     */
    async alumniControllerCreate(requestParameters: AlumniControllerCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Alumni> {
        const response = await this.alumniControllerCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all alumni, enriched with location, graduations and roles
     */
    async alumniControllerFindAllRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Alumni>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/alumni`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AlumniFromJSON));
    }

    /**
     * Get all alumni, enriched with location, graduations and roles
     */
    async alumniControllerFindAll(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Alumni>> {
        const response = await this.alumniControllerFindAllRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get all alumni to be displayed in the map
     */
    async alumniControllerFindAllGeoJSONRaw(requestParameters: AlumniControllerFindAllGeoJSONRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GeoJSONFeatureCollection>> {
        if (requestParameters['groupBy'] == null) {
            throw new runtime.RequiredError(
                'groupBy',
                'Required parameter "groupBy" was null or undefined when calling alumniControllerFindAllGeoJSON().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['groupBy'] != null) {
            queryParameters['groupBy'] = requestParameters['groupBy'];
        }

        if (requestParameters['courseIds'] != null) {
            queryParameters['courseIds'] = requestParameters['courseIds'];
        }

        if (requestParameters['conclusionYears'] != null) {
            queryParameters['conclusionYears'] = requestParameters['conclusionYears'];
        }

        if (requestParameters['selectedYear'] != null) {
            queryParameters['selectedYear'] = requestParameters['selectedYear'];
        }

        if (requestParameters['compareYear'] != null) {
            queryParameters['compareYear'] = requestParameters['compareYear'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/alumni/geoJSON`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GeoJSONFeatureCollectionFromJSON(jsonValue));
    }

    /**
     * Get all alumni to be displayed in the map
     */
    async alumniControllerFindAllGeoJSON(requestParameters: AlumniControllerFindAllGeoJSONRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GeoJSONFeatureCollection> {
        const response = await this.alumniControllerFindAllGeoJSONRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get alumni by id, enriched with location, graduations and roles
     */
    async alumniControllerFindOneRaw(requestParameters: AlumniControllerFindOneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Alumni>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling alumniControllerFindOne().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/alumni/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AlumniFromJSON(jsonValue));
    }

    /**
     * Get alumni by id, enriched with location, graduations and roles
     */
    async alumniControllerFindOne(requestParameters: AlumniControllerFindOneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Alumni> {
        const response = await this.alumniControllerFindOneRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all alumni submissions that need to be reviewed
     */
    async alumniControllerGetAlumniToReviewRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<AlumniExtended>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/alumni/review`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AlumniExtendedFromJSON));
    }

    /**
     * Get all alumni submissions that need to be reviewed
     */
    async alumniControllerGetAlumniToReview(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<AlumniExtended>> {
        const response = await this.alumniControllerGetAlumniToReviewRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get basic profile of an alumni
     */
    async alumniControllerGetBasicProfileRaw(requestParameters: AlumniControllerGetBasicProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BasicAlumniProfileDto>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling alumniControllerGetBasicProfile().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/alumni/basic-profile/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BasicAlumniProfileDtoFromJSON(jsonValue));
    }

    /**
     * Get basic profile of an alumni
     */
    async alumniControllerGetBasicProfile(requestParameters: AlumniControllerGetBasicProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BasicAlumniProfileDto> {
        const response = await this.alumniControllerGetBasicProfileRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get the past locations and companies of an alumni
     */
    async alumniControllerGetPastLocationsAndCompaniesRaw(requestParameters: AlumniControllerGetPastLocationsAndCompaniesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AlumniPastLocationsAndCompaniesDto>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling alumniControllerGetPastLocationsAndCompanies().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/alumni/past-locations-companies/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AlumniPastLocationsAndCompaniesDtoFromJSON(jsonValue));
    }

    /**
     * Get the past locations and companies of an alumni
     */
    async alumniControllerGetPastLocationsAndCompanies(requestParameters: AlumniControllerGetPastLocationsAndCompaniesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AlumniPastLocationsAndCompaniesDto> {
        const response = await this.alumniControllerGetPastLocationsAndCompaniesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Mark an alumni as reviewed
     */
    async alumniControllerMarkAsReviewedRaw(requestParameters: AlumniControllerMarkAsReviewedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Alumni>> {
        if (requestParameters['markAsReviewedDto'] == null) {
            throw new runtime.RequiredError(
                'markAsReviewedDto',
                'Required parameter "markAsReviewedDto" was null or undefined when calling alumniControllerMarkAsReviewed().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/alumni/review`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MarkAsReviewedDtoToJSON(requestParameters['markAsReviewedDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AlumniFromJSON(jsonValue));
    }

    /**
     * Mark an alumni as reviewed
     */
    async alumniControllerMarkAsReviewed(requestParameters: AlumniControllerMarkAsReviewedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Alumni> {
        const response = await this.alumniControllerMarkAsReviewedRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get the companies, and the number of alumni working in them.
     */
    async companyAnalyticsControllerGetCompaniesWithAlumniCountRaw(requestParameters: CompanyAnalyticsControllerGetCompaniesWithAlumniCountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CompanyListResponseDto>> {
        if (requestParameters['includeTrend'] == null) {
            throw new runtime.RequiredError(
                'includeTrend',
                'Required parameter "includeTrend" was null or undefined when calling companyAnalyticsControllerGetCompaniesWithAlumniCount().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['alumniIds'] != null) {
            queryParameters['alumniIds'] = requestParameters['alumniIds'];
        }

        if (requestParameters['startDate'] != null) {
            queryParameters['startDate'] = requestParameters['startDate'];
        }

        if (requestParameters['endDate'] != null) {
            queryParameters['endDate'] = requestParameters['endDate'];
        }

        if (requestParameters['facultyIds'] != null) {
            queryParameters['facultyIds'] = requestParameters['facultyIds'];
        }

        if (requestParameters['courseIds'] != null) {
            queryParameters['courseIds'] = requestParameters['courseIds'];
        }

        if (requestParameters['graduationYears'] != null) {
            queryParameters['graduationYears'] = requestParameters['graduationYears'];
        }

        if (requestParameters['companyIds'] != null) {
            queryParameters['companyIds'] = requestParameters['companyIds'];
        }

        if (requestParameters['industryIds'] != null) {
            queryParameters['industryIds'] = requestParameters['industryIds'];
        }

        if (requestParameters['roleCountryCodes'] != null) {
            queryParameters['roleCountryCodes'] = requestParameters['roleCountryCodes'];
        }

        if (requestParameters['roleCityIds'] != null) {
            queryParameters['roleCityIds'] = requestParameters['roleCityIds'];
        }

        if (requestParameters['companyHQsCountryCodes'] != null) {
            queryParameters['companyHQsCountryCodes'] = requestParameters['companyHQsCountryCodes'];
        }

        if (requestParameters['companyHQsCityIds'] != null) {
            queryParameters['companyHQsCityIds'] = requestParameters['companyHQsCityIds'];
        }

        if (requestParameters['currentRolesOnly'] != null) {
            queryParameters['currentRolesOnly'] = requestParameters['currentRolesOnly'];
        }

        if (requestParameters['onlyCompaniesWithSalaryData'] != null) {
            queryParameters['onlyCompaniesWithSalaryData'] = requestParameters['onlyCompaniesWithSalaryData'];
        }

        if (requestParameters['onlyInternational'] != null) {
            queryParameters['onlyInternational'] = requestParameters['onlyInternational'];
        }

        if (requestParameters['excludeResearchAndHighEducation'] != null) {
            queryParameters['excludeResearchAndHighEducation'] = requestParameters['excludeResearchAndHighEducation'];
        }

        if (requestParameters['alumniSearch'] != null) {
            queryParameters['alumniSearch'] = requestParameters['alumniSearch'];
        }

        if (requestParameters['companySize'] != null) {
            queryParameters['companySize'] = requestParameters['companySize'];
        }

        if (requestParameters['companyType'] != null) {
            queryParameters['companyType'] = requestParameters['companyType'];
        }

        if (requestParameters['escoCodes'] != null) {
            queryParameters['escoCodes'] = requestParameters['escoCodes'];
        }

        if (requestParameters['escoClassificationLevel'] != null) {
            queryParameters['escoClassificationLevel'] = requestParameters['escoClassificationLevel'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['search'] != null) {
            queryParameters['search'] = requestParameters['search'];
        }

        if (requestParameters['sortBy'] != null) {
            queryParameters['sortBy'] = requestParameters['sortBy'];
        }

        if (requestParameters['sortOrder'] != null) {
            queryParameters['sortOrder'] = requestParameters['sortOrder'];
        }

        if (requestParameters['includeTrend'] != null) {
            queryParameters['includeTrend'] = requestParameters['includeTrend'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/analytics/companies`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CompanyListResponseDtoFromJSON(jsonValue));
    }

    /**
     * Get the companies, and the number of alumni working in them.
     */
    async companyAnalyticsControllerGetCompaniesWithAlumniCount(requestParameters: CompanyAnalyticsControllerGetCompaniesWithAlumniCountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CompanyListResponseDto> {
        const response = await this.companyAnalyticsControllerGetCompaniesWithAlumniCountRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns detailed information about a specific company.
     */
    async companyAnalyticsControllerGetCompanyDetailsRaw(requestParameters: CompanyAnalyticsControllerGetCompanyDetailsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CompanyInsightsDto>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling companyAnalyticsControllerGetCompanyDetails().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/analytics/companies/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CompanyInsightsDtoFromJSON(jsonValue));
    }

    /**
     * Returns detailed information about a specific company.
     */
    async companyAnalyticsControllerGetCompanyDetails(requestParameters: CompanyAnalyticsControllerGetCompanyDetailsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CompanyInsightsDto> {
        const response = await this.companyAnalyticsControllerGetCompanyDetailsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns company employment growth over time.
     */
    async companyAnalyticsControllerGetCompanyGrowthRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/analytics/companies/growth`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Returns company employment growth over time.
     */
    async companyAnalyticsControllerGetCompanyGrowth(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.companyAnalyticsControllerGetCompanyGrowthRaw(initOverrides);
    }

    /**
     * List of possible companies to search for.
     */
    async companyAnalyticsControllerGetCompanyOptionsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<CompanyOptionDto>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/analytics/companies/options`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CompanyOptionDtoFromJSON));
    }

    /**
     * List of possible companies to search for.
     */
    async companyAnalyticsControllerGetCompanyOptions(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<CompanyOptionDto>> {
        const response = await this.companyAnalyticsControllerGetCompanyOptionsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get all companies
     */
    async companyControllerFindAllRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/company`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Get all companies
     */
    async companyControllerFindAll(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.companyControllerFindAllRaw(initOverrides);
    }

    /**
     * Get company by id
     */
    async companyControllerFindOneRaw(requestParameters: CompanyControllerFindOneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling companyControllerFindOne().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/company/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Get company by id
     */
    async companyControllerFindOne(requestParameters: CompanyControllerFindOneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.companyControllerFindOneRaw(requestParameters, initOverrides);
    }

    /**
     * Create a course
     */
    async courseControllerCreateRaw(requestParameters: CourseControllerCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CourseAnalyticsEntity>> {
        if (requestParameters['createCourseDto'] == null) {
            throw new runtime.RequiredError(
                'createCourseDto',
                'Required parameter "createCourseDto" was null or undefined when calling courseControllerCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/course`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateCourseDtoToJSON(requestParameters['createCourseDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CourseAnalyticsEntityFromJSON(jsonValue));
    }

    /**
     * Create a course
     */
    async courseControllerCreate(requestParameters: CourseControllerCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CourseAnalyticsEntity> {
        const response = await this.courseControllerCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get courses
     */
    async courseControllerFindRaw(requestParameters: CourseControllerFindRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<CourseAnalyticsEntity>>> {
        const queryParameters: any = {};

        if (requestParameters['courseIds'] != null) {
            queryParameters['courseIds'] = requestParameters['courseIds'];
        }

        if (requestParameters['facultyIds'] != null) {
            queryParameters['facultyIds'] = requestParameters['facultyIds'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/course`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CourseAnalyticsEntityFromJSON));
    }

    /**
     * Get courses
     */
    async courseControllerFind(requestParameters: CourseControllerFindRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<CourseAnalyticsEntity>> {
        const response = await this.courseControllerFindRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a course by id
     */
    async courseControllerFindOneRaw(requestParameters: CourseControllerFindOneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CourseAnalyticsEntity>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling courseControllerFindOne().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/course/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CourseAnalyticsEntityFromJSON(jsonValue));
    }

    /**
     * Get a course by id
     */
    async courseControllerFindOne(requestParameters: CourseControllerFindOneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CourseAnalyticsEntity> {
        const response = await this.courseControllerFindOneRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets the faculties, and the number of alumni graduated from them.
     */
    async educationAnalyticsControllerGetFacultiesRaw(requestParameters: EducationAnalyticsControllerGetFacultiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FacultyListDto>> {
        if (requestParameters['includeTrend'] == null) {
            throw new runtime.RequiredError(
                'includeTrend',
                'Required parameter "includeTrend" was null or undefined when calling educationAnalyticsControllerGetFaculties().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['alumniIds'] != null) {
            queryParameters['alumniIds'] = requestParameters['alumniIds'];
        }

        if (requestParameters['startDate'] != null) {
            queryParameters['startDate'] = requestParameters['startDate'];
        }

        if (requestParameters['endDate'] != null) {
            queryParameters['endDate'] = requestParameters['endDate'];
        }

        if (requestParameters['facultyIds'] != null) {
            queryParameters['facultyIds'] = requestParameters['facultyIds'];
        }

        if (requestParameters['courseIds'] != null) {
            queryParameters['courseIds'] = requestParameters['courseIds'];
        }

        if (requestParameters['graduationYears'] != null) {
            queryParameters['graduationYears'] = requestParameters['graduationYears'];
        }

        if (requestParameters['companyIds'] != null) {
            queryParameters['companyIds'] = requestParameters['companyIds'];
        }

        if (requestParameters['industryIds'] != null) {
            queryParameters['industryIds'] = requestParameters['industryIds'];
        }

        if (requestParameters['roleCountryCodes'] != null) {
            queryParameters['roleCountryCodes'] = requestParameters['roleCountryCodes'];
        }

        if (requestParameters['roleCityIds'] != null) {
            queryParameters['roleCityIds'] = requestParameters['roleCityIds'];
        }

        if (requestParameters['companyHQsCountryCodes'] != null) {
            queryParameters['companyHQsCountryCodes'] = requestParameters['companyHQsCountryCodes'];
        }

        if (requestParameters['companyHQsCityIds'] != null) {
            queryParameters['companyHQsCityIds'] = requestParameters['companyHQsCityIds'];
        }

        if (requestParameters['currentRolesOnly'] != null) {
            queryParameters['currentRolesOnly'] = requestParameters['currentRolesOnly'];
        }

        if (requestParameters['onlyCompaniesWithSalaryData'] != null) {
            queryParameters['onlyCompaniesWithSalaryData'] = requestParameters['onlyCompaniesWithSalaryData'];
        }

        if (requestParameters['onlyInternational'] != null) {
            queryParameters['onlyInternational'] = requestParameters['onlyInternational'];
        }

        if (requestParameters['excludeResearchAndHighEducation'] != null) {
            queryParameters['excludeResearchAndHighEducation'] = requestParameters['excludeResearchAndHighEducation'];
        }

        if (requestParameters['alumniSearch'] != null) {
            queryParameters['alumniSearch'] = requestParameters['alumniSearch'];
        }

        if (requestParameters['companySize'] != null) {
            queryParameters['companySize'] = requestParameters['companySize'];
        }

        if (requestParameters['companyType'] != null) {
            queryParameters['companyType'] = requestParameters['companyType'];
        }

        if (requestParameters['escoCodes'] != null) {
            queryParameters['escoCodes'] = requestParameters['escoCodes'];
        }

        if (requestParameters['escoClassificationLevel'] != null) {
            queryParameters['escoClassificationLevel'] = requestParameters['escoClassificationLevel'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['search'] != null) {
            queryParameters['search'] = requestParameters['search'];
        }

        if (requestParameters['sortBy'] != null) {
            queryParameters['sortBy'] = requestParameters['sortBy'];
        }

        if (requestParameters['sortOrder'] != null) {
            queryParameters['sortOrder'] = requestParameters['sortOrder'];
        }

        if (requestParameters['includeTrend'] != null) {
            queryParameters['includeTrend'] = requestParameters['includeTrend'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/analytics/education/faculties`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FacultyListDtoFromJSON(jsonValue));
    }

    /**
     * Gets the faculties, and the number of alumni graduated from them.
     */
    async educationAnalyticsControllerGetFaculties(requestParameters: EducationAnalyticsControllerGetFacultiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FacultyListDto> {
        const response = await this.educationAnalyticsControllerGetFacultiesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get the graduations, and the number of alumni graduated from them.
     */
    async educationAnalyticsControllerGetGraduationsRaw(requestParameters: EducationAnalyticsControllerGetGraduationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GraduationListDto>> {
        if (requestParameters['includeTrend'] == null) {
            throw new runtime.RequiredError(
                'includeTrend',
                'Required parameter "includeTrend" was null or undefined when calling educationAnalyticsControllerGetGraduations().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['alumniIds'] != null) {
            queryParameters['alumniIds'] = requestParameters['alumniIds'];
        }

        if (requestParameters['startDate'] != null) {
            queryParameters['startDate'] = requestParameters['startDate'];
        }

        if (requestParameters['endDate'] != null) {
            queryParameters['endDate'] = requestParameters['endDate'];
        }

        if (requestParameters['facultyIds'] != null) {
            queryParameters['facultyIds'] = requestParameters['facultyIds'];
        }

        if (requestParameters['courseIds'] != null) {
            queryParameters['courseIds'] = requestParameters['courseIds'];
        }

        if (requestParameters['graduationYears'] != null) {
            queryParameters['graduationYears'] = requestParameters['graduationYears'];
        }

        if (requestParameters['companyIds'] != null) {
            queryParameters['companyIds'] = requestParameters['companyIds'];
        }

        if (requestParameters['industryIds'] != null) {
            queryParameters['industryIds'] = requestParameters['industryIds'];
        }

        if (requestParameters['roleCountryCodes'] != null) {
            queryParameters['roleCountryCodes'] = requestParameters['roleCountryCodes'];
        }

        if (requestParameters['roleCityIds'] != null) {
            queryParameters['roleCityIds'] = requestParameters['roleCityIds'];
        }

        if (requestParameters['companyHQsCountryCodes'] != null) {
            queryParameters['companyHQsCountryCodes'] = requestParameters['companyHQsCountryCodes'];
        }

        if (requestParameters['companyHQsCityIds'] != null) {
            queryParameters['companyHQsCityIds'] = requestParameters['companyHQsCityIds'];
        }

        if (requestParameters['currentRolesOnly'] != null) {
            queryParameters['currentRolesOnly'] = requestParameters['currentRolesOnly'];
        }

        if (requestParameters['onlyCompaniesWithSalaryData'] != null) {
            queryParameters['onlyCompaniesWithSalaryData'] = requestParameters['onlyCompaniesWithSalaryData'];
        }

        if (requestParameters['onlyInternational'] != null) {
            queryParameters['onlyInternational'] = requestParameters['onlyInternational'];
        }

        if (requestParameters['excludeResearchAndHighEducation'] != null) {
            queryParameters['excludeResearchAndHighEducation'] = requestParameters['excludeResearchAndHighEducation'];
        }

        if (requestParameters['alumniSearch'] != null) {
            queryParameters['alumniSearch'] = requestParameters['alumniSearch'];
        }

        if (requestParameters['companySize'] != null) {
            queryParameters['companySize'] = requestParameters['companySize'];
        }

        if (requestParameters['companyType'] != null) {
            queryParameters['companyType'] = requestParameters['companyType'];
        }

        if (requestParameters['escoCodes'] != null) {
            queryParameters['escoCodes'] = requestParameters['escoCodes'];
        }

        if (requestParameters['escoClassificationLevel'] != null) {
            queryParameters['escoClassificationLevel'] = requestParameters['escoClassificationLevel'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['search'] != null) {
            queryParameters['search'] = requestParameters['search'];
        }

        if (requestParameters['sortBy'] != null) {
            queryParameters['sortBy'] = requestParameters['sortBy'];
        }

        if (requestParameters['sortOrder'] != null) {
            queryParameters['sortOrder'] = requestParameters['sortOrder'];
        }

        if (requestParameters['includeTrend'] != null) {
            queryParameters['includeTrend'] = requestParameters['includeTrend'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/analytics/education/graduations`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GraduationListDtoFromJSON(jsonValue));
    }

    /**
     * Get the graduations, and the number of alumni graduated from them.
     */
    async educationAnalyticsControllerGetGraduations(requestParameters: EducationAnalyticsControllerGetGraduationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GraduationListDto> {
        const response = await this.educationAnalyticsControllerGetGraduationsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get the majors, and the number of alumni graduated from them.
     */
    async educationAnalyticsControllerGetMajorsRaw(requestParameters: EducationAnalyticsControllerGetMajorsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MajorListDto>> {
        if (requestParameters['includeTrend'] == null) {
            throw new runtime.RequiredError(
                'includeTrend',
                'Required parameter "includeTrend" was null or undefined when calling educationAnalyticsControllerGetMajors().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['alumniIds'] != null) {
            queryParameters['alumniIds'] = requestParameters['alumniIds'];
        }

        if (requestParameters['startDate'] != null) {
            queryParameters['startDate'] = requestParameters['startDate'];
        }

        if (requestParameters['endDate'] != null) {
            queryParameters['endDate'] = requestParameters['endDate'];
        }

        if (requestParameters['facultyIds'] != null) {
            queryParameters['facultyIds'] = requestParameters['facultyIds'];
        }

        if (requestParameters['courseIds'] != null) {
            queryParameters['courseIds'] = requestParameters['courseIds'];
        }

        if (requestParameters['graduationYears'] != null) {
            queryParameters['graduationYears'] = requestParameters['graduationYears'];
        }

        if (requestParameters['companyIds'] != null) {
            queryParameters['companyIds'] = requestParameters['companyIds'];
        }

        if (requestParameters['industryIds'] != null) {
            queryParameters['industryIds'] = requestParameters['industryIds'];
        }

        if (requestParameters['roleCountryCodes'] != null) {
            queryParameters['roleCountryCodes'] = requestParameters['roleCountryCodes'];
        }

        if (requestParameters['roleCityIds'] != null) {
            queryParameters['roleCityIds'] = requestParameters['roleCityIds'];
        }

        if (requestParameters['companyHQsCountryCodes'] != null) {
            queryParameters['companyHQsCountryCodes'] = requestParameters['companyHQsCountryCodes'];
        }

        if (requestParameters['companyHQsCityIds'] != null) {
            queryParameters['companyHQsCityIds'] = requestParameters['companyHQsCityIds'];
        }

        if (requestParameters['currentRolesOnly'] != null) {
            queryParameters['currentRolesOnly'] = requestParameters['currentRolesOnly'];
        }

        if (requestParameters['onlyCompaniesWithSalaryData'] != null) {
            queryParameters['onlyCompaniesWithSalaryData'] = requestParameters['onlyCompaniesWithSalaryData'];
        }

        if (requestParameters['onlyInternational'] != null) {
            queryParameters['onlyInternational'] = requestParameters['onlyInternational'];
        }

        if (requestParameters['excludeResearchAndHighEducation'] != null) {
            queryParameters['excludeResearchAndHighEducation'] = requestParameters['excludeResearchAndHighEducation'];
        }

        if (requestParameters['alumniSearch'] != null) {
            queryParameters['alumniSearch'] = requestParameters['alumniSearch'];
        }

        if (requestParameters['companySize'] != null) {
            queryParameters['companySize'] = requestParameters['companySize'];
        }

        if (requestParameters['companyType'] != null) {
            queryParameters['companyType'] = requestParameters['companyType'];
        }

        if (requestParameters['escoCodes'] != null) {
            queryParameters['escoCodes'] = requestParameters['escoCodes'];
        }

        if (requestParameters['escoClassificationLevel'] != null) {
            queryParameters['escoClassificationLevel'] = requestParameters['escoClassificationLevel'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['search'] != null) {
            queryParameters['search'] = requestParameters['search'];
        }

        if (requestParameters['sortBy'] != null) {
            queryParameters['sortBy'] = requestParameters['sortBy'];
        }

        if (requestParameters['sortOrder'] != null) {
            queryParameters['sortOrder'] = requestParameters['sortOrder'];
        }

        if (requestParameters['includeTrend'] != null) {
            queryParameters['includeTrend'] = requestParameters['includeTrend'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/analytics/education/majors`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MajorListDtoFromJSON(jsonValue));
    }

    /**
     * Get the majors, and the number of alumni graduated from them.
     */
    async educationAnalyticsControllerGetMajors(requestParameters: EducationAnalyticsControllerGetMajorsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MajorListDto> {
        const response = await this.educationAnalyticsControllerGetMajorsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all level 1 ESCO classifications
     */
    async escoControllerGetLevelOneClassificationsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<EscoClassificationDto>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/esco/level-one`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EscoClassificationDtoFromJSON));
    }

    /**
     * Get all level 1 ESCO classifications
     */
    async escoControllerGetLevelOneClassifications(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<EscoClassificationDto>> {
        const response = await this.escoControllerGetLevelOneClassificationsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get all level 2 ESCO classifications
     */
    async escoControllerGetLevelTwoClassificationsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<EscoClassificationDto>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/esco/level-two`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EscoClassificationDtoFromJSON));
    }

    /**
     * Get all level 2 ESCO classifications
     */
    async escoControllerGetLevelTwoClassifications(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<EscoClassificationDto>> {
        const response = await this.escoControllerGetLevelTwoClassificationsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Create a faculty
     */
    async facultyControllerCreateRaw(requestParameters: FacultyControllerCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Faculty>> {
        if (requestParameters['createFacultyDto'] == null) {
            throw new runtime.RequiredError(
                'createFacultyDto',
                'Required parameter "createFacultyDto" was null or undefined when calling facultyControllerCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/faculty`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateFacultyDtoToJSON(requestParameters['createFacultyDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FacultyFromJSON(jsonValue));
    }

    /**
     * Create a faculty
     */
    async facultyControllerCreate(requestParameters: FacultyControllerCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Faculty> {
        const response = await this.facultyControllerCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all faculties
     */
    async facultyControllerFindAllRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Faculty>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/faculty`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(FacultyFromJSON));
    }

    /**
     * Get all faculties
     */
    async facultyControllerFindAll(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Faculty>> {
        const response = await this.facultyControllerFindAllRaw(initOverrides);
        return await response.value();
    }

    /**
     * Handles the feedback by inserting it into the database and sending an email to the administrators
     */
    async feedbackControllerCreateRaw(requestParameters: FeedbackControllerCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['sendFeedbackDto'] == null) {
            throw new runtime.RequiredError(
                'sendFeedbackDto',
                'Required parameter "sendFeedbackDto" was null or undefined when calling feedbackControllerCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/feedback`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SendFeedbackDtoToJSON(requestParameters['sendFeedbackDto']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Handles the feedback by inserting it into the database and sending an email to the administrators
     */
    async feedbackControllerCreate(requestParameters: FeedbackControllerCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.feedbackControllerCreateRaw(requestParameters, initOverrides);
    }

    /**
     * Upload a file
     */
    async fileUploadControllerCreateRaw(requestParameters: FileUploadControllerCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters['uploadExtractionDto'] == null) {
            throw new runtime.RequiredError(
                'uploadExtractionDto',
                'Required parameter "uploadExtractionDto" was null or undefined when calling fileUploadControllerCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/files`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UploadExtractionDtoToJSON(requestParameters['uploadExtractionDto']),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Upload a file
     */
    async fileUploadControllerCreate(requestParameters: FileUploadControllerCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.fileUploadControllerCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get the cities options.
     */
    async geoAnalyticsControllerGetCitiesOptionsRaw(requestParameters: GeoAnalyticsControllerGetCitiesOptionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<CityOptionDto>>> {
        const queryParameters: any = {};

        if (requestParameters['countryCodes'] != null) {
            queryParameters['countryCodes'] = requestParameters['countryCodes'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/analytics/geo/city-options`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CityOptionDtoFromJSON));
    }

    /**
     * Get the cities options.
     */
    async geoAnalyticsControllerGetCitiesOptions(requestParameters: GeoAnalyticsControllerGetCitiesOptionsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<CityOptionDto>> {
        const response = await this.geoAnalyticsControllerGetCitiesOptionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get the cities, and the number of alumni working in them.
     */
    async geoAnalyticsControllerGetCitiesWithAlumniCountRaw(requestParameters: GeoAnalyticsControllerGetCitiesWithAlumniCountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CityListResponseDto>> {
        if (requestParameters['includeTrend'] == null) {
            throw new runtime.RequiredError(
                'includeTrend',
                'Required parameter "includeTrend" was null or undefined when calling geoAnalyticsControllerGetCitiesWithAlumniCount().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['alumniIds'] != null) {
            queryParameters['alumniIds'] = requestParameters['alumniIds'];
        }

        if (requestParameters['startDate'] != null) {
            queryParameters['startDate'] = requestParameters['startDate'];
        }

        if (requestParameters['endDate'] != null) {
            queryParameters['endDate'] = requestParameters['endDate'];
        }

        if (requestParameters['facultyIds'] != null) {
            queryParameters['facultyIds'] = requestParameters['facultyIds'];
        }

        if (requestParameters['courseIds'] != null) {
            queryParameters['courseIds'] = requestParameters['courseIds'];
        }

        if (requestParameters['graduationYears'] != null) {
            queryParameters['graduationYears'] = requestParameters['graduationYears'];
        }

        if (requestParameters['companyIds'] != null) {
            queryParameters['companyIds'] = requestParameters['companyIds'];
        }

        if (requestParameters['industryIds'] != null) {
            queryParameters['industryIds'] = requestParameters['industryIds'];
        }

        if (requestParameters['roleCountryCodes'] != null) {
            queryParameters['roleCountryCodes'] = requestParameters['roleCountryCodes'];
        }

        if (requestParameters['roleCityIds'] != null) {
            queryParameters['roleCityIds'] = requestParameters['roleCityIds'];
        }

        if (requestParameters['companyHQsCountryCodes'] != null) {
            queryParameters['companyHQsCountryCodes'] = requestParameters['companyHQsCountryCodes'];
        }

        if (requestParameters['companyHQsCityIds'] != null) {
            queryParameters['companyHQsCityIds'] = requestParameters['companyHQsCityIds'];
        }

        if (requestParameters['currentRolesOnly'] != null) {
            queryParameters['currentRolesOnly'] = requestParameters['currentRolesOnly'];
        }

        if (requestParameters['onlyCompaniesWithSalaryData'] != null) {
            queryParameters['onlyCompaniesWithSalaryData'] = requestParameters['onlyCompaniesWithSalaryData'];
        }

        if (requestParameters['onlyInternational'] != null) {
            queryParameters['onlyInternational'] = requestParameters['onlyInternational'];
        }

        if (requestParameters['excludeResearchAndHighEducation'] != null) {
            queryParameters['excludeResearchAndHighEducation'] = requestParameters['excludeResearchAndHighEducation'];
        }

        if (requestParameters['alumniSearch'] != null) {
            queryParameters['alumniSearch'] = requestParameters['alumniSearch'];
        }

        if (requestParameters['companySize'] != null) {
            queryParameters['companySize'] = requestParameters['companySize'];
        }

        if (requestParameters['companyType'] != null) {
            queryParameters['companyType'] = requestParameters['companyType'];
        }

        if (requestParameters['escoCodes'] != null) {
            queryParameters['escoCodes'] = requestParameters['escoCodes'];
        }

        if (requestParameters['escoClassificationLevel'] != null) {
            queryParameters['escoClassificationLevel'] = requestParameters['escoClassificationLevel'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['search'] != null) {
            queryParameters['search'] = requestParameters['search'];
        }

        if (requestParameters['sortBy'] != null) {
            queryParameters['sortBy'] = requestParameters['sortBy'];
        }

        if (requestParameters['sortOrder'] != null) {
            queryParameters['sortOrder'] = requestParameters['sortOrder'];
        }

        if (requestParameters['includeTrend'] != null) {
            queryParameters['includeTrend'] = requestParameters['includeTrend'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/analytics/geo/cities`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CityListResponseDtoFromJSON(jsonValue));
    }

    /**
     * Get the cities, and the number of alumni working in them.
     */
    async geoAnalyticsControllerGetCitiesWithAlumniCount(requestParameters: GeoAnalyticsControllerGetCitiesWithAlumniCountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CityListResponseDto> {
        const response = await this.geoAnalyticsControllerGetCitiesWithAlumniCountRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get the countries options.
     */
    async geoAnalyticsControllerGetCountriesOptionsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<CountryOptionDto>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/analytics/geo/country-options`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CountryOptionDtoFromJSON));
    }

    /**
     * Get the countries options.
     */
    async geoAnalyticsControllerGetCountriesOptions(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<CountryOptionDto>> {
        const response = await this.geoAnalyticsControllerGetCountriesOptionsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get the countries, and the number of alumni working in them.
     */
    async geoAnalyticsControllerGetCountriesWithAlumniCountRaw(requestParameters: GeoAnalyticsControllerGetCountriesWithAlumniCountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CountryListResponseDto>> {
        if (requestParameters['includeTrend'] == null) {
            throw new runtime.RequiredError(
                'includeTrend',
                'Required parameter "includeTrend" was null or undefined when calling geoAnalyticsControllerGetCountriesWithAlumniCount().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['alumniIds'] != null) {
            queryParameters['alumniIds'] = requestParameters['alumniIds'];
        }

        if (requestParameters['startDate'] != null) {
            queryParameters['startDate'] = requestParameters['startDate'];
        }

        if (requestParameters['endDate'] != null) {
            queryParameters['endDate'] = requestParameters['endDate'];
        }

        if (requestParameters['facultyIds'] != null) {
            queryParameters['facultyIds'] = requestParameters['facultyIds'];
        }

        if (requestParameters['courseIds'] != null) {
            queryParameters['courseIds'] = requestParameters['courseIds'];
        }

        if (requestParameters['graduationYears'] != null) {
            queryParameters['graduationYears'] = requestParameters['graduationYears'];
        }

        if (requestParameters['companyIds'] != null) {
            queryParameters['companyIds'] = requestParameters['companyIds'];
        }

        if (requestParameters['industryIds'] != null) {
            queryParameters['industryIds'] = requestParameters['industryIds'];
        }

        if (requestParameters['roleCountryCodes'] != null) {
            queryParameters['roleCountryCodes'] = requestParameters['roleCountryCodes'];
        }

        if (requestParameters['roleCityIds'] != null) {
            queryParameters['roleCityIds'] = requestParameters['roleCityIds'];
        }

        if (requestParameters['companyHQsCountryCodes'] != null) {
            queryParameters['companyHQsCountryCodes'] = requestParameters['companyHQsCountryCodes'];
        }

        if (requestParameters['companyHQsCityIds'] != null) {
            queryParameters['companyHQsCityIds'] = requestParameters['companyHQsCityIds'];
        }

        if (requestParameters['currentRolesOnly'] != null) {
            queryParameters['currentRolesOnly'] = requestParameters['currentRolesOnly'];
        }

        if (requestParameters['onlyCompaniesWithSalaryData'] != null) {
            queryParameters['onlyCompaniesWithSalaryData'] = requestParameters['onlyCompaniesWithSalaryData'];
        }

        if (requestParameters['onlyInternational'] != null) {
            queryParameters['onlyInternational'] = requestParameters['onlyInternational'];
        }

        if (requestParameters['excludeResearchAndHighEducation'] != null) {
            queryParameters['excludeResearchAndHighEducation'] = requestParameters['excludeResearchAndHighEducation'];
        }

        if (requestParameters['alumniSearch'] != null) {
            queryParameters['alumniSearch'] = requestParameters['alumniSearch'];
        }

        if (requestParameters['companySize'] != null) {
            queryParameters['companySize'] = requestParameters['companySize'];
        }

        if (requestParameters['companyType'] != null) {
            queryParameters['companyType'] = requestParameters['companyType'];
        }

        if (requestParameters['escoCodes'] != null) {
            queryParameters['escoCodes'] = requestParameters['escoCodes'];
        }

        if (requestParameters['escoClassificationLevel'] != null) {
            queryParameters['escoClassificationLevel'] = requestParameters['escoClassificationLevel'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['search'] != null) {
            queryParameters['search'] = requestParameters['search'];
        }

        if (requestParameters['sortBy'] != null) {
            queryParameters['sortBy'] = requestParameters['sortBy'];
        }

        if (requestParameters['sortOrder'] != null) {
            queryParameters['sortOrder'] = requestParameters['sortOrder'];
        }

        if (requestParameters['includeTrend'] != null) {
            queryParameters['includeTrend'] = requestParameters['includeTrend'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/analytics/geo/countries`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CountryListResponseDtoFromJSON(jsonValue));
    }

    /**
     * Get the countries, and the number of alumni working in them.
     */
    async geoAnalyticsControllerGetCountriesWithAlumniCount(requestParameters: GeoAnalyticsControllerGetCountriesWithAlumniCountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CountryListResponseDto> {
        const response = await this.geoAnalyticsControllerGetCountriesWithAlumniCountRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a list of industries with their id and name.
     * List of possible industries to search for.
     */
    async industryAnalyticsControllerGetIndustryOptionsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<IndustryOptionDto>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/analytics/industries/options`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(IndustryOptionDtoFromJSON));
    }

    /**
     * Returns a list of industries with their id and name.
     * List of possible industries to search for.
     */
    async industryAnalyticsControllerGetIndustryOptions(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<IndustryOptionDto>> {
        const response = await this.industryAnalyticsControllerGetIndustryOptionsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Returns the number of alumni working in companies grouped by industry.
     */
    async industryAnalyticsControllerGetIndustryWithCountsRaw(requestParameters: IndustryAnalyticsControllerGetIndustryWithCountsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IndustryListResponseDto>> {
        if (requestParameters['includeTrend'] == null) {
            throw new runtime.RequiredError(
                'includeTrend',
                'Required parameter "includeTrend" was null or undefined when calling industryAnalyticsControllerGetIndustryWithCounts().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['alumniIds'] != null) {
            queryParameters['alumniIds'] = requestParameters['alumniIds'];
        }

        if (requestParameters['startDate'] != null) {
            queryParameters['startDate'] = requestParameters['startDate'];
        }

        if (requestParameters['endDate'] != null) {
            queryParameters['endDate'] = requestParameters['endDate'];
        }

        if (requestParameters['facultyIds'] != null) {
            queryParameters['facultyIds'] = requestParameters['facultyIds'];
        }

        if (requestParameters['courseIds'] != null) {
            queryParameters['courseIds'] = requestParameters['courseIds'];
        }

        if (requestParameters['graduationYears'] != null) {
            queryParameters['graduationYears'] = requestParameters['graduationYears'];
        }

        if (requestParameters['companyIds'] != null) {
            queryParameters['companyIds'] = requestParameters['companyIds'];
        }

        if (requestParameters['industryIds'] != null) {
            queryParameters['industryIds'] = requestParameters['industryIds'];
        }

        if (requestParameters['roleCountryCodes'] != null) {
            queryParameters['roleCountryCodes'] = requestParameters['roleCountryCodes'];
        }

        if (requestParameters['roleCityIds'] != null) {
            queryParameters['roleCityIds'] = requestParameters['roleCityIds'];
        }

        if (requestParameters['companyHQsCountryCodes'] != null) {
            queryParameters['companyHQsCountryCodes'] = requestParameters['companyHQsCountryCodes'];
        }

        if (requestParameters['companyHQsCityIds'] != null) {
            queryParameters['companyHQsCityIds'] = requestParameters['companyHQsCityIds'];
        }

        if (requestParameters['currentRolesOnly'] != null) {
            queryParameters['currentRolesOnly'] = requestParameters['currentRolesOnly'];
        }

        if (requestParameters['onlyCompaniesWithSalaryData'] != null) {
            queryParameters['onlyCompaniesWithSalaryData'] = requestParameters['onlyCompaniesWithSalaryData'];
        }

        if (requestParameters['onlyInternational'] != null) {
            queryParameters['onlyInternational'] = requestParameters['onlyInternational'];
        }

        if (requestParameters['excludeResearchAndHighEducation'] != null) {
            queryParameters['excludeResearchAndHighEducation'] = requestParameters['excludeResearchAndHighEducation'];
        }

        if (requestParameters['alumniSearch'] != null) {
            queryParameters['alumniSearch'] = requestParameters['alumniSearch'];
        }

        if (requestParameters['companySize'] != null) {
            queryParameters['companySize'] = requestParameters['companySize'];
        }

        if (requestParameters['companyType'] != null) {
            queryParameters['companyType'] = requestParameters['companyType'];
        }

        if (requestParameters['escoCodes'] != null) {
            queryParameters['escoCodes'] = requestParameters['escoCodes'];
        }

        if (requestParameters['escoClassificationLevel'] != null) {
            queryParameters['escoClassificationLevel'] = requestParameters['escoClassificationLevel'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['search'] != null) {
            queryParameters['search'] = requestParameters['search'];
        }

        if (requestParameters['sortBy'] != null) {
            queryParameters['sortBy'] = requestParameters['sortBy'];
        }

        if (requestParameters['sortOrder'] != null) {
            queryParameters['sortOrder'] = requestParameters['sortOrder'];
        }

        if (requestParameters['includeTrend'] != null) {
            queryParameters['includeTrend'] = requestParameters['includeTrend'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/analytics/industries`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IndustryListResponseDtoFromJSON(jsonValue));
    }

    /**
     * Returns the number of alumni working in companies grouped by industry.
     */
    async industryAnalyticsControllerGetIndustryWithCounts(requestParameters: IndustryAnalyticsControllerGetIndustryWithCountsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IndustryListResponseDto> {
        const response = await this.industryAnalyticsControllerGetIndustryWithCountsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a review score
     */
    async reviewControllerChangeScoreRaw(requestParameters: ReviewControllerChangeScoreRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['changeReviewScoreDto'] == null) {
            throw new runtime.RequiredError(
                'changeReviewScoreDto',
                'Required parameter "changeReviewScoreDto" was null or undefined when calling reviewControllerChangeScore().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/reviews/changeScore`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ChangeReviewScoreDtoToJSON(requestParameters['changeReviewScoreDto']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Update a review score
     */
    async reviewControllerChangeScore(requestParameters: ReviewControllerChangeScoreRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.reviewControllerChangeScoreRaw(requestParameters, initOverrides);
    }

    /**
     * Create a new review
     */
    async reviewControllerCreateRaw(requestParameters: ReviewControllerCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['createReviewDto'] == null) {
            throw new runtime.RequiredError(
                'createReviewDto',
                'Required parameter "createReviewDto" was null or undefined when calling reviewControllerCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/reviews`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateReviewDtoToJSON(requestParameters['createReviewDto']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Create a new review
     */
    async reviewControllerCreate(requestParameters: ReviewControllerCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.reviewControllerCreateRaw(requestParameters, initOverrides);
    }

    /**
     * Get all the review to be displayed on the map
     */
    async reviewControllerFindAllGeoJSONRaw(requestParameters: ReviewControllerFindAllGeoJSONRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReviewGeoJSONFeatureCollection>> {
        if (requestParameters['groupBy'] == null) {
            throw new runtime.RequiredError(
                'groupBy',
                'Required parameter "groupBy" was null or undefined when calling reviewControllerFindAllGeoJSON().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['groupBy'] != null) {
            queryParameters['groupBy'] = requestParameters['groupBy'];
        }

        if (requestParameters['reviewType'] != null) {
            queryParameters['reviewType'] = requestParameters['reviewType'];
        }

        if (requestParameters['rating'] != null) {
            queryParameters['rating'] = requestParameters['rating'];
        }

        if (requestParameters['dateFrom'] != null) {
            queryParameters['dateFrom'] = (requestParameters['dateFrom'] as any).toISOString();
        }

        if (requestParameters['dateTo'] != null) {
            queryParameters['dateTo'] = (requestParameters['dateTo'] as any).toISOString();
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/reviews/geoJSON`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReviewGeoJSONFeatureCollectionFromJSON(jsonValue));
    }

    /**
     * Get all the review to be displayed on the map
     */
    async reviewControllerFindAllGeoJSON(requestParameters: ReviewControllerFindAllGeoJSONRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReviewGeoJSONFeatureCollection> {
        const response = await this.reviewControllerFindAllGeoJSONRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a list of roles with their ESCO code and title.
     * Gets the hierarchy of a role
     */
    async roleAnalyticsControllerGetRoleHierarchyRaw(requestParameters: RoleAnalyticsControllerGetRoleHierarchyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters['code'] == null) {
            throw new runtime.RequiredError(
                'code',
                'Required parameter "code" was null or undefined when calling roleAnalyticsControllerGetRoleHierarchy().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['code'] != null) {
            queryParameters['code'] = requestParameters['code'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/analytics/roles/hierarchy`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Returns a list of roles with their ESCO code and title.
     * Gets the hierarchy of a role
     */
    async roleAnalyticsControllerGetRoleHierarchy(requestParameters: RoleAnalyticsControllerGetRoleHierarchyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.roleAnalyticsControllerGetRoleHierarchyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a list of roles with their ESCO code and title.
     * List of possible role titles to search for.
     */
    async roleAnalyticsControllerGetRoleOptionsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<RoleOptionDto>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/analytics/roles/options`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(RoleOptionDtoFromJSON));
    }

    /**
     * Returns a list of roles with their ESCO code and title.
     * List of possible role titles to search for.
     */
    async roleAnalyticsControllerGetRoleOptions(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<RoleOptionDto>> {
        const response = await this.roleAnalyticsControllerGetRoleOptionsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Returns the number of roles classified with each ESCO classification
     */
    async roleAnalyticsControllerGetRolesRaw(requestParameters: RoleAnalyticsControllerGetRolesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RoleListResponseDto>> {
        if (requestParameters['includeTrend'] == null) {
            throw new runtime.RequiredError(
                'includeTrend',
                'Required parameter "includeTrend" was null or undefined when calling roleAnalyticsControllerGetRoles().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['alumniIds'] != null) {
            queryParameters['alumniIds'] = requestParameters['alumniIds'];
        }

        if (requestParameters['startDate'] != null) {
            queryParameters['startDate'] = requestParameters['startDate'];
        }

        if (requestParameters['endDate'] != null) {
            queryParameters['endDate'] = requestParameters['endDate'];
        }

        if (requestParameters['facultyIds'] != null) {
            queryParameters['facultyIds'] = requestParameters['facultyIds'];
        }

        if (requestParameters['courseIds'] != null) {
            queryParameters['courseIds'] = requestParameters['courseIds'];
        }

        if (requestParameters['graduationYears'] != null) {
            queryParameters['graduationYears'] = requestParameters['graduationYears'];
        }

        if (requestParameters['companyIds'] != null) {
            queryParameters['companyIds'] = requestParameters['companyIds'];
        }

        if (requestParameters['industryIds'] != null) {
            queryParameters['industryIds'] = requestParameters['industryIds'];
        }

        if (requestParameters['roleCountryCodes'] != null) {
            queryParameters['roleCountryCodes'] = requestParameters['roleCountryCodes'];
        }

        if (requestParameters['roleCityIds'] != null) {
            queryParameters['roleCityIds'] = requestParameters['roleCityIds'];
        }

        if (requestParameters['companyHQsCountryCodes'] != null) {
            queryParameters['companyHQsCountryCodes'] = requestParameters['companyHQsCountryCodes'];
        }

        if (requestParameters['companyHQsCityIds'] != null) {
            queryParameters['companyHQsCityIds'] = requestParameters['companyHQsCityIds'];
        }

        if (requestParameters['currentRolesOnly'] != null) {
            queryParameters['currentRolesOnly'] = requestParameters['currentRolesOnly'];
        }

        if (requestParameters['onlyCompaniesWithSalaryData'] != null) {
            queryParameters['onlyCompaniesWithSalaryData'] = requestParameters['onlyCompaniesWithSalaryData'];
        }

        if (requestParameters['onlyInternational'] != null) {
            queryParameters['onlyInternational'] = requestParameters['onlyInternational'];
        }

        if (requestParameters['excludeResearchAndHighEducation'] != null) {
            queryParameters['excludeResearchAndHighEducation'] = requestParameters['excludeResearchAndHighEducation'];
        }

        if (requestParameters['alumniSearch'] != null) {
            queryParameters['alumniSearch'] = requestParameters['alumniSearch'];
        }

        if (requestParameters['companySize'] != null) {
            queryParameters['companySize'] = requestParameters['companySize'];
        }

        if (requestParameters['companyType'] != null) {
            queryParameters['companyType'] = requestParameters['companyType'];
        }

        if (requestParameters['escoCodes'] != null) {
            queryParameters['escoCodes'] = requestParameters['escoCodes'];
        }

        if (requestParameters['escoClassificationLevel'] != null) {
            queryParameters['escoClassificationLevel'] = requestParameters['escoClassificationLevel'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['search'] != null) {
            queryParameters['search'] = requestParameters['search'];
        }

        if (requestParameters['sortBy'] != null) {
            queryParameters['sortBy'] = requestParameters['sortBy'];
        }

        if (requestParameters['sortOrder'] != null) {
            queryParameters['sortOrder'] = requestParameters['sortOrder'];
        }

        if (requestParameters['includeTrend'] != null) {
            queryParameters['includeTrend'] = requestParameters['includeTrend'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/analytics/roles`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RoleListResponseDtoFromJSON(jsonValue));
    }

    /**
     * Returns the number of roles classified with each ESCO classification
     */
    async roleAnalyticsControllerGetRoles(requestParameters: RoleAnalyticsControllerGetRolesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RoleListResponseDto> {
        const response = await this.roleAnalyticsControllerGetRolesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Check if a user has a permission
     */
    async userControllerCheckPermissionRaw(requestParameters: UserControllerCheckPermissionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CheckPermissionResponse>> {
        if (requestParameters['checkPermissionDto'] == null) {
            throw new runtime.RequiredError(
                'checkPermissionDto',
                'Required parameter "checkPermissionDto" was null or undefined when calling userControllerCheckPermission().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/user/check-permission`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CheckPermissionDtoToJSON(requestParameters['checkPermissionDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CheckPermissionResponseFromJSON(jsonValue));
    }

    /**
     * Check if a user has a permission
     */
    async userControllerCheckPermission(requestParameters: UserControllerCheckPermissionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CheckPermissionResponse> {
        const response = await this.userControllerCheckPermissionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a user
     */
    async userControllerDeleteUserRaw(requestParameters: UserControllerDeleteUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['deleteUserDto'] == null) {
            throw new runtime.RequiredError(
                'deleteUserDto',
                'Required parameter "deleteUserDto" was null or undefined when calling userControllerDeleteUser().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/user/delete-user`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DeleteUserDtoToJSON(requestParameters['deleteUserDto']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a user
     */
    async userControllerDeleteUser(requestParameters: UserControllerDeleteUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.userControllerDeleteUserRaw(requestParameters, initOverrides);
    }

    /**
     * Authenticate a user with LinkedIn
     */
    async userControllerLinkedinAuthRaw(requestParameters: UserControllerLinkedinAuthRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserAuthResponse>> {
        if (requestParameters['linkedinAuthDto'] == null) {
            throw new runtime.RequiredError(
                'linkedinAuthDto',
                'Required parameter "linkedinAuthDto" was null or undefined when calling userControllerLinkedinAuth().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/user/linkedinAuth`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LinkedinAuthDtoToJSON(requestParameters['linkedinAuthDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserAuthResponseFromJSON(jsonValue));
    }

    /**
     * Authenticate a user with LinkedIn
     */
    async userControllerLinkedinAuth(requestParameters: UserControllerLinkedinAuthRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserAuthResponse> {
        const response = await this.userControllerLinkedinAuthRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Confirm the LinkedIn profile and generate a JWT token
     */
    async userControllerLinkedinConfirmRaw(requestParameters: UserControllerLinkedinConfirmRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserAuthResponse>> {
        if (requestParameters['linkedinAuthDto'] == null) {
            throw new runtime.RequiredError(
                'linkedinAuthDto',
                'Required parameter "linkedinAuthDto" was null or undefined when calling userControllerLinkedinConfirm().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/user/linkedin-confirm`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LinkedinAuthDtoToJSON(requestParameters['linkedinAuthDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserAuthResponseFromJSON(jsonValue));
    }

    /**
     * Confirm the LinkedIn profile and generate a JWT token
     */
    async userControllerLinkedinConfirm(requestParameters: UserControllerLinkedinConfirmRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserAuthResponse> {
        const response = await this.userControllerLinkedinConfirmRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Verify the email of the alumni by generating a token and sending it to the email
     */
    async userControllerVerifyEmailRaw(requestParameters: UserControllerVerifyEmailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['verifyEmailDto'] == null) {
            throw new runtime.RequiredError(
                'verifyEmailDto',
                'Required parameter "verifyEmailDto" was null or undefined when calling userControllerVerifyEmail().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/user/verify-email`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: VerifyEmailDtoToJSON(requestParameters['verifyEmailDto']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Verify the email of the alumni by generating a token and sending it to the email
     */
    async userControllerVerifyEmail(requestParameters: UserControllerVerifyEmailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.userControllerVerifyEmailRaw(requestParameters, initOverrides);
    }

    /**
     * Validate the token against the email
     */
    async userControllerVerifyEmailTokenRaw(requestParameters: UserControllerVerifyEmailTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['verifyEmailTokenDto'] == null) {
            throw new runtime.RequiredError(
                'verifyEmailTokenDto',
                'Required parameter "verifyEmailTokenDto" was null or undefined when calling userControllerVerifyEmailToken().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/user/verify-email/token`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: VerifyEmailTokenDtoToJSON(requestParameters['verifyEmailTokenDto']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Validate the token against the email
     */
    async userControllerVerifyEmailToken(requestParameters: UserControllerVerifyEmailTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.userControllerVerifyEmailTokenRaw(requestParameters, initOverrides);
    }

}

/**
 * @export
 */
export const AlumniAnalyticsControllerGetAlumniListCompanySizeEnum = {
    A: 'A',
    B: 'B',
    C: 'C',
    D: 'D',
    E: 'E',
    F: 'F',
    G: 'G',
    H: 'H',
    I: 'I'
} as const;
export type AlumniAnalyticsControllerGetAlumniListCompanySizeEnum = typeof AlumniAnalyticsControllerGetAlumniListCompanySizeEnum[keyof typeof AlumniAnalyticsControllerGetAlumniListCompanySizeEnum];
/**
 * @export
 */
export const AlumniAnalyticsControllerGetAlumniListCompanyTypeEnum = {
    Educational: 'EDUCATIONAL',
    GovernmentAgency: 'GOVERNMENT_AGENCY',
    NonProfit: 'NON_PROFIT',
    Partnership: 'PARTNERSHIP',
    PrivatelyHeld: 'PRIVATELY_HELD',
    PublicCompany: 'PUBLIC_COMPANY',
    SelfEmployed: 'SELF_EMPLOYED',
    SelfOwned: 'SELF_OWNED'
} as const;
export type AlumniAnalyticsControllerGetAlumniListCompanyTypeEnum = typeof AlumniAnalyticsControllerGetAlumniListCompanyTypeEnum[keyof typeof AlumniAnalyticsControllerGetAlumniListCompanyTypeEnum];
/**
 * @export
 */
export const AlumniAnalyticsControllerGetAlumniListSortByEnum = {
    Count: 'count',
    Name: 'name',
    Year: 'year'
} as const;
export type AlumniAnalyticsControllerGetAlumniListSortByEnum = typeof AlumniAnalyticsControllerGetAlumniListSortByEnum[keyof typeof AlumniAnalyticsControllerGetAlumniListSortByEnum];
/**
 * @export
 */
export const AlumniControllerFindAllGeoJSONGroupByEnum = {
    Countries: 'countries',
    Cities: 'cities'
} as const;
export type AlumniControllerFindAllGeoJSONGroupByEnum = typeof AlumniControllerFindAllGeoJSONGroupByEnum[keyof typeof AlumniControllerFindAllGeoJSONGroupByEnum];
/**
 * @export
 */
export const CompanyAnalyticsControllerGetCompaniesWithAlumniCountCompanySizeEnum = {
    A: 'A',
    B: 'B',
    C: 'C',
    D: 'D',
    E: 'E',
    F: 'F',
    G: 'G',
    H: 'H',
    I: 'I'
} as const;
export type CompanyAnalyticsControllerGetCompaniesWithAlumniCountCompanySizeEnum = typeof CompanyAnalyticsControllerGetCompaniesWithAlumniCountCompanySizeEnum[keyof typeof CompanyAnalyticsControllerGetCompaniesWithAlumniCountCompanySizeEnum];
/**
 * @export
 */
export const CompanyAnalyticsControllerGetCompaniesWithAlumniCountCompanyTypeEnum = {
    Educational: 'EDUCATIONAL',
    GovernmentAgency: 'GOVERNMENT_AGENCY',
    NonProfit: 'NON_PROFIT',
    Partnership: 'PARTNERSHIP',
    PrivatelyHeld: 'PRIVATELY_HELD',
    PublicCompany: 'PUBLIC_COMPANY',
    SelfEmployed: 'SELF_EMPLOYED',
    SelfOwned: 'SELF_OWNED'
} as const;
export type CompanyAnalyticsControllerGetCompaniesWithAlumniCountCompanyTypeEnum = typeof CompanyAnalyticsControllerGetCompaniesWithAlumniCountCompanyTypeEnum[keyof typeof CompanyAnalyticsControllerGetCompaniesWithAlumniCountCompanyTypeEnum];
/**
 * @export
 */
export const CompanyAnalyticsControllerGetCompaniesWithAlumniCountSortByEnum = {
    Count: 'count',
    Name: 'name',
    Year: 'year'
} as const;
export type CompanyAnalyticsControllerGetCompaniesWithAlumniCountSortByEnum = typeof CompanyAnalyticsControllerGetCompaniesWithAlumniCountSortByEnum[keyof typeof CompanyAnalyticsControllerGetCompaniesWithAlumniCountSortByEnum];
/**
 * @export
 */
export const EducationAnalyticsControllerGetFacultiesCompanySizeEnum = {
    A: 'A',
    B: 'B',
    C: 'C',
    D: 'D',
    E: 'E',
    F: 'F',
    G: 'G',
    H: 'H',
    I: 'I'
} as const;
export type EducationAnalyticsControllerGetFacultiesCompanySizeEnum = typeof EducationAnalyticsControllerGetFacultiesCompanySizeEnum[keyof typeof EducationAnalyticsControllerGetFacultiesCompanySizeEnum];
/**
 * @export
 */
export const EducationAnalyticsControllerGetFacultiesCompanyTypeEnum = {
    Educational: 'EDUCATIONAL',
    GovernmentAgency: 'GOVERNMENT_AGENCY',
    NonProfit: 'NON_PROFIT',
    Partnership: 'PARTNERSHIP',
    PrivatelyHeld: 'PRIVATELY_HELD',
    PublicCompany: 'PUBLIC_COMPANY',
    SelfEmployed: 'SELF_EMPLOYED',
    SelfOwned: 'SELF_OWNED'
} as const;
export type EducationAnalyticsControllerGetFacultiesCompanyTypeEnum = typeof EducationAnalyticsControllerGetFacultiesCompanyTypeEnum[keyof typeof EducationAnalyticsControllerGetFacultiesCompanyTypeEnum];
/**
 * @export
 */
export const EducationAnalyticsControllerGetFacultiesSortByEnum = {
    Count: 'count',
    Name: 'name',
    Year: 'year'
} as const;
export type EducationAnalyticsControllerGetFacultiesSortByEnum = typeof EducationAnalyticsControllerGetFacultiesSortByEnum[keyof typeof EducationAnalyticsControllerGetFacultiesSortByEnum];
/**
 * @export
 */
export const EducationAnalyticsControllerGetGraduationsCompanySizeEnum = {
    A: 'A',
    B: 'B',
    C: 'C',
    D: 'D',
    E: 'E',
    F: 'F',
    G: 'G',
    H: 'H',
    I: 'I'
} as const;
export type EducationAnalyticsControllerGetGraduationsCompanySizeEnum = typeof EducationAnalyticsControllerGetGraduationsCompanySizeEnum[keyof typeof EducationAnalyticsControllerGetGraduationsCompanySizeEnum];
/**
 * @export
 */
export const EducationAnalyticsControllerGetGraduationsCompanyTypeEnum = {
    Educational: 'EDUCATIONAL',
    GovernmentAgency: 'GOVERNMENT_AGENCY',
    NonProfit: 'NON_PROFIT',
    Partnership: 'PARTNERSHIP',
    PrivatelyHeld: 'PRIVATELY_HELD',
    PublicCompany: 'PUBLIC_COMPANY',
    SelfEmployed: 'SELF_EMPLOYED',
    SelfOwned: 'SELF_OWNED'
} as const;
export type EducationAnalyticsControllerGetGraduationsCompanyTypeEnum = typeof EducationAnalyticsControllerGetGraduationsCompanyTypeEnum[keyof typeof EducationAnalyticsControllerGetGraduationsCompanyTypeEnum];
/**
 * @export
 */
export const EducationAnalyticsControllerGetGraduationsSortByEnum = {
    Count: 'count',
    Name: 'name',
    Year: 'year'
} as const;
export type EducationAnalyticsControllerGetGraduationsSortByEnum = typeof EducationAnalyticsControllerGetGraduationsSortByEnum[keyof typeof EducationAnalyticsControllerGetGraduationsSortByEnum];
/**
 * @export
 */
export const EducationAnalyticsControllerGetMajorsCompanySizeEnum = {
    A: 'A',
    B: 'B',
    C: 'C',
    D: 'D',
    E: 'E',
    F: 'F',
    G: 'G',
    H: 'H',
    I: 'I'
} as const;
export type EducationAnalyticsControllerGetMajorsCompanySizeEnum = typeof EducationAnalyticsControllerGetMajorsCompanySizeEnum[keyof typeof EducationAnalyticsControllerGetMajorsCompanySizeEnum];
/**
 * @export
 */
export const EducationAnalyticsControllerGetMajorsCompanyTypeEnum = {
    Educational: 'EDUCATIONAL',
    GovernmentAgency: 'GOVERNMENT_AGENCY',
    NonProfit: 'NON_PROFIT',
    Partnership: 'PARTNERSHIP',
    PrivatelyHeld: 'PRIVATELY_HELD',
    PublicCompany: 'PUBLIC_COMPANY',
    SelfEmployed: 'SELF_EMPLOYED',
    SelfOwned: 'SELF_OWNED'
} as const;
export type EducationAnalyticsControllerGetMajorsCompanyTypeEnum = typeof EducationAnalyticsControllerGetMajorsCompanyTypeEnum[keyof typeof EducationAnalyticsControllerGetMajorsCompanyTypeEnum];
/**
 * @export
 */
export const EducationAnalyticsControllerGetMajorsSortByEnum = {
    Count: 'count',
    Name: 'name',
    Year: 'year'
} as const;
export type EducationAnalyticsControllerGetMajorsSortByEnum = typeof EducationAnalyticsControllerGetMajorsSortByEnum[keyof typeof EducationAnalyticsControllerGetMajorsSortByEnum];
/**
 * @export
 */
export const GeoAnalyticsControllerGetCitiesWithAlumniCountCompanySizeEnum = {
    A: 'A',
    B: 'B',
    C: 'C',
    D: 'D',
    E: 'E',
    F: 'F',
    G: 'G',
    H: 'H',
    I: 'I'
} as const;
export type GeoAnalyticsControllerGetCitiesWithAlumniCountCompanySizeEnum = typeof GeoAnalyticsControllerGetCitiesWithAlumniCountCompanySizeEnum[keyof typeof GeoAnalyticsControllerGetCitiesWithAlumniCountCompanySizeEnum];
/**
 * @export
 */
export const GeoAnalyticsControllerGetCitiesWithAlumniCountCompanyTypeEnum = {
    Educational: 'EDUCATIONAL',
    GovernmentAgency: 'GOVERNMENT_AGENCY',
    NonProfit: 'NON_PROFIT',
    Partnership: 'PARTNERSHIP',
    PrivatelyHeld: 'PRIVATELY_HELD',
    PublicCompany: 'PUBLIC_COMPANY',
    SelfEmployed: 'SELF_EMPLOYED',
    SelfOwned: 'SELF_OWNED'
} as const;
export type GeoAnalyticsControllerGetCitiesWithAlumniCountCompanyTypeEnum = typeof GeoAnalyticsControllerGetCitiesWithAlumniCountCompanyTypeEnum[keyof typeof GeoAnalyticsControllerGetCitiesWithAlumniCountCompanyTypeEnum];
/**
 * @export
 */
export const GeoAnalyticsControllerGetCitiesWithAlumniCountSortByEnum = {
    Count: 'count',
    Name: 'name',
    Year: 'year'
} as const;
export type GeoAnalyticsControllerGetCitiesWithAlumniCountSortByEnum = typeof GeoAnalyticsControllerGetCitiesWithAlumniCountSortByEnum[keyof typeof GeoAnalyticsControllerGetCitiesWithAlumniCountSortByEnum];
/**
 * @export
 */
export const GeoAnalyticsControllerGetCountriesWithAlumniCountCompanySizeEnum = {
    A: 'A',
    B: 'B',
    C: 'C',
    D: 'D',
    E: 'E',
    F: 'F',
    G: 'G',
    H: 'H',
    I: 'I'
} as const;
export type GeoAnalyticsControllerGetCountriesWithAlumniCountCompanySizeEnum = typeof GeoAnalyticsControllerGetCountriesWithAlumniCountCompanySizeEnum[keyof typeof GeoAnalyticsControllerGetCountriesWithAlumniCountCompanySizeEnum];
/**
 * @export
 */
export const GeoAnalyticsControllerGetCountriesWithAlumniCountCompanyTypeEnum = {
    Educational: 'EDUCATIONAL',
    GovernmentAgency: 'GOVERNMENT_AGENCY',
    NonProfit: 'NON_PROFIT',
    Partnership: 'PARTNERSHIP',
    PrivatelyHeld: 'PRIVATELY_HELD',
    PublicCompany: 'PUBLIC_COMPANY',
    SelfEmployed: 'SELF_EMPLOYED',
    SelfOwned: 'SELF_OWNED'
} as const;
export type GeoAnalyticsControllerGetCountriesWithAlumniCountCompanyTypeEnum = typeof GeoAnalyticsControllerGetCountriesWithAlumniCountCompanyTypeEnum[keyof typeof GeoAnalyticsControllerGetCountriesWithAlumniCountCompanyTypeEnum];
/**
 * @export
 */
export const GeoAnalyticsControllerGetCountriesWithAlumniCountSortByEnum = {
    Count: 'count',
    Name: 'name',
    Year: 'year'
} as const;
export type GeoAnalyticsControllerGetCountriesWithAlumniCountSortByEnum = typeof GeoAnalyticsControllerGetCountriesWithAlumniCountSortByEnum[keyof typeof GeoAnalyticsControllerGetCountriesWithAlumniCountSortByEnum];
/**
 * @export
 */
export const IndustryAnalyticsControllerGetIndustryWithCountsCompanySizeEnum = {
    A: 'A',
    B: 'B',
    C: 'C',
    D: 'D',
    E: 'E',
    F: 'F',
    G: 'G',
    H: 'H',
    I: 'I'
} as const;
export type IndustryAnalyticsControllerGetIndustryWithCountsCompanySizeEnum = typeof IndustryAnalyticsControllerGetIndustryWithCountsCompanySizeEnum[keyof typeof IndustryAnalyticsControllerGetIndustryWithCountsCompanySizeEnum];
/**
 * @export
 */
export const IndustryAnalyticsControllerGetIndustryWithCountsCompanyTypeEnum = {
    Educational: 'EDUCATIONAL',
    GovernmentAgency: 'GOVERNMENT_AGENCY',
    NonProfit: 'NON_PROFIT',
    Partnership: 'PARTNERSHIP',
    PrivatelyHeld: 'PRIVATELY_HELD',
    PublicCompany: 'PUBLIC_COMPANY',
    SelfEmployed: 'SELF_EMPLOYED',
    SelfOwned: 'SELF_OWNED'
} as const;
export type IndustryAnalyticsControllerGetIndustryWithCountsCompanyTypeEnum = typeof IndustryAnalyticsControllerGetIndustryWithCountsCompanyTypeEnum[keyof typeof IndustryAnalyticsControllerGetIndustryWithCountsCompanyTypeEnum];
/**
 * @export
 */
export const IndustryAnalyticsControllerGetIndustryWithCountsSortByEnum = {
    Count: 'count',
    Name: 'name',
    Year: 'year'
} as const;
export type IndustryAnalyticsControllerGetIndustryWithCountsSortByEnum = typeof IndustryAnalyticsControllerGetIndustryWithCountsSortByEnum[keyof typeof IndustryAnalyticsControllerGetIndustryWithCountsSortByEnum];
/**
 * @export
 */
export const ReviewControllerFindAllGeoJSONGroupByEnum = {
    Countries: 'countries',
    Cities: 'cities'
} as const;
export type ReviewControllerFindAllGeoJSONGroupByEnum = typeof ReviewControllerFindAllGeoJSONGroupByEnum[keyof typeof ReviewControllerFindAllGeoJSONGroupByEnum];
/**
 * @export
 */
export const RoleAnalyticsControllerGetRolesCompanySizeEnum = {
    A: 'A',
    B: 'B',
    C: 'C',
    D: 'D',
    E: 'E',
    F: 'F',
    G: 'G',
    H: 'H',
    I: 'I'
} as const;
export type RoleAnalyticsControllerGetRolesCompanySizeEnum = typeof RoleAnalyticsControllerGetRolesCompanySizeEnum[keyof typeof RoleAnalyticsControllerGetRolesCompanySizeEnum];
/**
 * @export
 */
export const RoleAnalyticsControllerGetRolesCompanyTypeEnum = {
    Educational: 'EDUCATIONAL',
    GovernmentAgency: 'GOVERNMENT_AGENCY',
    NonProfit: 'NON_PROFIT',
    Partnership: 'PARTNERSHIP',
    PrivatelyHeld: 'PRIVATELY_HELD',
    PublicCompany: 'PUBLIC_COMPANY',
    SelfEmployed: 'SELF_EMPLOYED',
    SelfOwned: 'SELF_OWNED'
} as const;
export type RoleAnalyticsControllerGetRolesCompanyTypeEnum = typeof RoleAnalyticsControllerGetRolesCompanyTypeEnum[keyof typeof RoleAnalyticsControllerGetRolesCompanyTypeEnum];
/**
 * @export
 */
export const RoleAnalyticsControllerGetRolesSortByEnum = {
    Count: 'count',
    Name: 'name',
    Year: 'year'
} as const;
export type RoleAnalyticsControllerGetRolesSortByEnum = typeof RoleAnalyticsControllerGetRolesSortByEnum[keyof typeof RoleAnalyticsControllerGetRolesSortByEnum];
