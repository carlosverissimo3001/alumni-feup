/* tslint:disable */
/* eslint-disable */
/**
 * API
 * API description
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Alumni,
  AlumniExtended,
  BasicAlumniProfileDto,
  CompanyListResponseDto,
  CountryListResponseDto,
  CourseExtended,
  CreateAlumniDto,
  Faculty,
  GeoJSONFeatureCollection,
  IndustryListResponseDto,
  LinkedinAuthDto,
  MarkAsReviewedDto,
  UploadExtractionDto,
  UserAuthResponse,
  VerifyEmailDto,
  VerifyEmailTokenDto,
} from '../models/index';
import {
    AlumniFromJSON,
    AlumniToJSON,
    AlumniExtendedFromJSON,
    AlumniExtendedToJSON,
    BasicAlumniProfileDtoFromJSON,
    BasicAlumniProfileDtoToJSON,
    CompanyListResponseDtoFromJSON,
    CompanyListResponseDtoToJSON,
    CountryListResponseDtoFromJSON,
    CountryListResponseDtoToJSON,
    CourseExtendedFromJSON,
    CourseExtendedToJSON,
    CreateAlumniDtoFromJSON,
    CreateAlumniDtoToJSON,
    FacultyFromJSON,
    FacultyToJSON,
    GeoJSONFeatureCollectionFromJSON,
    GeoJSONFeatureCollectionToJSON,
    IndustryListResponseDtoFromJSON,
    IndustryListResponseDtoToJSON,
    LinkedinAuthDtoFromJSON,
    LinkedinAuthDtoToJSON,
    MarkAsReviewedDtoFromJSON,
    MarkAsReviewedDtoToJSON,
    UploadExtractionDtoFromJSON,
    UploadExtractionDtoToJSON,
    UserAuthResponseFromJSON,
    UserAuthResponseToJSON,
    VerifyEmailDtoFromJSON,
    VerifyEmailDtoToJSON,
    VerifyEmailTokenDtoFromJSON,
    VerifyEmailTokenDtoToJSON,
} from '../models/index';

export interface AlumniControllerCreateRequest {
    createAlumniDto: CreateAlumniDto;
}

export interface AlumniControllerFindAllGeoJSONRequest {
    groupBy: AlumniControllerFindAllGeoJSONGroupByEnum;
    courseIds?: Array<string>;
    conclusionYears?: Array<string>;
    selectedYear?: number;
    compareYear?: number;
}

export interface AlumniControllerFindOneRequest {
    id: string;
}

export interface AlumniControllerGetBasicProfileRequest {
    id: string;
}

export interface AlumniControllerMarkAsReviewedRequest {
    markAsReviewedDto: MarkAsReviewedDto;
}

export interface AlumniControllerVerifyEmailRequest {
    verifyEmailDto: VerifyEmailDto;
}

export interface AlumniControllerVerifyEmailTokenRequest {
    verifyEmailTokenDto: VerifyEmailTokenDto;
}

export interface CompaniesAnalyticsControllerGetCompaniesWithAlumniCountRequest {
    limit: number;
    offset: number;
    sortBy: string;
    sortOrder: string;
    startDate?: string;
    endDate?: string;
    courseIds?: Array<string>;
    companyIds?: Array<string>;
    graduationYears?: Array<string>;
    industryIds?: Array<string>;
    locationIds?: Array<string>;
    countries?: Array<string>;
    currentRolesOnly?: boolean;
    search?: string;
}

export interface CompaniesAnalyticsControllerGetCompanyDetailsRequest {
    id: string;
    limit: number;
    offset: number;
    sortBy: string;
    sortOrder: string;
    startDate?: string;
    endDate?: string;
    courseIds?: Array<string>;
    companyIds?: Array<string>;
    graduationYears?: Array<string>;
    industryIds?: Array<string>;
    locationIds?: Array<string>;
    countries?: Array<string>;
    currentRolesOnly?: boolean;
    search?: string;
}

export interface CompaniesAnalyticsControllerGetIndustryWithCountsRequest {
    limit: number;
    offset: number;
    sortBy: string;
    sortOrder: string;
    startDate?: string;
    endDate?: string;
    courseIds?: Array<string>;
    companyIds?: Array<string>;
    graduationYears?: Array<string>;
    industryIds?: Array<string>;
    locationIds?: Array<string>;
    countries?: Array<string>;
    currentRolesOnly?: boolean;
    search?: string;
}

export interface CompanyControllerFindOneRequest {
    id: string;
}

export interface CountriesAnalyticsControllerGetCountriesWithAlumniCountRequest {
    limit: number;
    offset: number;
    sortBy: string;
    sortOrder: string;
    startDate?: string;
    endDate?: string;
    courseIds?: Array<string>;
    companyIds?: Array<string>;
    graduationYears?: Array<string>;
    industryIds?: Array<string>;
    locationIds?: Array<string>;
    countries?: Array<string>;
    currentRolesOnly?: boolean;
    search?: string;
}

export interface CourseControllerFindRequest {
    facultyId?: string;
    status?: CourseControllerFindStatusEnum;
    name?: string;
}

export interface CourseControllerFindOneRequest {
    id: string;
}

export interface FileUploadControllerCreateRequest {
    uploadExtractionDto: UploadExtractionDto;
}

export interface UserControllerLinkedinAuthRequest {
    linkedinAuthDto: LinkedinAuthDto;
}

/**
 * V1Api - interface
 * 
 * @export
 * @interface V1ApiInterface
 */
export interface V1ApiInterface {
    /**
     * 
     * @summary Get BrightData balance
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    adminControllerGetBrightDataBalanceRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<number>>;

    /**
     * Get BrightData balance
     */
    adminControllerGetBrightDataBalance(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<number>;

    /**
     * 
     * @summary Get ProxyCurl balance
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    adminControllerGetProxyCurlBalanceRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<number>>;

    /**
     * Get ProxyCurl balance
     */
    adminControllerGetProxyCurlBalance(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<number>;

    /**
     * 
     * @summary Create a new alumni
     * @param {CreateAlumniDto} createAlumniDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    alumniControllerCreateRaw(requestParameters: AlumniControllerCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Alumni>>;

    /**
     * Create a new alumni
     */
    alumniControllerCreate(requestParameters: AlumniControllerCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Alumni>;

    /**
     * 
     * @summary Get all alumni, enriched with location, graduations and roles
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    alumniControllerFindAllRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Alumni>>>;

    /**
     * Get all alumni, enriched with location, graduations and roles
     */
    alumniControllerFindAll(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Alumni>>;

    /**
     * 
     * @summary Get all alumni to be displayed in the map
     * @param {'countries' | 'cities'} groupBy How to group the data
     * @param {Array<string>} [courseIds] The ID(s) of the course(s)
     * @param {Array<string>} [conclusionYears] The year(s) of conclusion(s)
     * @param {number} [selectedYear] The selected year
     * @param {number} [compareYear] The year to compare to
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    alumniControllerFindAllGeoJSONRaw(requestParameters: AlumniControllerFindAllGeoJSONRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GeoJSONFeatureCollection>>;

    /**
     * Get all alumni to be displayed in the map
     */
    alumniControllerFindAllGeoJSON(requestParameters: AlumniControllerFindAllGeoJSONRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GeoJSONFeatureCollection>;

    /**
     * 
     * @summary Get alumni by id, enriched with location, graduations and roles
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    alumniControllerFindOneRaw(requestParameters: AlumniControllerFindOneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Alumni>>;

    /**
     * Get alumni by id, enriched with location, graduations and roles
     */
    alumniControllerFindOne(requestParameters: AlumniControllerFindOneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Alumni>;

    /**
     * 
     * @summary Get all alumni submissions that need to be reviewed
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    alumniControllerGetAlumniToReviewRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<AlumniExtended>>>;

    /**
     * Get all alumni submissions that need to be reviewed
     */
    alumniControllerGetAlumniToReview(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<AlumniExtended>>;

    /**
     * 
     * @summary Get basic profile of an alumni
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    alumniControllerGetBasicProfileRaw(requestParameters: AlumniControllerGetBasicProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BasicAlumniProfileDto>>;

    /**
     * Get basic profile of an alumni
     */
    alumniControllerGetBasicProfile(requestParameters: AlumniControllerGetBasicProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BasicAlumniProfileDto>;

    /**
     * 
     * @summary Mark an alumni as reviewed
     * @param {MarkAsReviewedDto} markAsReviewedDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    alumniControllerMarkAsReviewedRaw(requestParameters: AlumniControllerMarkAsReviewedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Alumni>>;

    /**
     * Mark an alumni as reviewed
     */
    alumniControllerMarkAsReviewed(requestParameters: AlumniControllerMarkAsReviewedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Alumni>;

    /**
     * 
     * @summary Verify the email of the alumni by generating a token and sending it to the email
     * @param {VerifyEmailDto} verifyEmailDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    alumniControllerVerifyEmailRaw(requestParameters: AlumniControllerVerifyEmailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Verify the email of the alumni by generating a token and sending it to the email
     */
    alumniControllerVerifyEmail(requestParameters: AlumniControllerVerifyEmailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary Validate the token against the email
     * @param {VerifyEmailTokenDto} verifyEmailTokenDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    alumniControllerVerifyEmailTokenRaw(requestParameters: AlumniControllerVerifyEmailTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Validate the token against the email
     */
    alumniControllerVerifyEmailToken(requestParameters: AlumniControllerVerifyEmailTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary Get the companies, and the number of alumni working in them.
     * @param {number} limit The number of results to return
     * @param {number} offset The offset of the query
     * @param {string} sortBy How to sort the results
     * @param {string} sortOrder The order of the results
     * @param {string} [startDate] The start date of the query
     * @param {string} [endDate] The end date of the query
     * @param {Array<string>} [courseIds] The course IDs to filter by
     * @param {Array<string>} [companyIds] The company IDs to filter by
     * @param {Array<string>} [graduationYears] The graduation years to filter by
     * @param {Array<string>} [industryIds] The industry IDs to filter by
     * @param {Array<string>} [locationIds] The location IDs to filter by
     * @param {Array<string>} [countries] The countries to filter by
     * @param {boolean} [currentRolesOnly] Filter for current roles only
     * @param {string} [search] Search query
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    companiesAnalyticsControllerGetCompaniesWithAlumniCountRaw(requestParameters: CompaniesAnalyticsControllerGetCompaniesWithAlumniCountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CompanyListResponseDto>>;

    /**
     * Get the companies, and the number of alumni working in them.
     */
    companiesAnalyticsControllerGetCompaniesWithAlumniCount(requestParameters: CompaniesAnalyticsControllerGetCompaniesWithAlumniCountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CompanyListResponseDto>;

    /**
     * 
     * @summary Returns detailed information about a specific company.
     * @param {string} id 
     * @param {number} limit The number of results to return
     * @param {number} offset The offset of the query
     * @param {string} sortBy How to sort the results
     * @param {string} sortOrder The order of the results
     * @param {string} [startDate] The start date of the query
     * @param {string} [endDate] The end date of the query
     * @param {Array<string>} [courseIds] The course IDs to filter by
     * @param {Array<string>} [companyIds] The company IDs to filter by
     * @param {Array<string>} [graduationYears] The graduation years to filter by
     * @param {Array<string>} [industryIds] The industry IDs to filter by
     * @param {Array<string>} [locationIds] The location IDs to filter by
     * @param {Array<string>} [countries] The countries to filter by
     * @param {boolean} [currentRolesOnly] Filter for current roles only
     * @param {string} [search] Search query
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    companiesAnalyticsControllerGetCompanyDetailsRaw(requestParameters: CompaniesAnalyticsControllerGetCompanyDetailsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Returns detailed information about a specific company.
     */
    companiesAnalyticsControllerGetCompanyDetails(requestParameters: CompaniesAnalyticsControllerGetCompanyDetailsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary Returns company employment growth over time.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    companiesAnalyticsControllerGetCompanyGrowthRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Returns company employment growth over time.
     */
    companiesAnalyticsControllerGetCompanyGrowth(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary Returns the number of alumni working in companies grouped by industry.
     * @param {number} limit The number of results to return
     * @param {number} offset The offset of the query
     * @param {string} sortBy How to sort the results
     * @param {string} sortOrder The order of the results
     * @param {string} [startDate] The start date of the query
     * @param {string} [endDate] The end date of the query
     * @param {Array<string>} [courseIds] The course IDs to filter by
     * @param {Array<string>} [companyIds] The company IDs to filter by
     * @param {Array<string>} [graduationYears] The graduation years to filter by
     * @param {Array<string>} [industryIds] The industry IDs to filter by
     * @param {Array<string>} [locationIds] The location IDs to filter by
     * @param {Array<string>} [countries] The countries to filter by
     * @param {boolean} [currentRolesOnly] Filter for current roles only
     * @param {string} [search] Search query
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    companiesAnalyticsControllerGetIndustryWithCountsRaw(requestParameters: CompaniesAnalyticsControllerGetIndustryWithCountsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IndustryListResponseDto>>;

    /**
     * Returns the number of alumni working in companies grouped by industry.
     */
    companiesAnalyticsControllerGetIndustryWithCounts(requestParameters: CompaniesAnalyticsControllerGetIndustryWithCountsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IndustryListResponseDto>;

    /**
     * 
     * @summary Get all companies
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    companyControllerFindAllRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Get all companies
     */
    companyControllerFindAll(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary Get company by id
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    companyControllerFindOneRaw(requestParameters: CompanyControllerFindOneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Get company by id
     */
    companyControllerFindOne(requestParameters: CompanyControllerFindOneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary Get the countries, and the number of alumni working in them.
     * @param {number} limit The number of results to return
     * @param {number} offset The offset of the query
     * @param {string} sortBy How to sort the results
     * @param {string} sortOrder The order of the results
     * @param {string} [startDate] The start date of the query
     * @param {string} [endDate] The end date of the query
     * @param {Array<string>} [courseIds] The course IDs to filter by
     * @param {Array<string>} [companyIds] The company IDs to filter by
     * @param {Array<string>} [graduationYears] The graduation years to filter by
     * @param {Array<string>} [industryIds] The industry IDs to filter by
     * @param {Array<string>} [locationIds] The location IDs to filter by
     * @param {Array<string>} [countries] The countries to filter by
     * @param {boolean} [currentRolesOnly] Filter for current roles only
     * @param {string} [search] Search query
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    countriesAnalyticsControllerGetCountriesWithAlumniCountRaw(requestParameters: CountriesAnalyticsControllerGetCountriesWithAlumniCountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CountryListResponseDto>>;

    /**
     * Get the countries, and the number of alumni working in them.
     */
    countriesAnalyticsControllerGetCountriesWithAlumniCount(requestParameters: CountriesAnalyticsControllerGetCountriesWithAlumniCountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CountryListResponseDto>;

    /**
     * 
     * @summary Get courses
     * @param {string} [facultyId] The id of the faculty
     * @param {'ACTIVE' | 'INACTIVE'} [status] Course status
     * @param {string} [name] Search by course name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    courseControllerFindRaw(requestParameters: CourseControllerFindRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<CourseExtended>>>;

    /**
     * Get courses
     */
    courseControllerFind(requestParameters: CourseControllerFindRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<CourseExtended>>;

    /**
     * 
     * @summary Get a course by id
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    courseControllerFindOneRaw(requestParameters: CourseControllerFindOneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CourseExtended>>;

    /**
     * Get a course by id
     */
    courseControllerFindOne(requestParameters: CourseControllerFindOneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CourseExtended>;

    /**
     * 
     * @summary Get all faculties
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    facultyControllerFindAllRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Faculty>>>;

    /**
     * Get all faculties
     */
    facultyControllerFindAll(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Faculty>>;

    /**
     * 
     * @summary Upload a file
     * @param {UploadExtractionDto} uploadExtractionDto Data to upload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    fileUploadControllerCreateRaw(requestParameters: FileUploadControllerCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>>;

    /**
     * Upload a file
     */
    fileUploadControllerCreate(requestParameters: FileUploadControllerCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string>;

    /**
     * 
     * @summary Authenticate a user with LinkedIn
     * @param {LinkedinAuthDto} linkedinAuthDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    userControllerLinkedinAuthRaw(requestParameters: UserControllerLinkedinAuthRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserAuthResponse>>;

    /**
     * Authenticate a user with LinkedIn
     */
    userControllerLinkedinAuth(requestParameters: UserControllerLinkedinAuthRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserAuthResponse>;

}

/**
 * 
 */
export class V1Api extends runtime.BaseAPI implements V1ApiInterface {

    /**
     * Get BrightData balance
     */
    async adminControllerGetBrightDataBalanceRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<number>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/admin/brightdata-balance`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<number>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Get BrightData balance
     */
    async adminControllerGetBrightDataBalance(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<number> {
        const response = await this.adminControllerGetBrightDataBalanceRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get ProxyCurl balance
     */
    async adminControllerGetProxyCurlBalanceRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<number>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/admin/proxycurl-balance`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<number>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Get ProxyCurl balance
     */
    async adminControllerGetProxyCurlBalance(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<number> {
        const response = await this.adminControllerGetProxyCurlBalanceRaw(initOverrides);
        return await response.value();
    }

    /**
     * Create a new alumni
     */
    async alumniControllerCreateRaw(requestParameters: AlumniControllerCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Alumni>> {
        if (requestParameters['createAlumniDto'] == null) {
            throw new runtime.RequiredError(
                'createAlumniDto',
                'Required parameter "createAlumniDto" was null or undefined when calling alumniControllerCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/alumni`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateAlumniDtoToJSON(requestParameters['createAlumniDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AlumniFromJSON(jsonValue));
    }

    /**
     * Create a new alumni
     */
    async alumniControllerCreate(requestParameters: AlumniControllerCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Alumni> {
        const response = await this.alumniControllerCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all alumni, enriched with location, graduations and roles
     */
    async alumniControllerFindAllRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Alumni>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/alumni`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AlumniFromJSON));
    }

    /**
     * Get all alumni, enriched with location, graduations and roles
     */
    async alumniControllerFindAll(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Alumni>> {
        const response = await this.alumniControllerFindAllRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get all alumni to be displayed in the map
     */
    async alumniControllerFindAllGeoJSONRaw(requestParameters: AlumniControllerFindAllGeoJSONRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GeoJSONFeatureCollection>> {
        if (requestParameters['groupBy'] == null) {
            throw new runtime.RequiredError(
                'groupBy',
                'Required parameter "groupBy" was null or undefined when calling alumniControllerFindAllGeoJSON().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['groupBy'] != null) {
            queryParameters['groupBy'] = requestParameters['groupBy'];
        }

        if (requestParameters['courseIds'] != null) {
            queryParameters['courseIds'] = requestParameters['courseIds'];
        }

        if (requestParameters['conclusionYears'] != null) {
            queryParameters['conclusionYears'] = requestParameters['conclusionYears'];
        }

        if (requestParameters['selectedYear'] != null) {
            queryParameters['selectedYear'] = requestParameters['selectedYear'];
        }

        if (requestParameters['compareYear'] != null) {
            queryParameters['compareYear'] = requestParameters['compareYear'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/alumni/geoJSON`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GeoJSONFeatureCollectionFromJSON(jsonValue));
    }

    /**
     * Get all alumni to be displayed in the map
     */
    async alumniControllerFindAllGeoJSON(requestParameters: AlumniControllerFindAllGeoJSONRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GeoJSONFeatureCollection> {
        const response = await this.alumniControllerFindAllGeoJSONRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get alumni by id, enriched with location, graduations and roles
     */
    async alumniControllerFindOneRaw(requestParameters: AlumniControllerFindOneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Alumni>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling alumniControllerFindOne().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/alumni/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AlumniFromJSON(jsonValue));
    }

    /**
     * Get alumni by id, enriched with location, graduations and roles
     */
    async alumniControllerFindOne(requestParameters: AlumniControllerFindOneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Alumni> {
        const response = await this.alumniControllerFindOneRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all alumni submissions that need to be reviewed
     */
    async alumniControllerGetAlumniToReviewRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<AlumniExtended>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/alumni/review`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AlumniExtendedFromJSON));
    }

    /**
     * Get all alumni submissions that need to be reviewed
     */
    async alumniControllerGetAlumniToReview(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<AlumniExtended>> {
        const response = await this.alumniControllerGetAlumniToReviewRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get basic profile of an alumni
     */
    async alumniControllerGetBasicProfileRaw(requestParameters: AlumniControllerGetBasicProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BasicAlumniProfileDto>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling alumniControllerGetBasicProfile().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/alumni/basic-profile/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BasicAlumniProfileDtoFromJSON(jsonValue));
    }

    /**
     * Get basic profile of an alumni
     */
    async alumniControllerGetBasicProfile(requestParameters: AlumniControllerGetBasicProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BasicAlumniProfileDto> {
        const response = await this.alumniControllerGetBasicProfileRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Mark an alumni as reviewed
     */
    async alumniControllerMarkAsReviewedRaw(requestParameters: AlumniControllerMarkAsReviewedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Alumni>> {
        if (requestParameters['markAsReviewedDto'] == null) {
            throw new runtime.RequiredError(
                'markAsReviewedDto',
                'Required parameter "markAsReviewedDto" was null or undefined when calling alumniControllerMarkAsReviewed().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/alumni/review`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MarkAsReviewedDtoToJSON(requestParameters['markAsReviewedDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AlumniFromJSON(jsonValue));
    }

    /**
     * Mark an alumni as reviewed
     */
    async alumniControllerMarkAsReviewed(requestParameters: AlumniControllerMarkAsReviewedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Alumni> {
        const response = await this.alumniControllerMarkAsReviewedRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Verify the email of the alumni by generating a token and sending it to the email
     */
    async alumniControllerVerifyEmailRaw(requestParameters: AlumniControllerVerifyEmailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['verifyEmailDto'] == null) {
            throw new runtime.RequiredError(
                'verifyEmailDto',
                'Required parameter "verifyEmailDto" was null or undefined when calling alumniControllerVerifyEmail().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/alumni/verify-email`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: VerifyEmailDtoToJSON(requestParameters['verifyEmailDto']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Verify the email of the alumni by generating a token and sending it to the email
     */
    async alumniControllerVerifyEmail(requestParameters: AlumniControllerVerifyEmailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.alumniControllerVerifyEmailRaw(requestParameters, initOverrides);
    }

    /**
     * Validate the token against the email
     */
    async alumniControllerVerifyEmailTokenRaw(requestParameters: AlumniControllerVerifyEmailTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['verifyEmailTokenDto'] == null) {
            throw new runtime.RequiredError(
                'verifyEmailTokenDto',
                'Required parameter "verifyEmailTokenDto" was null or undefined when calling alumniControllerVerifyEmailToken().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/alumni/verify-email/token`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: VerifyEmailTokenDtoToJSON(requestParameters['verifyEmailTokenDto']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Validate the token against the email
     */
    async alumniControllerVerifyEmailToken(requestParameters: AlumniControllerVerifyEmailTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.alumniControllerVerifyEmailTokenRaw(requestParameters, initOverrides);
    }

    /**
     * Get the companies, and the number of alumni working in them.
     */
    async companiesAnalyticsControllerGetCompaniesWithAlumniCountRaw(requestParameters: CompaniesAnalyticsControllerGetCompaniesWithAlumniCountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CompanyListResponseDto>> {
        if (requestParameters['limit'] == null) {
            throw new runtime.RequiredError(
                'limit',
                'Required parameter "limit" was null or undefined when calling companiesAnalyticsControllerGetCompaniesWithAlumniCount().'
            );
        }

        if (requestParameters['offset'] == null) {
            throw new runtime.RequiredError(
                'offset',
                'Required parameter "offset" was null or undefined when calling companiesAnalyticsControllerGetCompaniesWithAlumniCount().'
            );
        }

        if (requestParameters['sortBy'] == null) {
            throw new runtime.RequiredError(
                'sortBy',
                'Required parameter "sortBy" was null or undefined when calling companiesAnalyticsControllerGetCompaniesWithAlumniCount().'
            );
        }

        if (requestParameters['sortOrder'] == null) {
            throw new runtime.RequiredError(
                'sortOrder',
                'Required parameter "sortOrder" was null or undefined when calling companiesAnalyticsControllerGetCompaniesWithAlumniCount().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['startDate'] != null) {
            queryParameters['startDate'] = requestParameters['startDate'];
        }

        if (requestParameters['endDate'] != null) {
            queryParameters['endDate'] = requestParameters['endDate'];
        }

        if (requestParameters['courseIds'] != null) {
            queryParameters['courseIds'] = requestParameters['courseIds'];
        }

        if (requestParameters['companyIds'] != null) {
            queryParameters['companyIds'] = requestParameters['companyIds'];
        }

        if (requestParameters['graduationYears'] != null) {
            queryParameters['graduationYears'] = requestParameters['graduationYears'];
        }

        if (requestParameters['industryIds'] != null) {
            queryParameters['industryIds'] = requestParameters['industryIds'];
        }

        if (requestParameters['locationIds'] != null) {
            queryParameters['locationIds'] = requestParameters['locationIds'];
        }

        if (requestParameters['countries'] != null) {
            queryParameters['countries'] = requestParameters['countries'];
        }

        if (requestParameters['currentRolesOnly'] != null) {
            queryParameters['currentRolesOnly'] = requestParameters['currentRolesOnly'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['search'] != null) {
            queryParameters['search'] = requestParameters['search'];
        }

        if (requestParameters['sortBy'] != null) {
            queryParameters['sortBy'] = requestParameters['sortBy'];
        }

        if (requestParameters['sortOrder'] != null) {
            queryParameters['sortOrder'] = requestParameters['sortOrder'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/analytics/companies`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CompanyListResponseDtoFromJSON(jsonValue));
    }

    /**
     * Get the companies, and the number of alumni working in them.
     */
    async companiesAnalyticsControllerGetCompaniesWithAlumniCount(requestParameters: CompaniesAnalyticsControllerGetCompaniesWithAlumniCountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CompanyListResponseDto> {
        const response = await this.companiesAnalyticsControllerGetCompaniesWithAlumniCountRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns detailed information about a specific company.
     */
    async companiesAnalyticsControllerGetCompanyDetailsRaw(requestParameters: CompaniesAnalyticsControllerGetCompanyDetailsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling companiesAnalyticsControllerGetCompanyDetails().'
            );
        }

        if (requestParameters['limit'] == null) {
            throw new runtime.RequiredError(
                'limit',
                'Required parameter "limit" was null or undefined when calling companiesAnalyticsControllerGetCompanyDetails().'
            );
        }

        if (requestParameters['offset'] == null) {
            throw new runtime.RequiredError(
                'offset',
                'Required parameter "offset" was null or undefined when calling companiesAnalyticsControllerGetCompanyDetails().'
            );
        }

        if (requestParameters['sortBy'] == null) {
            throw new runtime.RequiredError(
                'sortBy',
                'Required parameter "sortBy" was null or undefined when calling companiesAnalyticsControllerGetCompanyDetails().'
            );
        }

        if (requestParameters['sortOrder'] == null) {
            throw new runtime.RequiredError(
                'sortOrder',
                'Required parameter "sortOrder" was null or undefined when calling companiesAnalyticsControllerGetCompanyDetails().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['startDate'] != null) {
            queryParameters['startDate'] = requestParameters['startDate'];
        }

        if (requestParameters['endDate'] != null) {
            queryParameters['endDate'] = requestParameters['endDate'];
        }

        if (requestParameters['courseIds'] != null) {
            queryParameters['courseIds'] = requestParameters['courseIds'];
        }

        if (requestParameters['companyIds'] != null) {
            queryParameters['companyIds'] = requestParameters['companyIds'];
        }

        if (requestParameters['graduationYears'] != null) {
            queryParameters['graduationYears'] = requestParameters['graduationYears'];
        }

        if (requestParameters['industryIds'] != null) {
            queryParameters['industryIds'] = requestParameters['industryIds'];
        }

        if (requestParameters['locationIds'] != null) {
            queryParameters['locationIds'] = requestParameters['locationIds'];
        }

        if (requestParameters['countries'] != null) {
            queryParameters['countries'] = requestParameters['countries'];
        }

        if (requestParameters['currentRolesOnly'] != null) {
            queryParameters['currentRolesOnly'] = requestParameters['currentRolesOnly'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['search'] != null) {
            queryParameters['search'] = requestParameters['search'];
        }

        if (requestParameters['sortBy'] != null) {
            queryParameters['sortBy'] = requestParameters['sortBy'];
        }

        if (requestParameters['sortOrder'] != null) {
            queryParameters['sortOrder'] = requestParameters['sortOrder'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/analytics/companies/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Returns detailed information about a specific company.
     */
    async companiesAnalyticsControllerGetCompanyDetails(requestParameters: CompaniesAnalyticsControllerGetCompanyDetailsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.companiesAnalyticsControllerGetCompanyDetailsRaw(requestParameters, initOverrides);
    }

    /**
     * Returns company employment growth over time.
     */
    async companiesAnalyticsControllerGetCompanyGrowthRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/analytics/companies/growth`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Returns company employment growth over time.
     */
    async companiesAnalyticsControllerGetCompanyGrowth(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.companiesAnalyticsControllerGetCompanyGrowthRaw(initOverrides);
    }

    /**
     * Returns the number of alumni working in companies grouped by industry.
     */
    async companiesAnalyticsControllerGetIndustryWithCountsRaw(requestParameters: CompaniesAnalyticsControllerGetIndustryWithCountsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IndustryListResponseDto>> {
        if (requestParameters['limit'] == null) {
            throw new runtime.RequiredError(
                'limit',
                'Required parameter "limit" was null or undefined when calling companiesAnalyticsControllerGetIndustryWithCounts().'
            );
        }

        if (requestParameters['offset'] == null) {
            throw new runtime.RequiredError(
                'offset',
                'Required parameter "offset" was null or undefined when calling companiesAnalyticsControllerGetIndustryWithCounts().'
            );
        }

        if (requestParameters['sortBy'] == null) {
            throw new runtime.RequiredError(
                'sortBy',
                'Required parameter "sortBy" was null or undefined when calling companiesAnalyticsControllerGetIndustryWithCounts().'
            );
        }

        if (requestParameters['sortOrder'] == null) {
            throw new runtime.RequiredError(
                'sortOrder',
                'Required parameter "sortOrder" was null or undefined when calling companiesAnalyticsControllerGetIndustryWithCounts().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['startDate'] != null) {
            queryParameters['startDate'] = requestParameters['startDate'];
        }

        if (requestParameters['endDate'] != null) {
            queryParameters['endDate'] = requestParameters['endDate'];
        }

        if (requestParameters['courseIds'] != null) {
            queryParameters['courseIds'] = requestParameters['courseIds'];
        }

        if (requestParameters['companyIds'] != null) {
            queryParameters['companyIds'] = requestParameters['companyIds'];
        }

        if (requestParameters['graduationYears'] != null) {
            queryParameters['graduationYears'] = requestParameters['graduationYears'];
        }

        if (requestParameters['industryIds'] != null) {
            queryParameters['industryIds'] = requestParameters['industryIds'];
        }

        if (requestParameters['locationIds'] != null) {
            queryParameters['locationIds'] = requestParameters['locationIds'];
        }

        if (requestParameters['countries'] != null) {
            queryParameters['countries'] = requestParameters['countries'];
        }

        if (requestParameters['currentRolesOnly'] != null) {
            queryParameters['currentRolesOnly'] = requestParameters['currentRolesOnly'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['search'] != null) {
            queryParameters['search'] = requestParameters['search'];
        }

        if (requestParameters['sortBy'] != null) {
            queryParameters['sortBy'] = requestParameters['sortBy'];
        }

        if (requestParameters['sortOrder'] != null) {
            queryParameters['sortOrder'] = requestParameters['sortOrder'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/analytics/companies/by-industry`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IndustryListResponseDtoFromJSON(jsonValue));
    }

    /**
     * Returns the number of alumni working in companies grouped by industry.
     */
    async companiesAnalyticsControllerGetIndustryWithCounts(requestParameters: CompaniesAnalyticsControllerGetIndustryWithCountsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IndustryListResponseDto> {
        const response = await this.companiesAnalyticsControllerGetIndustryWithCountsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all companies
     */
    async companyControllerFindAllRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/company`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Get all companies
     */
    async companyControllerFindAll(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.companyControllerFindAllRaw(initOverrides);
    }

    /**
     * Get company by id
     */
    async companyControllerFindOneRaw(requestParameters: CompanyControllerFindOneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling companyControllerFindOne().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/company/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Get company by id
     */
    async companyControllerFindOne(requestParameters: CompanyControllerFindOneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.companyControllerFindOneRaw(requestParameters, initOverrides);
    }

    /**
     * Get the countries, and the number of alumni working in them.
     */
    async countriesAnalyticsControllerGetCountriesWithAlumniCountRaw(requestParameters: CountriesAnalyticsControllerGetCountriesWithAlumniCountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CountryListResponseDto>> {
        if (requestParameters['limit'] == null) {
            throw new runtime.RequiredError(
                'limit',
                'Required parameter "limit" was null or undefined when calling countriesAnalyticsControllerGetCountriesWithAlumniCount().'
            );
        }

        if (requestParameters['offset'] == null) {
            throw new runtime.RequiredError(
                'offset',
                'Required parameter "offset" was null or undefined when calling countriesAnalyticsControllerGetCountriesWithAlumniCount().'
            );
        }

        if (requestParameters['sortBy'] == null) {
            throw new runtime.RequiredError(
                'sortBy',
                'Required parameter "sortBy" was null or undefined when calling countriesAnalyticsControllerGetCountriesWithAlumniCount().'
            );
        }

        if (requestParameters['sortOrder'] == null) {
            throw new runtime.RequiredError(
                'sortOrder',
                'Required parameter "sortOrder" was null or undefined when calling countriesAnalyticsControllerGetCountriesWithAlumniCount().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['startDate'] != null) {
            queryParameters['startDate'] = requestParameters['startDate'];
        }

        if (requestParameters['endDate'] != null) {
            queryParameters['endDate'] = requestParameters['endDate'];
        }

        if (requestParameters['courseIds'] != null) {
            queryParameters['courseIds'] = requestParameters['courseIds'];
        }

        if (requestParameters['companyIds'] != null) {
            queryParameters['companyIds'] = requestParameters['companyIds'];
        }

        if (requestParameters['graduationYears'] != null) {
            queryParameters['graduationYears'] = requestParameters['graduationYears'];
        }

        if (requestParameters['industryIds'] != null) {
            queryParameters['industryIds'] = requestParameters['industryIds'];
        }

        if (requestParameters['locationIds'] != null) {
            queryParameters['locationIds'] = requestParameters['locationIds'];
        }

        if (requestParameters['countries'] != null) {
            queryParameters['countries'] = requestParameters['countries'];
        }

        if (requestParameters['currentRolesOnly'] != null) {
            queryParameters['currentRolesOnly'] = requestParameters['currentRolesOnly'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['search'] != null) {
            queryParameters['search'] = requestParameters['search'];
        }

        if (requestParameters['sortBy'] != null) {
            queryParameters['sortBy'] = requestParameters['sortBy'];
        }

        if (requestParameters['sortOrder'] != null) {
            queryParameters['sortOrder'] = requestParameters['sortOrder'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/analytics/countries`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CountryListResponseDtoFromJSON(jsonValue));
    }

    /**
     * Get the countries, and the number of alumni working in them.
     */
    async countriesAnalyticsControllerGetCountriesWithAlumniCount(requestParameters: CountriesAnalyticsControllerGetCountriesWithAlumniCountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CountryListResponseDto> {
        const response = await this.countriesAnalyticsControllerGetCountriesWithAlumniCountRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get courses
     */
    async courseControllerFindRaw(requestParameters: CourseControllerFindRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<CourseExtended>>> {
        const queryParameters: any = {};

        if (requestParameters['facultyId'] != null) {
            queryParameters['facultyId'] = requestParameters['facultyId'];
        }

        if (requestParameters['status'] != null) {
            queryParameters['status'] = requestParameters['status'];
        }

        if (requestParameters['name'] != null) {
            queryParameters['name'] = requestParameters['name'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/course`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CourseExtendedFromJSON));
    }

    /**
     * Get courses
     */
    async courseControllerFind(requestParameters: CourseControllerFindRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<CourseExtended>> {
        const response = await this.courseControllerFindRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a course by id
     */
    async courseControllerFindOneRaw(requestParameters: CourseControllerFindOneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CourseExtended>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling courseControllerFindOne().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/course/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CourseExtendedFromJSON(jsonValue));
    }

    /**
     * Get a course by id
     */
    async courseControllerFindOne(requestParameters: CourseControllerFindOneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CourseExtended> {
        const response = await this.courseControllerFindOneRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all faculties
     */
    async facultyControllerFindAllRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Faculty>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/faculty`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(FacultyFromJSON));
    }

    /**
     * Get all faculties
     */
    async facultyControllerFindAll(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Faculty>> {
        const response = await this.facultyControllerFindAllRaw(initOverrides);
        return await response.value();
    }

    /**
     * Upload a file
     */
    async fileUploadControllerCreateRaw(requestParameters: FileUploadControllerCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters['uploadExtractionDto'] == null) {
            throw new runtime.RequiredError(
                'uploadExtractionDto',
                'Required parameter "uploadExtractionDto" was null or undefined when calling fileUploadControllerCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/files`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UploadExtractionDtoToJSON(requestParameters['uploadExtractionDto']),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Upload a file
     */
    async fileUploadControllerCreate(requestParameters: FileUploadControllerCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.fileUploadControllerCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Authenticate a user with LinkedIn
     */
    async userControllerLinkedinAuthRaw(requestParameters: UserControllerLinkedinAuthRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserAuthResponse>> {
        if (requestParameters['linkedinAuthDto'] == null) {
            throw new runtime.RequiredError(
                'linkedinAuthDto',
                'Required parameter "linkedinAuthDto" was null or undefined when calling userControllerLinkedinAuth().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/user/linkedinAuth`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LinkedinAuthDtoToJSON(requestParameters['linkedinAuthDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserAuthResponseFromJSON(jsonValue));
    }

    /**
     * Authenticate a user with LinkedIn
     */
    async userControllerLinkedinAuth(requestParameters: UserControllerLinkedinAuthRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserAuthResponse> {
        const response = await this.userControllerLinkedinAuthRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const AlumniControllerFindAllGeoJSONGroupByEnum = {
    Countries: 'countries',
    Cities: 'cities'
} as const;
export type AlumniControllerFindAllGeoJSONGroupByEnum = typeof AlumniControllerFindAllGeoJSONGroupByEnum[keyof typeof AlumniControllerFindAllGeoJSONGroupByEnum];
/**
 * @export
 */
export const CourseControllerFindStatusEnum = {
    Active: 'ACTIVE',
    Inactive: 'INACTIVE'
} as const;
export type CourseControllerFindStatusEnum = typeof CourseControllerFindStatusEnum[keyof typeof CourseControllerFindStatusEnum];
