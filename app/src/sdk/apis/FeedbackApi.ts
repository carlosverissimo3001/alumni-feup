/* tslint:disable */
/* eslint-disable */
/**
 * API
 * API description
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  SendFeedbackDto,
} from '../models/index';
import {
    SendFeedbackDtoFromJSON,
    SendFeedbackDtoToJSON,
} from '../models/index';

export interface FeedbackControllerCreateRequest {
    sendFeedbackDto: SendFeedbackDto;
}

/**
 * FeedbackApi - interface
 * 
 * @export
 * @interface FeedbackApiInterface
 */
export interface FeedbackApiInterface {
    /**
     * 
     * @summary Insert feedback into the database
     * @param {SendFeedbackDto} sendFeedbackDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeedbackApiInterface
     */
    feedbackControllerCreateRaw(requestParameters: FeedbackControllerCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Insert feedback into the database
     */
    feedbackControllerCreate(requestParameters: FeedbackControllerCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

}

/**
 * 
 */
export class FeedbackApi extends runtime.BaseAPI implements FeedbackApiInterface {

    /**
     * Insert feedback into the database
     */
    async feedbackControllerCreateRaw(requestParameters: FeedbackControllerCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['sendFeedbackDto'] == null) {
            throw new runtime.RequiredError(
                'sendFeedbackDto',
                'Required parameter "sendFeedbackDto" was null or undefined when calling feedbackControllerCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/feedback`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SendFeedbackDtoToJSON(requestParameters['sendFeedbackDto']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Insert feedback into the database
     */
    async feedbackControllerCreate(requestParameters: FeedbackControllerCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.feedbackControllerCreateRaw(requestParameters, initOverrides);
    }

}
