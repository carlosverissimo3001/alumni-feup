/* tslint:disable */
/* eslint-disable */
/**
 * API
 * API description
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  MergeCompaniesDto,
  MergeLocationsDto,
} from '../models/index';
import {
    MergeCompaniesDtoFromJSON,
    MergeCompaniesDtoToJSON,
    MergeLocationsDtoFromJSON,
    MergeLocationsDtoToJSON,
} from '../models/index';

export interface AdminControllerMergeCompaniesRequest {
    mergeCompaniesDto: MergeCompaniesDto;
}

export interface AdminControllerMergeLocationsRequest {
    mergeLocationsDto: MergeLocationsDto;
}

/**
 * AdminApi - interface
 * 
 * @export
 * @interface AdminApiInterface
 */
export interface AdminApiInterface {
    /**
     * 
     * @summary Get BrightData balance
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApiInterface
     */
    adminControllerGetBrightDataBalanceRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<number>>;

    /**
     * Get BrightData balance
     */
    adminControllerGetBrightDataBalance(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<number>;

    /**
     * 
     * @summary Get ProxyCurl balance
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApiInterface
     */
    adminControllerGetProxyCurlBalanceRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<number>>;

    /**
     * Get ProxyCurl balance
     */
    adminControllerGetProxyCurlBalance(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<number>;

    /**
     * 
     * @summary Merge companies
     * @param {MergeCompaniesDto} mergeCompaniesDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApiInterface
     */
    adminControllerMergeCompaniesRaw(requestParameters: AdminControllerMergeCompaniesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Merge companies
     */
    adminControllerMergeCompanies(requestParameters: AdminControllerMergeCompaniesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary Merge locations
     * @param {MergeLocationsDto} mergeLocationsDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApiInterface
     */
    adminControllerMergeLocationsRaw(requestParameters: AdminControllerMergeLocationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Merge locations
     */
    adminControllerMergeLocations(requestParameters: AdminControllerMergeLocationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

}

/**
 * 
 */
export class AdminApi extends runtime.BaseAPI implements AdminApiInterface {

    /**
     * Get BrightData balance
     */
    async adminControllerGetBrightDataBalanceRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<number>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/admin/brightdata-balance`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<number>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Get BrightData balance
     */
    async adminControllerGetBrightDataBalance(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<number> {
        const response = await this.adminControllerGetBrightDataBalanceRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get ProxyCurl balance
     */
    async adminControllerGetProxyCurlBalanceRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<number>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/admin/proxycurl-balance`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<number>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Get ProxyCurl balance
     */
    async adminControllerGetProxyCurlBalance(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<number> {
        const response = await this.adminControllerGetProxyCurlBalanceRaw(initOverrides);
        return await response.value();
    }

    /**
     * Merge companies
     */
    async adminControllerMergeCompaniesRaw(requestParameters: AdminControllerMergeCompaniesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['mergeCompaniesDto'] == null) {
            throw new runtime.RequiredError(
                'mergeCompaniesDto',
                'Required parameter "mergeCompaniesDto" was null or undefined when calling adminControllerMergeCompanies().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/admin/merge-companies`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MergeCompaniesDtoToJSON(requestParameters['mergeCompaniesDto']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Merge companies
     */
    async adminControllerMergeCompanies(requestParameters: AdminControllerMergeCompaniesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.adminControllerMergeCompaniesRaw(requestParameters, initOverrides);
    }

    /**
     * Merge locations
     */
    async adminControllerMergeLocationsRaw(requestParameters: AdminControllerMergeLocationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['mergeLocationsDto'] == null) {
            throw new runtime.RequiredError(
                'mergeLocationsDto',
                'Required parameter "mergeLocationsDto" was null or undefined when calling adminControllerMergeLocations().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/admin/merge-locations`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MergeLocationsDtoToJSON(requestParameters['mergeLocationsDto']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Merge locations
     */
    async adminControllerMergeLocations(requestParameters: AdminControllerMergeLocationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.adminControllerMergeLocationsRaw(requestParameters, initOverrides);
    }

}
