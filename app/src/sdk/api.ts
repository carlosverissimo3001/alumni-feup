/* tslint:disable */
/* eslint-disable */
/**
 * API
 * API description
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface Alumni
 */
export interface Alumni {
    /**
     * The id of the alumni
     * @type {string}
     * @memberof Alumni
     */
    'id': string;
    /**
     * The first name of the alumni
     * @type {string}
     * @memberof Alumni
     */
    'firstName': string;
    /**
     * The last name of the alumni
     * @type {string}
     * @memberof Alumni
     */
    'lastName': string;
    /**
     * The full name of the alumni
     * @type {object}
     * @memberof Alumni
     */
    'fullName'?: object;
    /**
     * The linkedin url of the alumni
     * @type {object}
     * @memberof Alumni
     */
    'linkedinUrl'?: object;
    /**
     * The profile picture of the alumni
     * @type {object}
     * @memberof Alumni
     */
    'profilePictureUrl'?: object;
    /**
     * The source of the alumni
     * @type {object}
     * @memberof Alumni
     */
    'source'?: object;
    /**
     * Whether the alumni is in a group
     * @type {boolean}
     * @memberof Alumni
     */
    'isInGroup': boolean;
    /**
     * Whether the alumni has a sigarra match
     * @type {boolean}
     * @memberof Alumni
     */
    'hasSigarraMatch': boolean;
    /**
     * The roles of the alumni
     * @type {Array<string>}
     * @memberof Alumni
     */
    'Roles'?: Array<string>;
    /**
     * The current location of the alumni
     * @type {object}
     * @memberof Alumni
     */
    'Location'?: object;
    /**
     * The graduation status(es) of the alumni
     * @type {Array<string>}
     * @memberof Alumni
     */
    'Graduations'?: Array<string>;
}
/**
 * 
 * @export
 * @interface CourseCompletion
 */
export interface CourseCompletion {
    /**
     * The ID of the course
     * @type {string}
     * @memberof CourseCompletion
     */
    'courseId': string;
    /**
     * The year of conclusion of the course
     * @type {number}
     * @memberof CourseCompletion
     */
    'conclusionYear': number;
}
/**
 * 
 * @export
 * @interface CourseExtended
 */
export interface CourseExtended {
    /**
     * The name of the course
     * @type {string}
     * @memberof CourseExtended
     */
    'name': string;
    /**
     * The acronym of the course
     * @type {string}
     * @memberof CourseExtended
     */
    'acronym': string;
    /**
     * The id of the course
     * @type {string}
     * @memberof CourseExtended
     */
    'id': string;
    /**
     * The start year of the course
     * @type {number}
     * @memberof CourseExtended
     */
    'startYear': number;
    /**
     * The end year of the course, if it is not active
     * @type {object}
     * @memberof CourseExtended
     */
    'endYear'?: object;
    /**
     * The status of the course
     * @type {object}
     * @memberof CourseExtended
     */
    'status': object;
    /**
     * The faculty id of the course
     * @type {string}
     * @memberof CourseExtended
     */
    'facultyId': string;
    /**
     * The name of the course in the international language
     * @type {object}
     * @memberof CourseExtended
     */
    'nameInt'?: object;
    /**
     * The type of the course
     * @type {object}
     * @memberof CourseExtended
     */
    'courseType': object;
}
/**
 * 
 * @export
 * @interface CreateAlumniDto
 */
export interface CreateAlumniDto {
    /**
     * The full name of the user
     * @type {string}
     * @memberof CreateAlumniDto
     */
    'fullName': string;
    /**
     * The personal email of the user
     * @type {string}
     * @memberof CreateAlumniDto
     */
    'personalEmail'?: string;
    /**
     * The LinkedIn URL of the user
     * @type {string}
     * @memberof CreateAlumniDto
     */
    'linkedinUrl': string;
    /**
     * The courses the user has completed
     * @type {Array<CourseCompletion>}
     * @memberof CreateAlumniDto
     */
    'courses': Array<CourseCompletion>;
    /**
     * The faculty ID of the user
     * @type {string}
     * @memberof CreateAlumniDto
     */
    'facultyId': string;
}
/**
 * 
 * @export
 * @interface Faculty
 */
export interface Faculty {
    /**
     * 
     * @type {string}
     * @memberof Faculty
     */
    'id': string;
    /**
     * The local name of the faculty
     * @type {string}
     * @memberof Faculty
     */
    'name': string;
    /**
     * The international name of the faculty
     * @type {object}
     * @memberof Faculty
     */
    'nameInt': object;
    /**
     * The acronym of the faculty
     * @type {string}
     * @memberof Faculty
     */
    'acronym': string;
}
/**
 * 
 * @export
 * @interface GeoJSONFeature
 */
export interface GeoJSONFeature {
    /**
     * 
     * @type {string}
     * @memberof GeoJSONFeature
     */
    'type': string;
    /**
     * 
     * @type {object}
     * @memberof GeoJSONFeature
     */
    'geometry': object;
    /**
     * 
     * @type {object}
     * @memberof GeoJSONFeature
     */
    'properties': object;
}
/**
 * 
 * @export
 * @interface GeoJSONFeatureCollection
 */
export interface GeoJSONFeatureCollection {
    /**
     * 
     * @type {string}
     * @memberof GeoJSONFeatureCollection
     */
    'type': string;
    /**
     * 
     * @type {Array<GeoJSONFeature>}
     * @memberof GeoJSONFeatureCollection
     */
    'features': Array<GeoJSONFeature>;
}
/**
 * 
 * @export
 * @interface LinkedinAuthDto
 */
export interface LinkedinAuthDto {
    /**
     * A unique identifying value for the member. Referenced as personId in other API documentation pages.
     * @type {string}
     * @memberof LinkedinAuthDto
     */
    'person_id': string;
    /**
     * The first name of the member.
     * @type {string}
     * @memberof LinkedinAuthDto
     */
    'first_name': string;
    /**
     * The first name of the member.
     * @type {string}
     * @memberof LinkedinAuthDto
     */
    'last_name': string;
    /**
     * The personal email of the member.
     * @type {string}
     * @memberof LinkedinAuthDto
     */
    'institutional_email'?: string;
    /**
     * The URL of the member\'s profile picture.
     * @type {string}
     * @memberof LinkedinAuthDto
     */
    'profile_picture_url'?: string;
}
/**
 * 
 * @export
 * @interface UploadExtractionDto
 */
export interface UploadExtractionDto {
    /**
     * 
     * @type {string}
     * @memberof UploadExtractionDto
     */
    'faculty_id': string;
    /**
     * 
     * @type {string}
     * @memberof UploadExtractionDto
     */
    'course_id': string;
}

/**
 * AlumniApi - axios parameter creator
 * @export
 */
export const AlumniApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a new alumni
         * @param {CreateAlumniDto} createAlumniDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        alumniControllerCreate: async (createAlumniDto: CreateAlumniDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createAlumniDto' is not null or undefined
            assertParamExists('alumniControllerCreate', 'createAlumniDto', createAlumniDto)
            const localVarPath = `/api/alumni`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createAlumniDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all alumni, enriched with location, graduations and roles
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        alumniControllerFindAll: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/alumni`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all alumni to be displayed in the map
         * @param {AlumniControllerFindAllGeoJSONGroupByEnum} groupBy How to group the data
         * @param {Array<string>} [courseIds] The ID(s) of the course(s)
         * @param {Array<string>} [conclusionYears] The year(s) of conclusion(s)
         * @param {number} [selectedYear] The selected year
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        alumniControllerFindAllGeoJSON: async (groupBy: AlumniControllerFindAllGeoJSONGroupByEnum, courseIds?: Array<string>, conclusionYears?: Array<string>, selectedYear?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'groupBy' is not null or undefined
            assertParamExists('alumniControllerFindAllGeoJSON', 'groupBy', groupBy)
            const localVarPath = `/api/alumni/geoJSON`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (groupBy !== undefined) {
                localVarQueryParameter['groupBy'] = groupBy;
            }

            if (courseIds) {
                localVarQueryParameter['courseIds'] = courseIds;
            }

            if (conclusionYears) {
                localVarQueryParameter['conclusionYears'] = conclusionYears;
            }

            if (selectedYear !== undefined) {
                localVarQueryParameter['selectedYear'] = selectedYear;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get alumni by id, enriched with location, graduations and roles
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        alumniControllerFindOne: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('alumniControllerFindOne', 'id', id)
            const localVarPath = `/api/alumni/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AlumniApi - functional programming interface
 * @export
 */
export const AlumniApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AlumniApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create a new alumni
         * @param {CreateAlumniDto} createAlumniDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async alumniControllerCreate(createAlumniDto: CreateAlumniDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.alumniControllerCreate(createAlumniDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AlumniApi.alumniControllerCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get all alumni, enriched with location, graduations and roles
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async alumniControllerFindAll(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Alumni>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.alumniControllerFindAll(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AlumniApi.alumniControllerFindAll']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get all alumni to be displayed in the map
         * @param {AlumniControllerFindAllGeoJSONGroupByEnum} groupBy How to group the data
         * @param {Array<string>} [courseIds] The ID(s) of the course(s)
         * @param {Array<string>} [conclusionYears] The year(s) of conclusion(s)
         * @param {number} [selectedYear] The selected year
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async alumniControllerFindAllGeoJSON(groupBy: AlumniControllerFindAllGeoJSONGroupByEnum, courseIds?: Array<string>, conclusionYears?: Array<string>, selectedYear?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GeoJSONFeatureCollection>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.alumniControllerFindAllGeoJSON(groupBy, courseIds, conclusionYears, selectedYear, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AlumniApi.alumniControllerFindAllGeoJSON']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get alumni by id, enriched with location, graduations and roles
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async alumniControllerFindOne(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Alumni>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.alumniControllerFindOne(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AlumniApi.alumniControllerFindOne']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AlumniApi - factory interface
 * @export
 */
export const AlumniApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AlumniApiFp(configuration)
    return {
        /**
         * 
         * @summary Create a new alumni
         * @param {CreateAlumniDto} createAlumniDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        alumniControllerCreate(createAlumniDto: CreateAlumniDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.alumniControllerCreate(createAlumniDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all alumni, enriched with location, graduations and roles
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        alumniControllerFindAll(options?: RawAxiosRequestConfig): AxiosPromise<Array<Alumni>> {
            return localVarFp.alumniControllerFindAll(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all alumni to be displayed in the map
         * @param {AlumniControllerFindAllGeoJSONGroupByEnum} groupBy How to group the data
         * @param {Array<string>} [courseIds] The ID(s) of the course(s)
         * @param {Array<string>} [conclusionYears] The year(s) of conclusion(s)
         * @param {number} [selectedYear] The selected year
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        alumniControllerFindAllGeoJSON(groupBy: AlumniControllerFindAllGeoJSONGroupByEnum, courseIds?: Array<string>, conclusionYears?: Array<string>, selectedYear?: number, options?: RawAxiosRequestConfig): AxiosPromise<GeoJSONFeatureCollection> {
            return localVarFp.alumniControllerFindAllGeoJSON(groupBy, courseIds, conclusionYears, selectedYear, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get alumni by id, enriched with location, graduations and roles
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        alumniControllerFindOne(id: string, options?: RawAxiosRequestConfig): AxiosPromise<Alumni> {
            return localVarFp.alumniControllerFindOne(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AlumniApi - interface
 * @export
 * @interface AlumniApi
 */
export interface AlumniApiInterface {
    /**
     * 
     * @summary Create a new alumni
     * @param {CreateAlumniDto} createAlumniDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlumniApiInterface
     */
    alumniControllerCreate(createAlumniDto: CreateAlumniDto, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary Get all alumni, enriched with location, graduations and roles
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlumniApiInterface
     */
    alumniControllerFindAll(options?: RawAxiosRequestConfig): AxiosPromise<Array<Alumni>>;

    /**
     * 
     * @summary Get all alumni to be displayed in the map
     * @param {AlumniControllerFindAllGeoJSONGroupByEnum} groupBy How to group the data
     * @param {Array<string>} [courseIds] The ID(s) of the course(s)
     * @param {Array<string>} [conclusionYears] The year(s) of conclusion(s)
     * @param {number} [selectedYear] The selected year
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlumniApiInterface
     */
    alumniControllerFindAllGeoJSON(groupBy: AlumniControllerFindAllGeoJSONGroupByEnum, courseIds?: Array<string>, conclusionYears?: Array<string>, selectedYear?: number, options?: RawAxiosRequestConfig): AxiosPromise<GeoJSONFeatureCollection>;

    /**
     * 
     * @summary Get alumni by id, enriched with location, graduations and roles
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlumniApiInterface
     */
    alumniControllerFindOne(id: string, options?: RawAxiosRequestConfig): AxiosPromise<Alumni>;

}

/**
 * AlumniApi - object-oriented interface
 * @export
 * @class AlumniApi
 * @extends {BaseAPI}
 */
export class AlumniApi extends BaseAPI implements AlumniApiInterface {
    /**
     * 
     * @summary Create a new alumni
     * @param {CreateAlumniDto} createAlumniDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlumniApi
     */
    public alumniControllerCreate(createAlumniDto: CreateAlumniDto, options?: RawAxiosRequestConfig) {
        return AlumniApiFp(this.configuration).alumniControllerCreate(createAlumniDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all alumni, enriched with location, graduations and roles
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlumniApi
     */
    public alumniControllerFindAll(options?: RawAxiosRequestConfig) {
        return AlumniApiFp(this.configuration).alumniControllerFindAll(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all alumni to be displayed in the map
     * @param {AlumniControllerFindAllGeoJSONGroupByEnum} groupBy How to group the data
     * @param {Array<string>} [courseIds] The ID(s) of the course(s)
     * @param {Array<string>} [conclusionYears] The year(s) of conclusion(s)
     * @param {number} [selectedYear] The selected year
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlumniApi
     */
    public alumniControllerFindAllGeoJSON(groupBy: AlumniControllerFindAllGeoJSONGroupByEnum, courseIds?: Array<string>, conclusionYears?: Array<string>, selectedYear?: number, options?: RawAxiosRequestConfig) {
        return AlumniApiFp(this.configuration).alumniControllerFindAllGeoJSON(groupBy, courseIds, conclusionYears, selectedYear, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get alumni by id, enriched with location, graduations and roles
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlumniApi
     */
    public alumniControllerFindOne(id: string, options?: RawAxiosRequestConfig) {
        return AlumniApiFp(this.configuration).alumniControllerFindOne(id, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const AlumniControllerFindAllGeoJSONGroupByEnum = {
    Countries: 'countries',
    Cities: 'cities'
} as const;
export type AlumniControllerFindAllGeoJSONGroupByEnum = typeof AlumniControllerFindAllGeoJSONGroupByEnum[keyof typeof AlumniControllerFindAllGeoJSONGroupByEnum];


/**
 * CompanyApi - axios parameter creator
 * @export
 */
export const CompanyApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get all companies
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companyControllerFindAll: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/company`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get company by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companyControllerFindOne: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('companyControllerFindOne', 'id', id)
            const localVarPath = `/api/company/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CompanyApi - functional programming interface
 * @export
 */
export const CompanyApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CompanyApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get all companies
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async companyControllerFindAll(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.companyControllerFindAll(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CompanyApi.companyControllerFindAll']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get company by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async companyControllerFindOne(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.companyControllerFindOne(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CompanyApi.companyControllerFindOne']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * CompanyApi - factory interface
 * @export
 */
export const CompanyApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CompanyApiFp(configuration)
    return {
        /**
         * 
         * @summary Get all companies
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companyControllerFindAll(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.companyControllerFindAll(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get company by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companyControllerFindOne(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.companyControllerFindOne(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CompanyApi - interface
 * @export
 * @interface CompanyApi
 */
export interface CompanyApiInterface {
    /**
     * 
     * @summary Get all companies
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompanyApiInterface
     */
    companyControllerFindAll(options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary Get company by id
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompanyApiInterface
     */
    companyControllerFindOne(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void>;

}

/**
 * CompanyApi - object-oriented interface
 * @export
 * @class CompanyApi
 * @extends {BaseAPI}
 */
export class CompanyApi extends BaseAPI implements CompanyApiInterface {
    /**
     * 
     * @summary Get all companies
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompanyApi
     */
    public companyControllerFindAll(options?: RawAxiosRequestConfig) {
        return CompanyApiFp(this.configuration).companyControllerFindAll(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get company by id
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompanyApi
     */
    public companyControllerFindOne(id: string, options?: RawAxiosRequestConfig) {
        return CompanyApiFp(this.configuration).companyControllerFindOne(id, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * CourseApi - axios parameter creator
 * @export
 */
export const CourseApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get courses
         * @param {string} [facultyId] The id of the faculty
         * @param {CourseControllerFindStatusEnum} [status] Course status
         * @param {string} [name] Search by course name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        courseControllerFind: async (facultyId?: string, status?: CourseControllerFindStatusEnum, name?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/course`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (facultyId !== undefined) {
                localVarQueryParameter['facultyId'] = facultyId;
            }

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a course by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        courseControllerFindOne: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('courseControllerFindOne', 'id', id)
            const localVarPath = `/api/course/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CourseApi - functional programming interface
 * @export
 */
export const CourseApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CourseApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get courses
         * @param {string} [facultyId] The id of the faculty
         * @param {CourseControllerFindStatusEnum} [status] Course status
         * @param {string} [name] Search by course name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async courseControllerFind(facultyId?: string, status?: CourseControllerFindStatusEnum, name?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CourseExtended>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.courseControllerFind(facultyId, status, name, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CourseApi.courseControllerFind']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get a course by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async courseControllerFindOne(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CourseExtended>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.courseControllerFindOne(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CourseApi.courseControllerFindOne']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * CourseApi - factory interface
 * @export
 */
export const CourseApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CourseApiFp(configuration)
    return {
        /**
         * 
         * @summary Get courses
         * @param {string} [facultyId] The id of the faculty
         * @param {CourseControllerFindStatusEnum} [status] Course status
         * @param {string} [name] Search by course name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        courseControllerFind(facultyId?: string, status?: CourseControllerFindStatusEnum, name?: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<CourseExtended>> {
            return localVarFp.courseControllerFind(facultyId, status, name, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a course by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        courseControllerFindOne(id: string, options?: RawAxiosRequestConfig): AxiosPromise<CourseExtended> {
            return localVarFp.courseControllerFindOne(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CourseApi - interface
 * @export
 * @interface CourseApi
 */
export interface CourseApiInterface {
    /**
     * 
     * @summary Get courses
     * @param {string} [facultyId] The id of the faculty
     * @param {CourseControllerFindStatusEnum} [status] Course status
     * @param {string} [name] Search by course name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourseApiInterface
     */
    courseControllerFind(facultyId?: string, status?: CourseControllerFindStatusEnum, name?: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<CourseExtended>>;

    /**
     * 
     * @summary Get a course by id
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourseApiInterface
     */
    courseControllerFindOne(id: string, options?: RawAxiosRequestConfig): AxiosPromise<CourseExtended>;

}

/**
 * CourseApi - object-oriented interface
 * @export
 * @class CourseApi
 * @extends {BaseAPI}
 */
export class CourseApi extends BaseAPI implements CourseApiInterface {
    /**
     * 
     * @summary Get courses
     * @param {string} [facultyId] The id of the faculty
     * @param {CourseControllerFindStatusEnum} [status] Course status
     * @param {string} [name] Search by course name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourseApi
     */
    public courseControllerFind(facultyId?: string, status?: CourseControllerFindStatusEnum, name?: string, options?: RawAxiosRequestConfig) {
        return CourseApiFp(this.configuration).courseControllerFind(facultyId, status, name, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get a course by id
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourseApi
     */
    public courseControllerFindOne(id: string, options?: RawAxiosRequestConfig) {
        return CourseApiFp(this.configuration).courseControllerFindOne(id, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const CourseControllerFindStatusEnum = {
    Active: 'ACTIVE',
    Inactive: 'INACTIVE'
} as const;
export type CourseControllerFindStatusEnum = typeof CourseControllerFindStatusEnum[keyof typeof CourseControllerFindStatusEnum];


/**
 * FacultyApi - axios parameter creator
 * @export
 */
export const FacultyApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get all faculties
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        facultyControllerFindAll: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/faculty`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FacultyApi - functional programming interface
 * @export
 */
export const FacultyApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FacultyApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get all faculties
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async facultyControllerFindAll(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Faculty>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.facultyControllerFindAll(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FacultyApi.facultyControllerFindAll']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * FacultyApi - factory interface
 * @export
 */
export const FacultyApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FacultyApiFp(configuration)
    return {
        /**
         * 
         * @summary Get all faculties
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        facultyControllerFindAll(options?: RawAxiosRequestConfig): AxiosPromise<Array<Faculty>> {
            return localVarFp.facultyControllerFindAll(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * FacultyApi - interface
 * @export
 * @interface FacultyApi
 */
export interface FacultyApiInterface {
    /**
     * 
     * @summary Get all faculties
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FacultyApiInterface
     */
    facultyControllerFindAll(options?: RawAxiosRequestConfig): AxiosPromise<Array<Faculty>>;

}

/**
 * FacultyApi - object-oriented interface
 * @export
 * @class FacultyApi
 * @extends {BaseAPI}
 */
export class FacultyApi extends BaseAPI implements FacultyApiInterface {
    /**
     * 
     * @summary Get all faculties
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FacultyApi
     */
    public facultyControllerFindAll(options?: RawAxiosRequestConfig) {
        return FacultyApiFp(this.configuration).facultyControllerFindAll(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * FilesApi - axios parameter creator
 * @export
 */
export const FilesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Upload a file
         * @param {UploadExtractionDto} uploadExtractionDto Data to upload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fileUploadControllerCreate: async (uploadExtractionDto: UploadExtractionDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'uploadExtractionDto' is not null or undefined
            assertParamExists('fileUploadControllerCreate', 'uploadExtractionDto', uploadExtractionDto)
            const localVarPath = `/api/files`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(uploadExtractionDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FilesApi - functional programming interface
 * @export
 */
export const FilesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FilesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Upload a file
         * @param {UploadExtractionDto} uploadExtractionDto Data to upload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fileUploadControllerCreate(uploadExtractionDto: UploadExtractionDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fileUploadControllerCreate(uploadExtractionDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FilesApi.fileUploadControllerCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * FilesApi - factory interface
 * @export
 */
export const FilesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FilesApiFp(configuration)
    return {
        /**
         * 
         * @summary Upload a file
         * @param {UploadExtractionDto} uploadExtractionDto Data to upload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fileUploadControllerCreate(uploadExtractionDto: UploadExtractionDto, options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.fileUploadControllerCreate(uploadExtractionDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * FilesApi - interface
 * @export
 * @interface FilesApi
 */
export interface FilesApiInterface {
    /**
     * 
     * @summary Upload a file
     * @param {UploadExtractionDto} uploadExtractionDto Data to upload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilesApiInterface
     */
    fileUploadControllerCreate(uploadExtractionDto: UploadExtractionDto, options?: RawAxiosRequestConfig): AxiosPromise<string>;

}

/**
 * FilesApi - object-oriented interface
 * @export
 * @class FilesApi
 * @extends {BaseAPI}
 */
export class FilesApi extends BaseAPI implements FilesApiInterface {
    /**
     * 
     * @summary Upload a file
     * @param {UploadExtractionDto} uploadExtractionDto Data to upload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilesApi
     */
    public fileUploadControllerCreate(uploadExtractionDto: UploadExtractionDto, options?: RawAxiosRequestConfig) {
        return FilesApiFp(this.configuration).fileUploadControllerCreate(uploadExtractionDto, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * UserApi - axios parameter creator
 * @export
 */
export const UserApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Authenticate a user with LinkedIn
         * @param {LinkedinAuthDto} linkedinAuthDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userControllerLinkedinAuth: async (linkedinAuthDto: LinkedinAuthDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'linkedinAuthDto' is not null or undefined
            assertParamExists('userControllerLinkedinAuth', 'linkedinAuthDto', linkedinAuthDto)
            const localVarPath = `/api/user/linkedinAuth`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(linkedinAuthDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserApi - functional programming interface
 * @export
 */
export const UserApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UserApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Authenticate a user with LinkedIn
         * @param {LinkedinAuthDto} linkedinAuthDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userControllerLinkedinAuth(linkedinAuthDto: LinkedinAuthDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userControllerLinkedinAuth(linkedinAuthDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.userControllerLinkedinAuth']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * UserApi - factory interface
 * @export
 */
export const UserApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserApiFp(configuration)
    return {
        /**
         * 
         * @summary Authenticate a user with LinkedIn
         * @param {LinkedinAuthDto} linkedinAuthDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userControllerLinkedinAuth(linkedinAuthDto: LinkedinAuthDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.userControllerLinkedinAuth(linkedinAuthDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UserApi - interface
 * @export
 * @interface UserApi
 */
export interface UserApiInterface {
    /**
     * 
     * @summary Authenticate a user with LinkedIn
     * @param {LinkedinAuthDto} linkedinAuthDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApiInterface
     */
    userControllerLinkedinAuth(linkedinAuthDto: LinkedinAuthDto, options?: RawAxiosRequestConfig): AxiosPromise<void>;

}

/**
 * UserApi - object-oriented interface
 * @export
 * @class UserApi
 * @extends {BaseAPI}
 */
export class UserApi extends BaseAPI implements UserApiInterface {
    /**
     * 
     * @summary Authenticate a user with LinkedIn
     * @param {LinkedinAuthDto} linkedinAuthDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public userControllerLinkedinAuth(linkedinAuthDto: LinkedinAuthDto, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).userControllerLinkedinAuth(linkedinAuthDto, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * V1Api - axios parameter creator
 * @export
 */
export const V1ApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a new alumni
         * @param {CreateAlumniDto} createAlumniDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        alumniControllerCreate: async (createAlumniDto: CreateAlumniDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createAlumniDto' is not null or undefined
            assertParamExists('alumniControllerCreate', 'createAlumniDto', createAlumniDto)
            const localVarPath = `/api/alumni`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createAlumniDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all alumni, enriched with location, graduations and roles
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        alumniControllerFindAll: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/alumni`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all alumni to be displayed in the map
         * @param {AlumniControllerFindAllGeoJSONGroupByEnum} groupBy How to group the data
         * @param {Array<string>} [courseIds] The ID(s) of the course(s)
         * @param {Array<string>} [conclusionYears] The year(s) of conclusion(s)
         * @param {number} [selectedYear] The selected year
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        alumniControllerFindAllGeoJSON: async (groupBy: AlumniControllerFindAllGeoJSONGroupByEnum, courseIds?: Array<string>, conclusionYears?: Array<string>, selectedYear?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'groupBy' is not null or undefined
            assertParamExists('alumniControllerFindAllGeoJSON', 'groupBy', groupBy)
            const localVarPath = `/api/alumni/geoJSON`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (groupBy !== undefined) {
                localVarQueryParameter['groupBy'] = groupBy;
            }

            if (courseIds) {
                localVarQueryParameter['courseIds'] = courseIds;
            }

            if (conclusionYears) {
                localVarQueryParameter['conclusionYears'] = conclusionYears;
            }

            if (selectedYear !== undefined) {
                localVarQueryParameter['selectedYear'] = selectedYear;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get alumni by id, enriched with location, graduations and roles
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        alumniControllerFindOne: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('alumniControllerFindOne', 'id', id)
            const localVarPath = `/api/alumni/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all companies
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companyControllerFindAll: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/company`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get company by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companyControllerFindOne: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('companyControllerFindOne', 'id', id)
            const localVarPath = `/api/company/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get courses
         * @param {string} [facultyId] The id of the faculty
         * @param {CourseControllerFindStatusEnum} [status] Course status
         * @param {string} [name] Search by course name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        courseControllerFind: async (facultyId?: string, status?: CourseControllerFindStatusEnum, name?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/course`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (facultyId !== undefined) {
                localVarQueryParameter['facultyId'] = facultyId;
            }

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a course by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        courseControllerFindOne: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('courseControllerFindOne', 'id', id)
            const localVarPath = `/api/course/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all faculties
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        facultyControllerFindAll: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/faculty`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Upload a file
         * @param {UploadExtractionDto} uploadExtractionDto Data to upload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fileUploadControllerCreate: async (uploadExtractionDto: UploadExtractionDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'uploadExtractionDto' is not null or undefined
            assertParamExists('fileUploadControllerCreate', 'uploadExtractionDto', uploadExtractionDto)
            const localVarPath = `/api/files`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(uploadExtractionDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Authenticate a user with LinkedIn
         * @param {LinkedinAuthDto} linkedinAuthDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userControllerLinkedinAuth: async (linkedinAuthDto: LinkedinAuthDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'linkedinAuthDto' is not null or undefined
            assertParamExists('userControllerLinkedinAuth', 'linkedinAuthDto', linkedinAuthDto)
            const localVarPath = `/api/user/linkedinAuth`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(linkedinAuthDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * V1Api - functional programming interface
 * @export
 */
export const V1ApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = V1ApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create a new alumni
         * @param {CreateAlumniDto} createAlumniDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async alumniControllerCreate(createAlumniDto: CreateAlumniDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.alumniControllerCreate(createAlumniDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['V1Api.alumniControllerCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get all alumni, enriched with location, graduations and roles
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async alumniControllerFindAll(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Alumni>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.alumniControllerFindAll(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['V1Api.alumniControllerFindAll']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get all alumni to be displayed in the map
         * @param {AlumniControllerFindAllGeoJSONGroupByEnum} groupBy How to group the data
         * @param {Array<string>} [courseIds] The ID(s) of the course(s)
         * @param {Array<string>} [conclusionYears] The year(s) of conclusion(s)
         * @param {number} [selectedYear] The selected year
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async alumniControllerFindAllGeoJSON(groupBy: AlumniControllerFindAllGeoJSONGroupByEnum, courseIds?: Array<string>, conclusionYears?: Array<string>, selectedYear?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GeoJSONFeatureCollection>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.alumniControllerFindAllGeoJSON(groupBy, courseIds, conclusionYears, selectedYear, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['V1Api.alumniControllerFindAllGeoJSON']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get alumni by id, enriched with location, graduations and roles
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async alumniControllerFindOne(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Alumni>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.alumniControllerFindOne(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['V1Api.alumniControllerFindOne']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get all companies
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async companyControllerFindAll(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.companyControllerFindAll(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['V1Api.companyControllerFindAll']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get company by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async companyControllerFindOne(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.companyControllerFindOne(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['V1Api.companyControllerFindOne']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get courses
         * @param {string} [facultyId] The id of the faculty
         * @param {CourseControllerFindStatusEnum} [status] Course status
         * @param {string} [name] Search by course name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async courseControllerFind(facultyId?: string, status?: CourseControllerFindStatusEnum, name?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CourseExtended>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.courseControllerFind(facultyId, status, name, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['V1Api.courseControllerFind']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get a course by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async courseControllerFindOne(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CourseExtended>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.courseControllerFindOne(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['V1Api.courseControllerFindOne']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get all faculties
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async facultyControllerFindAll(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Faculty>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.facultyControllerFindAll(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['V1Api.facultyControllerFindAll']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Upload a file
         * @param {UploadExtractionDto} uploadExtractionDto Data to upload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fileUploadControllerCreate(uploadExtractionDto: UploadExtractionDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fileUploadControllerCreate(uploadExtractionDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['V1Api.fileUploadControllerCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Authenticate a user with LinkedIn
         * @param {LinkedinAuthDto} linkedinAuthDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userControllerLinkedinAuth(linkedinAuthDto: LinkedinAuthDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userControllerLinkedinAuth(linkedinAuthDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['V1Api.userControllerLinkedinAuth']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * V1Api - factory interface
 * @export
 */
export const V1ApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = V1ApiFp(configuration)
    return {
        /**
         * 
         * @summary Create a new alumni
         * @param {CreateAlumniDto} createAlumniDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        alumniControllerCreate(createAlumniDto: CreateAlumniDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.alumniControllerCreate(createAlumniDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all alumni, enriched with location, graduations and roles
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        alumniControllerFindAll(options?: RawAxiosRequestConfig): AxiosPromise<Array<Alumni>> {
            return localVarFp.alumniControllerFindAll(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all alumni to be displayed in the map
         * @param {AlumniControllerFindAllGeoJSONGroupByEnum} groupBy How to group the data
         * @param {Array<string>} [courseIds] The ID(s) of the course(s)
         * @param {Array<string>} [conclusionYears] The year(s) of conclusion(s)
         * @param {number} [selectedYear] The selected year
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        alumniControllerFindAllGeoJSON(groupBy: AlumniControllerFindAllGeoJSONGroupByEnum, courseIds?: Array<string>, conclusionYears?: Array<string>, selectedYear?: number, options?: RawAxiosRequestConfig): AxiosPromise<GeoJSONFeatureCollection> {
            return localVarFp.alumniControllerFindAllGeoJSON(groupBy, courseIds, conclusionYears, selectedYear, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get alumni by id, enriched with location, graduations and roles
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        alumniControllerFindOne(id: string, options?: RawAxiosRequestConfig): AxiosPromise<Alumni> {
            return localVarFp.alumniControllerFindOne(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all companies
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companyControllerFindAll(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.companyControllerFindAll(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get company by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companyControllerFindOne(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.companyControllerFindOne(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get courses
         * @param {string} [facultyId] The id of the faculty
         * @param {CourseControllerFindStatusEnum} [status] Course status
         * @param {string} [name] Search by course name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        courseControllerFind(facultyId?: string, status?: CourseControllerFindStatusEnum, name?: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<CourseExtended>> {
            return localVarFp.courseControllerFind(facultyId, status, name, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a course by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        courseControllerFindOne(id: string, options?: RawAxiosRequestConfig): AxiosPromise<CourseExtended> {
            return localVarFp.courseControllerFindOne(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all faculties
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        facultyControllerFindAll(options?: RawAxiosRequestConfig): AxiosPromise<Array<Faculty>> {
            return localVarFp.facultyControllerFindAll(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Upload a file
         * @param {UploadExtractionDto} uploadExtractionDto Data to upload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fileUploadControllerCreate(uploadExtractionDto: UploadExtractionDto, options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.fileUploadControllerCreate(uploadExtractionDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Authenticate a user with LinkedIn
         * @param {LinkedinAuthDto} linkedinAuthDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userControllerLinkedinAuth(linkedinAuthDto: LinkedinAuthDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.userControllerLinkedinAuth(linkedinAuthDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * V1Api - interface
 * @export
 * @interface V1Api
 */
export interface V1ApiInterface {
    /**
     * 
     * @summary Create a new alumni
     * @param {CreateAlumniDto} createAlumniDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    alumniControllerCreate(createAlumniDto: CreateAlumniDto, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary Get all alumni, enriched with location, graduations and roles
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    alumniControllerFindAll(options?: RawAxiosRequestConfig): AxiosPromise<Array<Alumni>>;

    /**
     * 
     * @summary Get all alumni to be displayed in the map
     * @param {AlumniControllerFindAllGeoJSONGroupByEnum} groupBy How to group the data
     * @param {Array<string>} [courseIds] The ID(s) of the course(s)
     * @param {Array<string>} [conclusionYears] The year(s) of conclusion(s)
     * @param {number} [selectedYear] The selected year
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    alumniControllerFindAllGeoJSON(groupBy: AlumniControllerFindAllGeoJSONGroupByEnum, courseIds?: Array<string>, conclusionYears?: Array<string>, selectedYear?: number, options?: RawAxiosRequestConfig): AxiosPromise<GeoJSONFeatureCollection>;

    /**
     * 
     * @summary Get alumni by id, enriched with location, graduations and roles
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    alumniControllerFindOne(id: string, options?: RawAxiosRequestConfig): AxiosPromise<Alumni>;

    /**
     * 
     * @summary Get all companies
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    companyControllerFindAll(options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary Get company by id
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    companyControllerFindOne(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary Get courses
     * @param {string} [facultyId] The id of the faculty
     * @param {CourseControllerFindStatusEnum} [status] Course status
     * @param {string} [name] Search by course name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    courseControllerFind(facultyId?: string, status?: CourseControllerFindStatusEnum, name?: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<CourseExtended>>;

    /**
     * 
     * @summary Get a course by id
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    courseControllerFindOne(id: string, options?: RawAxiosRequestConfig): AxiosPromise<CourseExtended>;

    /**
     * 
     * @summary Get all faculties
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    facultyControllerFindAll(options?: RawAxiosRequestConfig): AxiosPromise<Array<Faculty>>;

    /**
     * 
     * @summary Upload a file
     * @param {UploadExtractionDto} uploadExtractionDto Data to upload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    fileUploadControllerCreate(uploadExtractionDto: UploadExtractionDto, options?: RawAxiosRequestConfig): AxiosPromise<string>;

    /**
     * 
     * @summary Authenticate a user with LinkedIn
     * @param {LinkedinAuthDto} linkedinAuthDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    userControllerLinkedinAuth(linkedinAuthDto: LinkedinAuthDto, options?: RawAxiosRequestConfig): AxiosPromise<void>;

}

/**
 * V1Api - object-oriented interface
 * @export
 * @class V1Api
 * @extends {BaseAPI}
 */
export class V1Api extends BaseAPI implements V1ApiInterface {
    /**
     * 
     * @summary Create a new alumni
     * @param {CreateAlumniDto} createAlumniDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public alumniControllerCreate(createAlumniDto: CreateAlumniDto, options?: RawAxiosRequestConfig) {
        return V1ApiFp(this.configuration).alumniControllerCreate(createAlumniDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all alumni, enriched with location, graduations and roles
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public alumniControllerFindAll(options?: RawAxiosRequestConfig) {
        return V1ApiFp(this.configuration).alumniControllerFindAll(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all alumni to be displayed in the map
     * @param {AlumniControllerFindAllGeoJSONGroupByEnum} groupBy How to group the data
     * @param {Array<string>} [courseIds] The ID(s) of the course(s)
     * @param {Array<string>} [conclusionYears] The year(s) of conclusion(s)
     * @param {number} [selectedYear] The selected year
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public alumniControllerFindAllGeoJSON(groupBy: AlumniControllerFindAllGeoJSONGroupByEnum, courseIds?: Array<string>, conclusionYears?: Array<string>, selectedYear?: number, options?: RawAxiosRequestConfig) {
        return V1ApiFp(this.configuration).alumniControllerFindAllGeoJSON(groupBy, courseIds, conclusionYears, selectedYear, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get alumni by id, enriched with location, graduations and roles
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public alumniControllerFindOne(id: string, options?: RawAxiosRequestConfig) {
        return V1ApiFp(this.configuration).alumniControllerFindOne(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all companies
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public companyControllerFindAll(options?: RawAxiosRequestConfig) {
        return V1ApiFp(this.configuration).companyControllerFindAll(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get company by id
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public companyControllerFindOne(id: string, options?: RawAxiosRequestConfig) {
        return V1ApiFp(this.configuration).companyControllerFindOne(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get courses
     * @param {string} [facultyId] The id of the faculty
     * @param {CourseControllerFindStatusEnum} [status] Course status
     * @param {string} [name] Search by course name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public courseControllerFind(facultyId?: string, status?: CourseControllerFindStatusEnum, name?: string, options?: RawAxiosRequestConfig) {
        return V1ApiFp(this.configuration).courseControllerFind(facultyId, status, name, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get a course by id
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public courseControllerFindOne(id: string, options?: RawAxiosRequestConfig) {
        return V1ApiFp(this.configuration).courseControllerFindOne(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all faculties
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public facultyControllerFindAll(options?: RawAxiosRequestConfig) {
        return V1ApiFp(this.configuration).facultyControllerFindAll(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Upload a file
     * @param {UploadExtractionDto} uploadExtractionDto Data to upload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public fileUploadControllerCreate(uploadExtractionDto: UploadExtractionDto, options?: RawAxiosRequestConfig) {
        return V1ApiFp(this.configuration).fileUploadControllerCreate(uploadExtractionDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Authenticate a user with LinkedIn
     * @param {LinkedinAuthDto} linkedinAuthDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public userControllerLinkedinAuth(linkedinAuthDto: LinkedinAuthDto, options?: RawAxiosRequestConfig) {
        return V1ApiFp(this.configuration).userControllerLinkedinAuth(linkedinAuthDto, options).then((request) => request(this.axios, this.basePath));
    }
}