/* tslint:disable */
/* eslint-disable */
/**
 * API
 * API description
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface Alumni
 */
export interface Alumni {
    /**
     * The id of the alumni
     * @type {string}
     * @memberof Alumni
     */
    'id': string;
    /**
     * The first name of the alumni
     * @type {string}
     * @memberof Alumni
     */
    'first_name': string;
    /**
     * The last name of the alumni
     * @type {string}
     * @memberof Alumni
     */
    'last_name': string;
    /**
     * The linkedin url of the alumni
     * @type {string}
     * @memberof Alumni
     */
    'linkedin_url'?: string;
    /**
     * The roles of the alumni
     * @type {Array<Role>}
     * @memberof Alumni
     */
    'roles'?: Array<Role>;
}
/**
 * 
 * @export
 * @interface Role
 */
export interface Role {
    /**
     * The id of the role
     * @type {string}
     * @memberof Role
     */
    'id': string;
    /**
     * The id of the alumni
     * @type {string}
     * @memberof Role
     */
    'alumni_id': string;
    /**
     * The id of the company
     * @type {string}
     * @memberof Role
     */
    'company_id': string;
    /**
     * The start date of the role
     * @type {string}
     * @memberof Role
     */
    'start_date': string;
    /**
     * The end date of the role
     * @type {object}
     * @memberof Role
     */
    'end_date'?: object | null;
    /**
     * The seniority level of the role
     * @type {string}
     * @memberof Role
     */
    'seniority_level': string;
    /**
     * The level 1 of the role
     * @type {string}
     * @memberof Role
     */
    'esco_l1': string;
    /**
     * The level 2 of the role
     * @type {string}
     * @memberof Role
     */
    'esco_l2': string;
}

/**
 * V1Api - axios parameter creator
 * @export
 */
export const V1ApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get all alumni
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        alumniControllerFindAll: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/alumni`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get alumni by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        alumniControllerFindOne: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('alumniControllerFindOne', 'id', id)
            const localVarPath = `/api/alumni/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all companies
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companyControllerFindAll: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/company`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get company by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companyControllerFindOne: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('companyControllerFindOne', 'id', id)
            const localVarPath = `/api/company/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * V1Api - functional programming interface
 * @export
 */
export const V1ApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = V1ApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get all alumni
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async alumniControllerFindAll(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Alumni>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.alumniControllerFindAll(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['V1Api.alumniControllerFindAll']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get alumni by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async alumniControllerFindOne(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Alumni>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.alumniControllerFindOne(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['V1Api.alumniControllerFindOne']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get all companies
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async companyControllerFindAll(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.companyControllerFindAll(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['V1Api.companyControllerFindAll']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get company by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async companyControllerFindOne(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.companyControllerFindOne(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['V1Api.companyControllerFindOne']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * V1Api - factory interface
 * @export
 */
export const V1ApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = V1ApiFp(configuration)
    return {
        /**
         * 
         * @summary Get all alumni
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        alumniControllerFindAll(options?: RawAxiosRequestConfig): AxiosPromise<Array<Alumni>> {
            return localVarFp.alumniControllerFindAll(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get alumni by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        alumniControllerFindOne(id: string, options?: RawAxiosRequestConfig): AxiosPromise<Alumni> {
            return localVarFp.alumniControllerFindOne(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all companies
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companyControllerFindAll(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.companyControllerFindAll(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get company by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companyControllerFindOne(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.companyControllerFindOne(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * V1Api - interface
 * @export
 * @interface V1Api
 */
export interface V1ApiInterface {
    /**
     * 
     * @summary Get all alumni
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    alumniControllerFindAll(options?: RawAxiosRequestConfig): AxiosPromise<Array<Alumni>>;

    /**
     * 
     * @summary Get alumni by id
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    alumniControllerFindOne(id: string, options?: RawAxiosRequestConfig): AxiosPromise<Alumni>;

    /**
     * 
     * @summary Get all companies
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    companyControllerFindAll(options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary Get company by id
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    companyControllerFindOne(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void>;

}

/**
 * V1Api - object-oriented interface
 * @export
 * @class V1Api
 * @extends {BaseAPI}
 */
export class V1Api extends BaseAPI implements V1ApiInterface {
    /**
     * 
     * @summary Get all alumni
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public alumniControllerFindAll(options?: RawAxiosRequestConfig) {
        return V1ApiFp(this.configuration).alumniControllerFindAll(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get alumni by id
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public alumniControllerFindOne(id: string, options?: RawAxiosRequestConfig) {
        return V1ApiFp(this.configuration).alumniControllerFindOne(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all companies
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public companyControllerFindAll(options?: RawAxiosRequestConfig) {
        return V1ApiFp(this.configuration).companyControllerFindAll(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get company by id
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public companyControllerFindOne(id: string, options?: RawAxiosRequestConfig) {
        return V1ApiFp(this.configuration).companyControllerFindOne(id, options).then((request) => request(this.axios, this.basePath));
    }
}



