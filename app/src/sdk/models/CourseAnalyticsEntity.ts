/* tslint:disable */
/* eslint-disable */
/**
 * API
 * API description
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { FacultyAnalyticsEntity } from './FacultyAnalyticsEntity';
import {
    FacultyAnalyticsEntityFromJSON,
    FacultyAnalyticsEntityFromJSONTyped,
    FacultyAnalyticsEntityToJSON,
    FacultyAnalyticsEntityToJSONTyped,
} from './FacultyAnalyticsEntity';

/**
 * 
 * @export
 * @interface CourseAnalyticsEntity
 */
export interface CourseAnalyticsEntity {
    /**
     * The id of the course
     * @type {string}
     * @memberof CourseAnalyticsEntity
     */
    id: string;
    /**
     * The name of the course
     * @type {string}
     * @memberof CourseAnalyticsEntity
     */
    name: string;
    /**
     * The acronym of the course
     * @type {string}
     * @memberof CourseAnalyticsEntity
     */
    acronym: string;
    /**
     * The status of the course
     * @type {string}
     * @memberof CourseAnalyticsEntity
     */
    status: CourseAnalyticsEntityStatusEnum;
    /**
     * The course type of the course
     * @type {string}
     * @memberof CourseAnalyticsEntity
     */
    courseType: CourseAnalyticsEntityCourseTypeEnum;
    /**
     * The faculty acronym of the course
     * @type {string}
     * @memberof CourseAnalyticsEntity
     */
    facultyAcronym: string;
    /**
     * The start year of the course
     * @type {number}
     * @memberof CourseAnalyticsEntity
     */
    startYear: number;
    /**
     * The year in which the course ceased to exist
     * @type {number}
     * @memberof CourseAnalyticsEntity
     */
    endYear?: number;
    /**
     * The faculty id of the course
     * @type {string}
     * @memberof CourseAnalyticsEntity
     */
    facultyId: string;
    /**
     * The faculty of the course
     * @type {FacultyAnalyticsEntity}
     * @memberof CourseAnalyticsEntity
     */
    faculty: FacultyAnalyticsEntity;
}


/**
 * @export
 */
export const CourseAnalyticsEntityStatusEnum = {
    Active: 'ACTIVE',
    Inactive: 'INACTIVE'
} as const;
export type CourseAnalyticsEntityStatusEnum = typeof CourseAnalyticsEntityStatusEnum[keyof typeof CourseAnalyticsEntityStatusEnum];

/**
 * @export
 */
export const CourseAnalyticsEntityCourseTypeEnum = {
    IntegratedMasters: 'INTEGRATED_MASTERS',
    Bachelors: 'BACHELORS',
    Masters: 'MASTERS',
    Doctorate: 'DOCTORATE'
} as const;
export type CourseAnalyticsEntityCourseTypeEnum = typeof CourseAnalyticsEntityCourseTypeEnum[keyof typeof CourseAnalyticsEntityCourseTypeEnum];


/**
 * Check if a given object implements the CourseAnalyticsEntity interface.
 */
export function instanceOfCourseAnalyticsEntity(value: object): value is CourseAnalyticsEntity {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('acronym' in value) || value['acronym'] === undefined) return false;
    if (!('status' in value) || value['status'] === undefined) return false;
    if (!('courseType' in value) || value['courseType'] === undefined) return false;
    if (!('facultyAcronym' in value) || value['facultyAcronym'] === undefined) return false;
    if (!('startYear' in value) || value['startYear'] === undefined) return false;
    if (!('facultyId' in value) || value['facultyId'] === undefined) return false;
    if (!('faculty' in value) || value['faculty'] === undefined) return false;
    return true;
}

export function CourseAnalyticsEntityFromJSON(json: any): CourseAnalyticsEntity {
    return CourseAnalyticsEntityFromJSONTyped(json, false);
}

export function CourseAnalyticsEntityFromJSONTyped(json: any, ignoreDiscriminator: boolean): CourseAnalyticsEntity {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'name': json['name'],
        'acronym': json['acronym'],
        'status': json['status'],
        'courseType': json['courseType'],
        'facultyAcronym': json['facultyAcronym'],
        'startYear': json['startYear'],
        'endYear': json['endYear'] == null ? undefined : json['endYear'],
        'facultyId': json['facultyId'],
        'faculty': FacultyAnalyticsEntityFromJSON(json['faculty']),
    };
}

export function CourseAnalyticsEntityToJSON(json: any): CourseAnalyticsEntity {
    return CourseAnalyticsEntityToJSONTyped(json, false);
}

export function CourseAnalyticsEntityToJSONTyped(value?: CourseAnalyticsEntity | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'name': value['name'],
        'acronym': value['acronym'],
        'status': value['status'],
        'courseType': value['courseType'],
        'facultyAcronym': value['facultyAcronym'],
        'startYear': value['startYear'],
        'endYear': value['endYear'],
        'facultyId': value['facultyId'],
        'faculty': FacultyAnalyticsEntityToJSON(value['faculty']),
    };
}

