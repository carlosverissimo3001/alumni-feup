/* tslint:disable */
/* eslint-disable */
/**
 * API
 * API description
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface Location
 */
export interface Location {
    /**
     * The city of the location
     * @type {string}
     * @memberof Location
     */
    city?: string;
    /**
     * The country of the location
     * @type {string}
     * @memberof Location
     */
    country?: string;
    /**
     * The country code of the location
     * @type {string}
     * @memberof Location
     */
    countryCode?: string;
    /**
     * The latitude of the location
     * @type {number}
     * @memberof Location
     */
    latitude?: number;
    /**
     * The longitude of the location
     * @type {number}
     * @memberof Location
     */
    longitude?: number;
    /**
     * The id of the location
     * @type {string}
     * @memberof Location
     */
    id: string;
    /**
     * The created at date of the location
     * @type {Date}
     * @memberof Location
     */
    createdAt: Date;
    /**
     * The updated at date of the location
     * @type {Date}
     * @memberof Location
     */
    updatedAt: Date;
}

/**
 * Check if a given object implements the Location interface.
 */
export function instanceOfLocation(value: object): value is Location {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('createdAt' in value) || value['createdAt'] === undefined) return false;
    if (!('updatedAt' in value) || value['updatedAt'] === undefined) return false;
    return true;
}

export function LocationFromJSON(json: any): Location {
    return LocationFromJSONTyped(json, false);
}

export function LocationFromJSONTyped(json: any, ignoreDiscriminator: boolean): Location {
    if (json == null) {
        return json;
    }
    return {
        
        'city': json['city'] == null ? undefined : json['city'],
        'country': json['country'] == null ? undefined : json['country'],
        'countryCode': json['countryCode'] == null ? undefined : json['countryCode'],
        'latitude': json['latitude'] == null ? undefined : json['latitude'],
        'longitude': json['longitude'] == null ? undefined : json['longitude'],
        'id': json['id'],
        'createdAt': (new Date(json['createdAt'])),
        'updatedAt': (new Date(json['updatedAt'])),
    };
}

export function LocationToJSON(json: any): Location {
    return LocationToJSONTyped(json, false);
}

export function LocationToJSONTyped(value?: Location | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'city': value['city'],
        'country': value['country'],
        'countryCode': value['countryCode'],
        'latitude': value['latitude'],
        'longitude': value['longitude'],
        'id': value['id'],
        'createdAt': ((value['createdAt']).toISOString()),
        'updatedAt': ((value['updatedAt']).toISOString()),
    };
}

