/* tslint:disable */
/* eslint-disable */
/**
 * API
 * API description
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Company } from './Company';
import {
    CompanyFromJSON,
    CompanyFromJSONTyped,
    CompanyToJSON,
    CompanyToJSONTyped,
} from './Company';

/**
 * 
 * @export
 * @interface Role
 */
export interface Role {
    /**
     * The id of the role
     * @type {string}
     * @memberof Role
     */
    id: string;
    /**
     * The start date of the role
     * @type {Date}
     * @memberof Role
     */
    startDate: Date;
    /**
     * The end date of the role
     * @type {object}
     * @memberof Role
     */
    endDate?: object;
    /**
     * The seniority level of the role
     * @type {string}
     * @memberof Role
     */
    seniorityLevel: RoleSeniorityLevelEnum;
    /**
     * The Company
     * @type {Company}
     * @memberof Role
     */
    company: Company;
    /**
     * The job classifications
     * @type {object}
     * @memberof Role
     */
    jobClassification?: object;
    /**
     * The location of the role
     * @type {object}
     * @memberof Role
     */
    location?: object;
}


/**
 * @export
 */
export const RoleSeniorityLevelEnum = {
    Intern: 'INTERN',
    EntryLevel: 'ENTRY_LEVEL',
    Associate: 'ASSOCIATE',
    MidSeniorLevel: 'MID_SENIOR_LEVEL',
    Director: 'DIRECTOR',
    Executive: 'EXECUTIVE',
    CLevel: 'C_LEVEL'
} as const;
export type RoleSeniorityLevelEnum = typeof RoleSeniorityLevelEnum[keyof typeof RoleSeniorityLevelEnum];


/**
 * Check if a given object implements the Role interface.
 */
export function instanceOfRole(value: object): value is Role {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('startDate' in value) || value['startDate'] === undefined) return false;
    if (!('seniorityLevel' in value) || value['seniorityLevel'] === undefined) return false;
    if (!('company' in value) || value['company'] === undefined) return false;
    return true;
}

export function RoleFromJSON(json: any): Role {
    return RoleFromJSONTyped(json, false);
}

export function RoleFromJSONTyped(json: any, ignoreDiscriminator: boolean): Role {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'startDate': (new Date(json['startDate'])),
        'endDate': json['endDate'] == null ? undefined : json['endDate'],
        'seniorityLevel': json['seniorityLevel'],
        'company': CompanyFromJSON(json['Company']),
        'jobClassification': json['JobClassification'] == null ? undefined : json['JobClassification'],
        'location': json['Location'] == null ? undefined : json['Location'],
    };
}

export function RoleToJSON(json: any): Role {
    return RoleToJSONTyped(json, false);
}

export function RoleToJSONTyped(value?: Role | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'startDate': ((value['startDate']).toISOString()),
        'endDate': value['endDate'],
        'seniorityLevel': value['seniorityLevel'],
        'Company': CompanyToJSON(value['company']),
        'JobClassification': value['jobClassification'],
        'Location': value['location'],
    };
}

