generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Alumni {
  id                  String       @id @default(dbgenerated("gen_random_uuid()"))
  first_name          String
  last_name           String
  linkedin_url        String       @unique
  personal_email      String?
  current_location_id String?
  created_at          DateTime     @default(now()) @db.Timestamp(6)
  created_by          String?
  updated_at          DateTime?    @db.Timestamp(6)
  updated_by          String?
  profile_picture_url String?
  person_id           String?
  student_id          String?
  Location            Location?    @relation(fields: [current_location_id], references: [id])
  Graduations         Graduation[]
  Roles               Role[]

  @@index([current_location_id])
  @@index([first_name, last_name])
  @@index([linkedin_url])
  @@map("alumni")
}

model AlumniRaw {
  id         String   @id
  created_at DateTime @default(now()) @db.Timestamp(6)

  @@map("alumni_raw")
}

model Company {
  id             String        @id @default(dbgenerated("gen_random_uuid()"))
  name           String
  linkedin_url   String?       @unique(map: "company_unique_url")
  industry_id    String
  logo           String?
  // has the company changed name?  
  previous_names String[]      @default([])
  // if the company is acquired, this is the id of the company it was acquired by
  merged_into_id String?
  founded        Int?
  company_size   COMPANY_SIZE?
  created_at     DateTime      @default(now()) @db.Timestamp(6)
  updated_at     DateTime      @default(now()) @db.Timestamp(6)
  Industry       Industry      @relation(fields: [industry_id], references: [id])
  Role           Role[]

  merged_into      Company?  @relation("MergedCompanies", fields: [merged_into_id], references: [id])
  merged_companies Company[] @relation("MergedCompanies")

  @@index([industry_id])
  @@map("company")
}

model Course {
  id          String        @id @default(uuid())
  name        String
  created_at  DateTime      @default(now()) @db.Timestamp(6)
  acronym     String
  end_year    Int?
  status      COURSE_STATUS @default(ACTIVE)
  faculty_id  String
  name_int    String?
  course_type COURSE_TYPE
  start_year  Int

  CourseExtraction CourseExtraction[]
  Graduation       Graduation[]

  @@map("course")
}

model Faculty {
  id       String  @id
  name     String
  name_int String?
  acronym  String?

  CourseExtraction CourseExtraction[]

  @@map("faculty")
}

model CourseExtraction {
  id              String    @id @default(dbgenerated("gen_random_uuid()"))
  student_id      String
  full_name       String
  faculty_id      String
  course_id       String
  conclusion_year Int
  created_at      DateTime  @default(now()) @db.Timestamp(6)
  parsed          Boolean   @default(false)
  parsed_at       DateTime? @db.Timestamp(6)

  Course  Course  @relation(fields: [course_id], references: [id])
  Faculty Faculty @relation(fields: [faculty_id], references: [id])

  @@map("course_extraction")
}

model Graduation {
  id              String @id @default(dbgenerated("gen_random_uuid()"))
  alumni_id       String
  course_id       String
  conclusion_year Int
  created_at      DateTime @default(now()) @db.Timestamp(6)
  Alumni          Alumni @relation(fields: [alumni_id], references: [id])
  Course          Course @relation(fields: [course_id], references: [id])

  @@index([alumni_id])
  @@index([course_id])
  @@map("graduation")
}

model Industry {
  id      String    @id @default(dbgenerated("gen_random_uuid()"))
  name    String
  Company Company[]

  @@index([name])
  @@map("industry")
}

model JobClassification {
  id         String   @id @default(dbgenerated("gen_random_uuid()"))
  title      String
  level      Int      @db.SmallInt
  esco_code  String?
  role_id    String
  confidence Float?
  created_at DateTime @default(now()) @db.Timestamp(6)
  Role       Role     @relation(fields: [role_id], references: [id])

  @@index([role_id])
  @@index([title])
  @@map("job_classification")
}

model Location {
  id              String                @id @default(dbgenerated("gen_random_uuid()"))
  city            String?
  country         String?
  latitude        Float?
  longitude       Float?
  country_code    String?
  is_country_only Boolean               @default(false)
  Alumni          Alumni[]
  Problematic     ProblematicLocation[]
  Role            Role[]

  @@index([city, country])
  @@index([country_code])
  @@index([latitude, longitude])
  @@map("location")
}

model ProblematicLocation {
  id          String   @id @default(uuid())
  location_id String
  isExpected  Boolean  @default(false)
  Location    Location @relation(fields: [location_id], references: [id])

  @@map("problematic_location")
}

model Role {
  id                String              @id @default(dbgenerated("gen_random_uuid()"))
  alumni_id         String
  company_id        String
  start_date        DateTime            @db.Timestamptz(6)
  end_date          DateTime?           @db.Timestamptz(6)
  created_at        DateTime            @default(now()) @db.Timestamp(6)
  updated_at        DateTime            @default(now()) @db.Timestamp(6)
  seniority_level   SENIORITY_LEVEL
  location_id       String?
  JobClassification JobClassification[]
  Alumni            Alumni              @relation(fields: [alumni_id], references: [id])
  Company           Company             @relation(fields: [company_id], references: [id])
  Location          Location?           @relation(fields: [location_id], references: [id])

  @@index([alumni_id])
  @@index([company_id])
  @@index([location_id])
  @@map("role")
}

model RoleRaw {
  id          String  @id @default(dbgenerated("gen_random_uuid()"))
  description String?
  role_id     String

  @@map("role_raw")
}

model EscoClassification {
  id String @id @default(dbgenerated("gen_random_uuid()"))
  level Int @db.SmallInt
  code String
  title_en String
  definition String
  tasks_include String
  included_occupations String
  excluded_occupations String
  notes String?

  @@map("esco_classification")
}

enum COURSE_TYPE {
  INTEGRATED
  BACHELORS
  MASTERS
  DOCTORATE
}

enum COURSE_STATUS {
  ACTIVE
  INACTIVE
}

enum SENIORITY_LEVEL {
  INTERN
  ENTRY_LEVEL
  ASSOCIATE
  MID_SENIOR_LEVEL
  DIRECTOR
  EXECUTIVE
  C_LEVEL
}

// https://learn.microsoft.com/en-us/linkedin/shared/references/reference-tables/company-size-codes
enum COMPANY_SIZE {
  A
  B
  C
  D
  E
  F
  G
  H
  I
}
