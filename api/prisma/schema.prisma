generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Alumni {
  id        String  @id @default(dbgenerated("gen_random_uuid()"))
  firstName String  @map("first_name")
  lastName  String  @map("last_name")
  fullName  String? @map("full_name")

  // Data from LinkedIn
  linkedinUrl       String? @unique @map("linkedin_url")
  profilePictureUrl String? @map("profile_picture_url")

  currentLocationId String? @map("current_location_id")

  // Metadata
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp(6)
  createdBy String?  @map("created_by")
  updatedAt DateTime @default(now()) @map("updated_at") @db.Timestamp(6)
  updatedBy String?  @map("updated_by")
  // Linkedin Metadata
  metadata  Json?    @map("metadata")

  // Data source and submission details
  source          Source?
  hasSigarraMatch Boolean @map("has_sigarra_match")
  wasReviewed     Boolean @default(false) @map("was_reviewed")

  // Uniquely generated by the LinkedIn Auth API
  personId String? @map("person_id")

  // Obtained when the user has logged in with their LinkedIn account
  personalEmail String? @map("personal_email")

  Location        Location?        @relation(fields: [currentLocationId], references: [id])
  Graduations     Graduation[]
  Roles           Role[]
  ReviewsCompany  ReviewCompany[]
  ReviewsLocation ReviewLocation[]
  Permissions     Permission[]

  @@index([currentLocationId])
  @@index([firstName, lastName])
  @@index([linkedinUrl])
  @@map("alumni")
}

model Company {
  id           String        @id @default(dbgenerated("gen_random_uuid()"))
  name         String
  linkedinUrl  String?       @unique @map("linkedin_url")
  industryId   String        @map("industry_id")
  hqLocationId String?       @map("hq_location_id")
  logo         String?
  founded      Int?
  website      String?
  companyType  COMPANY_TYPE? @map("company_type")
  marketCap    BigInt?       @map("market_cap")
  ticker       String?       @map("ticker")
  companySize  COMPANY_SIZE? @map("company_size")
  createdAt    DateTime      @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt    DateTime      @default(now()) @map("updated_at") @db.Timestamp(6)

  Industry      Industry        @relation(fields: [industryId], references: [id])
  roles         Role[]
  ReviewCompany ReviewCompany[]
  Location      Location?       @relation(fields: [hqLocationId], references: [id])

  @@index([industryId])
  @@map("company")
}

model Course {
  id         String        @id @default(uuid())
  name       String
  nameInt    String?       @map("name_int")
  facultyId  String        @map("faculty_id")
  acronym    String
  startYear  Int           @map("start_year")
  endYear    Int?          @map("end_year")
  status     COURSE_STATUS @default(ACTIVE)
  courseType COURSE_TYPE   @map("course_type")

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt DateTime @default(now()) @map("updated_at") @db.Timestamp(6)
  createdBy String?  @map("created_by")
  updatedBy String?  @map("updated_by")

  Graduation Graduation[]
  Faculty    Faculty      @relation(fields: [facultyId], references: [id])

  @@map("course")
}

model Faculty {
  id      String @id @default(dbgenerated("gen_random_uuid()"))
  name    String
  nameInt String @map("name_int")
  acronym String

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt DateTime @default(now()) @map("updated_at") @db.Timestamp(6)
  createdBy String?  @map("created_by")
  updatedBy String?  @map("updated_by")

  Course Course[]

  @@map("faculty")
}

model Graduation {
  id             String   @id @default(dbgenerated("gen_random_uuid()"))
  alumniId       String   @map("alumni_id")
  courseId       String   @map("course_id")
  conclusionYear Int      @map("conclusion_year")
  createdAt      DateTime @default(now()) @map("created_at") @db.Timestamp(6)
  Alumni         Alumni   @relation(fields: [alumniId], references: [id])
  Course         Course   @relation(fields: [courseId], references: [id])

  @@index([alumniId])
  @@index([courseId])
  @@map("graduation")
}

model Industry {
  id      String    @id @default(dbgenerated("gen_random_uuid()"))
  name    String
  Company Company[]

  @@index([name])
  @@map("industry")
}

model JobClassification {
  id         String @id @default(dbgenerated("gen_random_uuid()"))
  title      String
  level      Int    @db.SmallInt
  escoCode   String @map("esco_code")
  roleId     String @unique @map("role_id")
  confidence Float?

  modelUsed String? @map("model_used")

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt DateTime @default(now()) @map("updated_at") @db.Timestamp(6)

  metadata Json? @map("metadata")

  Role Role @relation(fields: [roleId], references: [id])

  @@index([roleId])
  @@index([title])
  @@map("job_classification")
}

model Location {
  id            String   @id @default(dbgenerated("gen_random_uuid()"))
  city          String?
  country       String?
  latitude      Float?
  longitude     Float?
  countryCode   String?  @map("country_code")
  isCountryOnly Boolean  @default(false) @map("is_country_only")
  createdAt     DateTime @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt     DateTime @default(now()) @map("updated_at") @db.Timestamp(6)

  Alumni         Alumni[]
  Role           Role[]
  ReviewCompany  ReviewCompany[]
  ReviewLocation ReviewLocation[]
  Company        Company[]

  @@index([city, country])
  @@index([countryCode])
  @@index([latitude, longitude])
  @@map("location")
}

model Role {
  id String @id @default(dbgenerated("gen_random_uuid()"))

  alumniId       String          @map("alumni_id")
  companyId      String          @map("company_id")
  locationId     String?         @map("location_id")
  seniorityLevel SENIORITY_LEVEL @map("seniority_level")

  startDate DateTime  @map("start_date") @db.Timestamptz(6)
  endDate   DateTime? @map("end_date") @db.Timestamptz(6)

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt DateTime @default(now()) @map("updated_at") @db.Timestamp(6)

  isCurrent   Boolean @default(false) @map("is_current")
  isPromotion Boolean @default(false) @map("is_promotion")

  JobClassification JobClassification?
  Alumni            Alumni             @relation(fields: [alumniId], references: [id])
  Company           Company            @relation(fields: [companyId], references: [id])
  Location          Location?          @relation(fields: [locationId], references: [id])
  RoleRaw           RoleRaw?

  @@index([alumniId])
  @@index([companyId])
  @@index([locationId])
  @@map("role")
}

model RoleRaw {
  id          String  @id @default(dbgenerated("gen_random_uuid()"))
  title       String
  description String?

  // free form location input from linkedin
  location String?

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp(6)
  roleId    String   @unique @map("role_id")

  Role Role @relation(fields: [roleId], references: [id])

  @@index([roleId])
  @@map("role_raw")
}

model EscoClassification {
  id    String @id @default(dbgenerated("gen_random_uuid()"))
  level Int    @db.SmallInt
  code  String

  // Defines if this classification has no children
  isLeaf              Boolean                @default(false) @map("is_leaf")
  titleEn             String                 @map("title_en")
  definition          String                 @map("definition")
  tasksInclude        String?                @map("tasks_include")
  includedOccupations String?                @map("included_occupations")
  excludedOccupations String?                @map("excluded_occupations")
  notes               String?                @map("notes")
  embedding           Unsupported("vector")?

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt DateTime @default(now()) @map("updated_at") @db.Timestamp(6)

  @@map("esco_classification")
}

model ReviewCompany {
  id          String   @id @default(dbgenerated("gen_random_uuid()"))
  alumniId    String   @map("alumni_id")
  companyId   String   @map("company_id")
  locationId  String?  @map("location_id")
  rating      Int      @db.SmallInt
  description String?
  upvotes     Int      @default(0) @db.SmallInt
  downvotes   Int      @default(0) @db.SmallInt
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt   DateTime @default(now()) @map("updated_at") @db.Timestamp(6)

  Alumni   Alumni    @relation(fields: [alumniId], references: [id])
  Company  Company   @relation(fields: [companyId], references: [id])
  Location Location? @relation(fields: [locationId], references: [id])

  @@map("review_company")
}

/**
 * model ReviewCompanyProperty {
 * id String @id @default(dbgenerated("gen_random_uuid()"))
 * reviewCompanyId String @map("review_company_id")
 * property ReviewCompanyProperty @map("property")
 * rating Int @db.SmallInt
 * ReviewCompany ReviewCompany @relation(fields: [reviewCompanyId], references: [id])
 * @@map("review_company_property")
 * }
 */

model ReviewLocation {
  id          String   @id @default(dbgenerated("gen_random_uuid()"))
  alumniId    String   @map("alumni_id")
  locationId  String   @map("location_id")
  rating      Int      @db.SmallInt
  description String?
  upvotes     Int      @default(0) @db.SmallInt
  downvotes   Int      @default(0) @db.SmallInt
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt   DateTime @default(now()) @map("updated_at") @db.Timestamp(6)

  Alumni   Alumni   @relation(fields: [alumniId], references: [id])
  Location Location @relation(fields: [locationId], references: [id])

  @@map("review_location")
}

model Permission {
  id       String   @id @default(dbgenerated("gen_random_uuid()"))
  userId   String   @map("user_id")
  resource String
  actions  String[]

  Alumni Alumni @relation(fields: [userId], references: [id])

  @@map("permission")
}

model Feedback {
  id       String        @id @default(dbgenerated("gen_random_uuid()"))
  name     String
  email    String
  feedback String
  type     FEEDBACK_TYPE

  // Metadata
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt DateTime @default(now()) @map("updated_at") @db.Timestamp(6)

  @@map("feedback")
}

enum FEEDBACK_TYPE {
  BUG
  FEATURE_REQUEST
  OTHER
}

/**
 * model ReviewLocationProperty {
 * id String @id @default(dbgenerated("gen_random_uuid()"))
 * reviewLocationId String @map("review_location_id")
 * property ReviewLocationProperty @map("property")
 * rating Int @db.SmallInt
 * ReviewLocation ReviewLocation @relation(fields: [reviewLocationId], references: [id])
 * @@map("review_location_property")
 * }
 */

enum COURSE_TYPE {
  INTEGRATED_MASTERS
  BACHELORS
  MASTERS
  DOCTORATE
}

enum COURSE_STATUS {
  ACTIVE
  INACTIVE
}

enum SENIORITY_LEVEL {
  INTERN
  ENTRY_LEVEL
  ASSOCIATE
  MID_SENIOR_LEVEL
  DIRECTOR
  EXECUTIVE
  C_LEVEL
}

// https://learn.microsoft.com/en-us/linkedin/shared/references/reference-tables/company-size-codes
enum COMPANY_SIZE {
  A
  B
  C
  D
  E
  F
  G
  H
  I
}

enum Source {
  FORM_SUBMISSION
  ADMIN_IMPORT
  HONORARY_MEMBER // These are members of the LinkedIn group that have not completed one of the tracked courses
}

enum COMPANY_TYPE {
  EDUCATIONAL
  GOVERNMENT_AGENCY
  NON_PROFIT
  PARTNERSHIP
  PRIVATELY_HELD
  PUBLIC_COMPANY
  SELF_EMPLOYED
  SELF_OWNED
}

/**
 * enum ReviewCompanyProperty {
 * WORK_LIFE_BALANCE
 * SALARY_AND_BENEFITS
 * CAREER_OPPORTUNITIES
 * MANAGEMENT
 * COMPANY_CULTURE
 * }
 */

/**
 * enum ReviewLocationProperty {
 * COST_OF_LIVING
 * WEATHER
 * TRANSPORTATION
 * SAFETY
 * PUBLIC_SERVICES
 * HOUSING
 * OTHER
 * }
 */
