generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Alumni {
  id                String           @id @default(dbgenerated("gen_random_uuid()"))
  firstName         String           @map("first_name")
  lastName          String           @map("last_name")
  linkedinUrl       String?          @unique @map("linkedin_url")
  personalEmail     String?          @map("personal_email")
  currentLocationId String?          @map("current_location_id")
  createdAt         DateTime         @default(now()) @map("created_at") @db.Timestamp(6)
  createdBy         String?          @map("created_by")
  updatedAt         DateTime         @default(now()) @map("updated_at") @db.Timestamp(6)
  updatedBy         String?          @map("updated_by")
  profilePictureUrl String?          @map("profile_picture_url")
  personId          String?          @map("person_id")
  source            Source?
  hasSigarraMatch   Boolean          @map("has_sigarra_match")
  isInGroup         Boolean          @map("is_in_group")
  fullName          String?          @map("full_name")
  wasReviewed       Boolean          @default(false) @map("was_reviewed")
  Location          Location?        @relation(fields: [currentLocationId], references: [id])
  Graduations       Graduation[]
  ReviewsCompany    ReviewCompany[]
  ReviewsLocation   ReviewLocation[]
  Roles             Role[]

  @@index([currentLocationId])
  @@index([firstName, lastName])
  @@index([linkedinUrl])
  @@map("alumni")
}

model Company {
  id            String          @id @default(dbgenerated("gen_random_uuid()"))
  name          String
  linkedinUrl   String?         @unique @map("linkedin_url")
  industryId    String          @map("industry_id")
  logo          String?
  founded       Int?
  companySize   COMPANY_SIZE?   @map("company_size")
  createdAt     DateTime        @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt     DateTime        @default(now()) @map("updated_at") @db.Timestamp(6)
  website       String?
  hqLocationId  String?         @unique @map("hq_location_id")
  Location      Location?       @relation(fields: [hqLocationId], references: [id])
  Industry      Industry        @relation(fields: [industryId], references: [id])
  ReviewCompany ReviewCompany[]
  Role          Role[]

  @@index([industryId])
  @@map("company")
}

model Course {
  id         String        @id @default(uuid())
  name       String
  createdAt  DateTime      @default(now()) @map("created_at") @db.Timestamp(6)
  acronym    String
  endYear    Int?          @map("end_year")
  status     COURSE_STATUS @default(ACTIVE)
  facultyId  String        @map("faculty_id")
  nameInt    String?       @map("name_int")
  courseType COURSE_TYPE   @map("course_type")
  startYear  Int           @map("start_year")
  Graduation Graduation[]

  @@map("course")
}

model Faculty {
  id      String @id
  name    String
  nameInt String @map("name_int")
  acronym String

  @@map("faculty")
}

model Graduation {
  id             String   @id @default(dbgenerated("gen_random_uuid()"))
  alumniId       String   @map("alumni_id")
  courseId       String   @map("course_id")
  conclusionYear Int      @map("conclusion_year")
  createdAt      DateTime @default(now()) @map("created_at") @db.Timestamp(6)
  Alumni         Alumni   @relation(fields: [alumniId], references: [id])
  Course         Course   @relation(fields: [courseId], references: [id])

  @@index([alumniId])
  @@index([courseId])
  @@map("graduation")
}

model Industry {
  id      String    @id @default(dbgenerated("gen_random_uuid()"))
  name    String
  Company Company[]

  @@index([name])
  @@map("industry")
}

model JobClassification {
  id             String   @id @default(dbgenerated("gen_random_uuid()"))
  title          String
  level          Int      @db.SmallInt
  escoCode       String?  @map("esco_code")
  roleId         String   @map("role_id")
  confidence     Float?
  createdAt      DateTime @default(now()) @map("created_at") @db.Timestamp(6)
  modelUsed      String?  @map("model_used")
  processingTime Float?   @map("processing_time")
  updatedAt      DateTime @default(now()) @map("updated_at") @db.Timestamp(6)
  ranking        Int      @default(1) @db.SmallInt
  Role           Role     @relation(fields: [roleId], references: [id])

  @@index([roleId])
  @@index([title])
  @@map("job_classification")
}

model Location {
  id             String                @id @default(dbgenerated("gen_random_uuid()"))
  city           String?
  country        String?
  latitude       Float?
  longitude      Float?
  countryCode    String?               @map("country_code")
  isCountryOnly  Boolean               @default(false) @map("is_country_only")
  createdAt      DateTime              @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt      DateTime              @default(now()) @map("updated_at") @db.Timestamp(6)
  Alumni         Alumni[]
  Company        Company?
  Problematic    ProblematicLocation[]
  ReviewLocation ReviewLocation[]
  Role           Role[]

  @@index([city, country])
  @@index([countryCode])
  @@index([latitude, longitude])
  @@map("location")
}

model ProblematicLocation {
  id          String   @id @default(uuid())
  location_id String
  isExpected  Boolean  @default(false)
  Location    Location @relation(fields: [location_id], references: [id])

  @@map("problematic_location")
}

model Role {
  id                String              @id @default(dbgenerated("gen_random_uuid()"))
  alumniId          String              @map("alumni_id")
  companyId         String              @map("company_id")
  startDate         DateTime            @map("start_date") @db.Timestamptz(6)
  endDate           DateTime?           @map("end_date") @db.Timestamptz(6)
  seniorityLevel    SENIORITY_LEVEL     @map("seniority_level")
  locationId        String?             @map("location_id")
  createdAt         DateTime            @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt         DateTime            @default(now()) @map("updated_at") @db.Timestamp(6)
  isCurrent         Boolean             @default(false) @map("is_current")
  isPromotion       Boolean             @default(false) @map("is_promotion")
  JobClassification JobClassification[]
  Alumni            Alumni              @relation(fields: [alumniId], references: [id])
  Company           Company             @relation(fields: [companyId], references: [id])
  Location          Location?           @relation(fields: [locationId], references: [id])
  RoleRaw           RoleRaw?

  @@index([alumniId])
  @@index([companyId])
  @@index([locationId])
  @@map("role")
}

model RoleRaw {
  id          String   @id @default(dbgenerated("gen_random_uuid()"))
  description String?
  roleId      String   @unique @map("role_id")
  title       String
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamp(6)
  Role        Role     @relation(fields: [roleId], references: [id])

  @@index([roleId])
  @@map("role_raw")
}

model ReviewCompany {
  id          String   @id @default(dbgenerated("gen_random_uuid()"))
  alumniId    String   @map("alumni_id")
  companyId   String   @map("company_id")
  rating      Int      @db.SmallInt
  description String?
  upvotes     Int      @default(0) @db.SmallInt
  downvotes   Int      @default(0) @db.SmallInt
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt   DateTime @default(now()) @map("updated_at") @db.Timestamp(6)
  Alumni      Alumni   @relation(fields: [alumniId], references: [id])
  Company     Company  @relation(fields: [companyId], references: [id])

  @@map("review_company")
}

model ReviewLocation {
  id          String   @id @default(dbgenerated("gen_random_uuid()"))
  alumniId    String   @map("alumni_id")
  locationId  String   @map("location_id")
  rating      Int      @db.SmallInt
  description String?
  upvotes     Int      @default(0) @db.SmallInt
  downvotes   Int      @default(0) @db.SmallInt
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt   DateTime @default(now()) @map("updated_at") @db.Timestamp(6)
  Alumni      Alumni   @relation(fields: [alumniId], references: [id])
  Location    Location @relation(fields: [locationId], references: [id])

  @@map("review_location")
}

enum COURSE_TYPE {
  INTEGRATED_MASTERS
  BACHELORS
  MASTERS
  DOCTORATE
}

enum COURSE_STATUS {
  ACTIVE
  INACTIVE
}

enum SENIORITY_LEVEL {
  INTERN
  ENTRY_LEVEL
  ASSOCIATE
  MID_SENIOR_LEVEL
  DIRECTOR
  EXECUTIVE
  C_LEVEL
}

enum COMPANY_SIZE {
  A
  B
  C
  D
  E
  F
  G
  H
  I
}

enum Source {
  FORM_SUBMISSION
  ADMIN_IMPORT
  HONORARY_MEMBER
}
